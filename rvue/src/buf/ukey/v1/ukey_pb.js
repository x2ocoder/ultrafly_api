// source: ukey/v1/ukey.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ukey.v1.Ukey', null, global);
goog.exportSymbol('proto.ukey.v1.UkeySetResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ukey.v1.Ukey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ukey.v1.Ukey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ukey.v1.Ukey.displayName = 'proto.ukey.v1.Ukey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ukey.v1.UkeySetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ukey.v1.UkeySetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ukey.v1.UkeySetResponse.displayName = 'proto.ukey.v1.UkeySetResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ukey.v1.Ukey.prototype.toObject = function(opt_includeInstance) {
  return proto.ukey.v1.Ukey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ukey.v1.Ukey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ukey.v1.Ukey.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    generationId: msg.getGenerationId_asB64(),
    appId: msg.getAppId_asB64(),
    epcBase: msg.getEpcBase_asB64(),
    epcStyle: jspb.Message.getFieldWithDefault(msg, 5, ""),
    accessBase: msg.getAccessBase_asB64(),
    accessStyle: jspb.Message.getFieldWithDefault(msg, 7, ""),
    killBase: msg.getKillBase_asB64(),
    killStyle: jspb.Message.getFieldWithDefault(msg, 9, ""),
    confirmation: msg.getConfirmation_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ukey.v1.Ukey}
 */
proto.ukey.v1.Ukey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ukey.v1.Ukey;
  return proto.ukey.v1.Ukey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ukey.v1.Ukey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ukey.v1.Ukey}
 */
proto.ukey.v1.Ukey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGenerationId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEpcBase(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpcStyle(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccessBase(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessStyle(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKillBase(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setKillStyle(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfirmation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ukey.v1.Ukey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ukey.v1.Ukey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ukey.v1.Ukey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ukey.v1.Ukey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGenerationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEpcBase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEpcStyle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAccessBase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getAccessStyle();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getKillBase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getKillStyle();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getConfirmation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.ukey.v1.Ukey.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes generation_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ukey.v1.Ukey.prototype.getGenerationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes generation_id = 2;
 * This is a type-conversion wrapper around `getGenerationId()`
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getGenerationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGenerationId()));
};


/**
 * optional bytes generation_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGenerationId()`
 * @return {!Uint8Array}
 */
proto.ukey.v1.Ukey.prototype.getGenerationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGenerationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setGenerationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes app_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ukey.v1.Ukey.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes app_id = 3;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.ukey.v1.Ukey.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes epc_base = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ukey.v1.Ukey.prototype.getEpcBase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes epc_base = 4;
 * This is a type-conversion wrapper around `getEpcBase()`
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getEpcBase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEpcBase()));
};


/**
 * optional bytes epc_base = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEpcBase()`
 * @return {!Uint8Array}
 */
proto.ukey.v1.Ukey.prototype.getEpcBase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEpcBase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setEpcBase = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string epc_style = 5;
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getEpcStyle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setEpcStyle = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes access_base = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ukey.v1.Ukey.prototype.getAccessBase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes access_base = 6;
 * This is a type-conversion wrapper around `getAccessBase()`
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getAccessBase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccessBase()));
};


/**
 * optional bytes access_base = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccessBase()`
 * @return {!Uint8Array}
 */
proto.ukey.v1.Ukey.prototype.getAccessBase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccessBase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setAccessBase = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string access_style = 7;
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getAccessStyle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setAccessStyle = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes kill_base = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ukey.v1.Ukey.prototype.getKillBase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes kill_base = 8;
 * This is a type-conversion wrapper around `getKillBase()`
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getKillBase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKillBase()));
};


/**
 * optional bytes kill_base = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKillBase()`
 * @return {!Uint8Array}
 */
proto.ukey.v1.Ukey.prototype.getKillBase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKillBase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setKillBase = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional string kill_style = 9;
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getKillStyle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setKillStyle = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bytes confirmation = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ukey.v1.Ukey.prototype.getConfirmation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes confirmation = 11;
 * This is a type-conversion wrapper around `getConfirmation()`
 * @return {string}
 */
proto.ukey.v1.Ukey.prototype.getConfirmation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfirmation()));
};


/**
 * optional bytes confirmation = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfirmation()`
 * @return {!Uint8Array}
 */
proto.ukey.v1.Ukey.prototype.getConfirmation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfirmation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ukey.v1.Ukey} returns this
 */
proto.ukey.v1.Ukey.prototype.setConfirmation = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ukey.v1.UkeySetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ukey.v1.UkeySetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ukey.v1.UkeySetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ukey.v1.UkeySetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ukey.v1.UkeySetResponse}
 */
proto.ukey.v1.UkeySetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ukey.v1.UkeySetResponse;
  return proto.ukey.v1.UkeySetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ukey.v1.UkeySetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ukey.v1.UkeySetResponse}
 */
proto.ukey.v1.UkeySetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ukey.v1.UkeySetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ukey.v1.UkeySetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ukey.v1.UkeySetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ukey.v1.UkeySetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.ukey.v1.UkeySetResponse.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ukey.v1.UkeySetResponse} returns this
 */
proto.ukey.v1.UkeySetResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.ukey.v1.UkeySetResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ukey.v1.UkeySetResponse} returns this
 */
proto.ukey.v1.UkeySetResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ukey.v1.UkeySetResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ukey.v1.UkeySetResponse} returns this
 */
proto.ukey.v1.UkeySetResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.ukey.v1);
