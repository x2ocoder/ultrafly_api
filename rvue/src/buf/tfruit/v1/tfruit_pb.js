// source: tfruit/v1/tfruit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ffruit_v1_ffruit_pb = require('../../ffruit/v1/ffruit_pb.js');
goog.object.extend(proto, ffruit_v1_ffruit_pb);
goog.exportSymbol('proto.tfruit.v1.BasketLogRequest', null, global);
goog.exportSymbol('proto.tfruit.v1.BasketLogResponse', null, global);
goog.exportSymbol('proto.tfruit.v1.BasketScanInfo', null, global);
goog.exportSymbol('proto.tfruit.v1.CardScanInfo', null, global);
goog.exportSymbol('proto.tfruit.v1.ContactInfo', null, global);
goog.exportSymbol('proto.tfruit.v1.FfruitSpecialCommand', null, global);
goog.exportSymbol('proto.tfruit.v1.ReaderPing', null, global);
goog.exportSymbol('proto.tfruit.v1.ReaderPong', null, global);
goog.exportSymbol('proto.tfruit.v1.StationInfo', null, global);
goog.exportSymbol('proto.tfruit.v1.TfruitBasketMessage', null, global);
goog.exportSymbol('proto.tfruit.v1.UltraflyConfiguration', null, global);
goog.exportSymbol('proto.tfruit.v1.UltraflySignKeySetRequest', null, global);
goog.exportSymbol('proto.tfruit.v1.UltraflySignKeySetResponse', null, global);
goog.exportSymbol('proto.tfruit.v1.UltraflySignedMessage', null, global);
goog.exportSymbol('proto.tfruit.v1.UltraflyStatusResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.UltraflyConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.UltraflyConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.UltraflyConfiguration.displayName = 'proto.tfruit.v1.UltraflyConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.UltraflySignedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.UltraflySignedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.UltraflySignedMessage.displayName = 'proto.tfruit.v1.UltraflySignedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.ReaderPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.ReaderPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.ReaderPing.displayName = 'proto.tfruit.v1.ReaderPing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.ReaderPong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.ReaderPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.ReaderPong.displayName = 'proto.tfruit.v1.ReaderPong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.BasketScanInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.BasketScanInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.BasketScanInfo.displayName = 'proto.tfruit.v1.BasketScanInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.CardScanInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.CardScanInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.CardScanInfo.displayName = 'proto.tfruit.v1.CardScanInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.StationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.StationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.StationInfo.displayName = 'proto.tfruit.v1.StationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.TfruitBasketMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.TfruitBasketMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.TfruitBasketMessage.displayName = 'proto.tfruit.v1.TfruitBasketMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.BasketLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.BasketLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.BasketLogRequest.displayName = 'proto.tfruit.v1.BasketLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.BasketLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.BasketLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.BasketLogResponse.displayName = 'proto.tfruit.v1.BasketLogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.UltraflyStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.UltraflyStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.UltraflyStatusResponse.displayName = 'proto.tfruit.v1.UltraflyStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.UltraflySignKeySetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.UltraflySignKeySetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.UltraflySignKeySetRequest.displayName = 'proto.tfruit.v1.UltraflySignKeySetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.UltraflySignKeySetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.UltraflySignKeySetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.UltraflySignKeySetResponse.displayName = 'proto.tfruit.v1.UltraflySignKeySetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tfruit.v1.ContactInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tfruit.v1.ContactInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tfruit.v1.ContactInfo.displayName = 'proto.tfruit.v1.ContactInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.UltraflyConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.UltraflyConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflyConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inputGpio1: jspb.Message.getFieldWithDefault(msg, 11, 0),
    inputGpio2: jspb.Message.getFieldWithDefault(msg, 12, 0),
    inputGpio3: jspb.Message.getFieldWithDefault(msg, 13, 0),
    inputGpio4: jspb.Message.getFieldWithDefault(msg, 14, 0),
    outputGpio1: jspb.Message.getFieldWithDefault(msg, 21, 0),
    outputGpio2: jspb.Message.getFieldWithDefault(msg, 22, 0),
    outputGpio3: jspb.Message.getFieldWithDefault(msg, 23, 0),
    outputGpio4: jspb.Message.getFieldWithDefault(msg, 24, 0),
    outputGpio5: jspb.Message.getFieldWithDefault(msg, 25, 0),
    outputGpio6: jspb.Message.getFieldWithDefault(msg, 26, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.UltraflyConfiguration}
 */
proto.tfruit.v1.UltraflyConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.UltraflyConfiguration;
  return proto.tfruit.v1.UltraflyConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.UltraflyConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.UltraflyConfiguration}
 */
proto.tfruit.v1.UltraflyConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputGpio1(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputGpio2(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputGpio3(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputGpio4(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputGpio1(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputGpio2(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputGpio3(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputGpio4(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputGpio5(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputGpio6(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.UltraflyConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.UltraflyConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflyConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInputGpio1();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getInputGpio2();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getInputGpio3();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getInputGpio4();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getOutputGpio1();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getOutputGpio2();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getOutputGpio3();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getOutputGpio4();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = message.getOutputGpio5();
  if (f !== 0) {
    writer.writeUint32(
      25,
      f
    );
  }
  f = message.getOutputGpio6();
  if (f !== 0) {
    writer.writeUint32(
      26,
      f
    );
  }
};


/**
 * optional uint32 timestamp = 1;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 input_gpio_1 = 11;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getInputGpio1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setInputGpio1 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 input_gpio_2 = 12;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getInputGpio2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setInputGpio2 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 input_gpio_3 = 13;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getInputGpio3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setInputGpio3 = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 input_gpio_4 = 14;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getInputGpio4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setInputGpio4 = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 output_gpio_1 = 21;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getOutputGpio1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setOutputGpio1 = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 output_gpio_2 = 22;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getOutputGpio2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setOutputGpio2 = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint32 output_gpio_3 = 23;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getOutputGpio3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setOutputGpio3 = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional uint32 output_gpio_4 = 24;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getOutputGpio4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setOutputGpio4 = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional uint32 output_gpio_5 = 25;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getOutputGpio5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setOutputGpio5 = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional uint32 output_gpio_6 = 26;
 * @return {number}
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.getOutputGpio6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyConfiguration} returns this
 */
proto.tfruit.v1.UltraflyConfiguration.prototype.setOutputGpio6 = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.UltraflySignedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.UltraflySignedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflySignedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: msg.getTopic_asB64(),
    data: msg.getData_asB64(),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.UltraflySignedMessage}
 */
proto.tfruit.v1.UltraflySignedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.UltraflySignedMessage;
  return proto.tfruit.v1.UltraflySignedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.UltraflySignedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.UltraflySignedMessage}
 */
proto.tfruit.v1.UltraflySignedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.UltraflySignedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.UltraflySignedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflySignedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes topic = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getTopic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes topic = 1;
 * This is a type-conversion wrapper around `getTopic()`
 * @return {string}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getTopic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic()));
};


/**
 * optional bytes topic = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getTopic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.UltraflySignedMessage} returns this
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.setTopic = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.UltraflySignedMessage} returns this
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.UltraflySignedMessage} returns this
 */
proto.tfruit.v1.UltraflySignedMessage.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.ReaderPing.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.ReaderPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.ReaderPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.ReaderPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    ultraflyUid: msg.getUltraflyUid_asB64(),
    station: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.ReaderPing}
 */
proto.tfruit.v1.ReaderPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.ReaderPing;
  return proto.tfruit.v1.ReaderPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.ReaderPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.ReaderPing}
 */
proto.tfruit.v1.ReaderPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUltraflyUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.ReaderPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.ReaderPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.ReaderPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.ReaderPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUltraflyUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStation();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes ultrafly_uid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.ReaderPing.prototype.getUltraflyUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ultrafly_uid = 1;
 * This is a type-conversion wrapper around `getUltraflyUid()`
 * @return {string}
 */
proto.tfruit.v1.ReaderPing.prototype.getUltraflyUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUltraflyUid()));
};


/**
 * optional bytes ultrafly_uid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUltraflyUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.ReaderPing.prototype.getUltraflyUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUltraflyUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.ReaderPing} returns this
 */
proto.tfruit.v1.ReaderPing.prototype.setUltraflyUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 station = 3;
 * @return {number}
 */
proto.tfruit.v1.ReaderPing.prototype.getStation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.ReaderPing} returns this
 */
proto.tfruit.v1.ReaderPing.prototype.setStation = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.ReaderPong.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.ReaderPong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.ReaderPong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.ReaderPong.toObject = function(includeInstance, msg) {
  var f, obj = {
    clearlyUid: msg.getClearlyUid_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.ReaderPong}
 */
proto.tfruit.v1.ReaderPong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.ReaderPong;
  return proto.tfruit.v1.ReaderPong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.ReaderPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.ReaderPong}
 */
proto.tfruit.v1.ReaderPong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClearlyUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.ReaderPong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.ReaderPong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.ReaderPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.ReaderPong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClearlyUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes clearly_uid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.ReaderPong.prototype.getClearlyUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes clearly_uid = 1;
 * This is a type-conversion wrapper around `getClearlyUid()`
 * @return {string}
 */
proto.tfruit.v1.ReaderPong.prototype.getClearlyUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClearlyUid()));
};


/**
 * optional bytes clearly_uid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClearlyUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.ReaderPong.prototype.getClearlyUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClearlyUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.ReaderPong} returns this
 */
proto.tfruit.v1.ReaderPong.prototype.setClearlyUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.tfruit.v1.ReaderPong.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.ReaderPong} returns this
 */
proto.tfruit.v1.ReaderPong.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.BasketScanInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.BasketScanInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.BasketScanInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.BasketScanInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    basketUid: msg.getBasketUid_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    station: jspb.Message.getFieldWithDefault(msg, 3, 0),
    collector: jspb.Message.getFieldWithDefault(msg, 4, 0),
    farmer: jspb.Message.getFieldWithDefault(msg, 5, 0),
    card: jspb.Message.getFieldWithDefault(msg, 6, 0),
    product: jspb.Message.getFieldWithDefault(msg, 7, 0),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    weightUom: jspb.Message.getFieldWithDefault(msg, 9, ""),
    machineNumber: jspb.Message.getFieldWithDefault(msg, 10, 0),
    command: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.BasketScanInfo}
 */
proto.tfruit.v1.BasketScanInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.BasketScanInfo;
  return proto.tfruit.v1.BasketScanInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.BasketScanInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.BasketScanInfo}
 */
proto.tfruit.v1.BasketScanInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBasketUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollector(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFarmer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCard(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProduct(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightUom(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMachineNumber(value);
      break;
    case 20:
      var value = /** @type {!proto.ffruit.v1.FfruitSpecialCommand} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.BasketScanInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.BasketScanInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.BasketScanInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.BasketScanInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasketUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStation();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCollector();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFarmer();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCard();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getProduct();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getWeightUom();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMachineNumber();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
};


/**
 * optional bytes basket_uid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getBasketUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes basket_uid = 1;
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {string}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getBasketUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBasketUid()));
};


/**
 * optional bytes basket_uid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getBasketUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBasketUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setBasketUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 station = 3;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getStation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setStation = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 collector = 4;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getCollector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setCollector = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 farmer = 5;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getFarmer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setFarmer = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 card = 6;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setCard = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 product = 7;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getProduct = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setProduct = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float weight = 8;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional string weight_uom = 9;
 * @return {string}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getWeightUom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setWeightUom = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint32 machine_number = 10;
 * @return {number}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getMachineNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setMachineNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional ffruit.v1.FfruitSpecialCommand command = 20;
 * @return {!proto.ffruit.v1.FfruitSpecialCommand}
 */
proto.tfruit.v1.BasketScanInfo.prototype.getCommand = function() {
  return /** @type {!proto.ffruit.v1.FfruitSpecialCommand} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.ffruit.v1.FfruitSpecialCommand} value
 * @return {!proto.tfruit.v1.BasketScanInfo} returns this
 */
proto.tfruit.v1.BasketScanInfo.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.CardScanInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.CardScanInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.CardScanInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.CardScanInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardUid: msg.getCardUid_asB64(),
    collector: jspb.Message.getFieldWithDefault(msg, 4, 0),
    farmer: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.CardScanInfo}
 */
proto.tfruit.v1.CardScanInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.CardScanInfo;
  return proto.tfruit.v1.CardScanInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.CardScanInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.CardScanInfo}
 */
proto.tfruit.v1.CardScanInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCardUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollector(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFarmer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.CardScanInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.CardScanInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.CardScanInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.CardScanInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCardUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCollector();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFarmer();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 timestamp = 1;
 * @return {number}
 */
proto.tfruit.v1.CardScanInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.CardScanInfo} returns this
 */
proto.tfruit.v1.CardScanInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes card_uid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.CardScanInfo.prototype.getCardUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes card_uid = 2;
 * This is a type-conversion wrapper around `getCardUid()`
 * @return {string}
 */
proto.tfruit.v1.CardScanInfo.prototype.getCardUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCardUid()));
};


/**
 * optional bytes card_uid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCardUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.CardScanInfo.prototype.getCardUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCardUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.CardScanInfo} returns this
 */
proto.tfruit.v1.CardScanInfo.prototype.setCardUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 collector = 4;
 * @return {number}
 */
proto.tfruit.v1.CardScanInfo.prototype.getCollector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.CardScanInfo} returns this
 */
proto.tfruit.v1.CardScanInfo.prototype.setCollector = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 farmer = 5;
 * @return {number}
 */
proto.tfruit.v1.CardScanInfo.prototype.getFarmer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.CardScanInfo} returns this
 */
proto.tfruit.v1.CardScanInfo.prototype.setFarmer = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.StationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.StationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.StationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.StationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collector: jspb.Message.getFieldWithDefault(msg, 2, 0),
    basketUid: msg.getBasketUid_asB64(),
    cardUid: msg.getCardUid_asB64(),
    systemOnline: jspb.Message.getFieldWithDefault(msg, 5, ""),
    infoline1: jspb.Message.getFieldWithDefault(msg, 6, ""),
    infoline2: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.StationInfo}
 */
proto.tfruit.v1.StationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.StationInfo;
  return proto.tfruit.v1.StationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.StationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.StationInfo}
 */
proto.tfruit.v1.StationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollector(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBasketUid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCardUid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemOnline(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoline1(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfoline2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.StationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.StationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.StationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.StationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCollector();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBasketUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCardUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSystemOnline();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getInfoline1();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getInfoline2();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint32 timestamp = 1;
 * @return {number}
 */
proto.tfruit.v1.StationInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.StationInfo} returns this
 */
proto.tfruit.v1.StationInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 collector = 2;
 * @return {number}
 */
proto.tfruit.v1.StationInfo.prototype.getCollector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.StationInfo} returns this
 */
proto.tfruit.v1.StationInfo.prototype.setCollector = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes basket_uid = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.StationInfo.prototype.getBasketUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes basket_uid = 3;
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {string}
 */
proto.tfruit.v1.StationInfo.prototype.getBasketUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBasketUid()));
};


/**
 * optional bytes basket_uid = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.StationInfo.prototype.getBasketUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBasketUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.StationInfo} returns this
 */
proto.tfruit.v1.StationInfo.prototype.setBasketUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes card_uid = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.StationInfo.prototype.getCardUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes card_uid = 4;
 * This is a type-conversion wrapper around `getCardUid()`
 * @return {string}
 */
proto.tfruit.v1.StationInfo.prototype.getCardUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCardUid()));
};


/**
 * optional bytes card_uid = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCardUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.StationInfo.prototype.getCardUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCardUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.StationInfo} returns this
 */
proto.tfruit.v1.StationInfo.prototype.setCardUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string system_online = 5;
 * @return {string}
 */
proto.tfruit.v1.StationInfo.prototype.getSystemOnline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.StationInfo} returns this
 */
proto.tfruit.v1.StationInfo.prototype.setSystemOnline = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string infoline1 = 6;
 * @return {string}
 */
proto.tfruit.v1.StationInfo.prototype.getInfoline1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.StationInfo} returns this
 */
proto.tfruit.v1.StationInfo.prototype.setInfoline1 = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string infoline2 = 7;
 * @return {string}
 */
proto.tfruit.v1.StationInfo.prototype.getInfoline2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.StationInfo} returns this
 */
proto.tfruit.v1.StationInfo.prototype.setInfoline2 = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.TfruitBasketMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.TfruitBasketMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.TfruitBasketMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    basketUid: msg.getBasketUid_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    station: jspb.Message.getFieldWithDefault(msg, 3, 0),
    collector: jspb.Message.getFieldWithDefault(msg, 4, 0),
    farmer: jspb.Message.getFieldWithDefault(msg, 5, 0),
    product: jspb.Message.getFieldWithDefault(msg, 6, 0),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    weightUom: jspb.Message.getFieldWithDefault(msg, 8, ""),
    resetTimestamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    farmerCard: jspb.Message.getFieldWithDefault(msg, 10, 0),
    command: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.TfruitBasketMessage}
 */
proto.tfruit.v1.TfruitBasketMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.TfruitBasketMessage;
  return proto.tfruit.v1.TfruitBasketMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.TfruitBasketMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.TfruitBasketMessage}
 */
proto.tfruit.v1.TfruitBasketMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBasketUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollector(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFarmer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProduct(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightUom(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResetTimestamp(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFarmerCard(value);
      break;
    case 20:
      var value = /** @type {!proto.ffruit.v1.FfruitSpecialCommand} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.TfruitBasketMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.TfruitBasketMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.TfruitBasketMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasketUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStation();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCollector();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFarmer();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getProduct();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getWeightUom();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getResetTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getFarmerCard();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
};


/**
 * optional bytes basket_uid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getBasketUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes basket_uid = 1;
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {string}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getBasketUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBasketUid()));
};


/**
 * optional bytes basket_uid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getBasketUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBasketUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setBasketUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 station = 3;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getStation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setStation = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 collector = 4;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getCollector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setCollector = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 farmer = 5;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getFarmer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setFarmer = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 product = 6;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getProduct = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setProduct = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float weight = 7;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string weight_uom = 8;
 * @return {string}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getWeightUom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setWeightUom = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 reset_timestamp = 9;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getResetTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setResetTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 farmer_card = 10;
 * @return {number}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getFarmerCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setFarmerCard = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional ffruit.v1.FfruitSpecialCommand command = 20;
 * @return {!proto.ffruit.v1.FfruitSpecialCommand}
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.getCommand = function() {
  return /** @type {!proto.ffruit.v1.FfruitSpecialCommand} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.ffruit.v1.FfruitSpecialCommand} value
 * @return {!proto.tfruit.v1.TfruitBasketMessage} returns this
 */
proto.tfruit.v1.TfruitBasketMessage.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.BasketLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.BasketLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.BasketLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.BasketLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tfruitBasket: (f = msg.getTfruitBasket()) && proto.tfruit.v1.TfruitBasketMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.BasketLogRequest}
 */
proto.tfruit.v1.BasketLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.BasketLogRequest;
  return proto.tfruit.v1.BasketLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.BasketLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.BasketLogRequest}
 */
proto.tfruit.v1.BasketLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tfruit.v1.TfruitBasketMessage;
      reader.readMessage(value,proto.tfruit.v1.TfruitBasketMessage.deserializeBinaryFromReader);
      msg.setTfruitBasket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.BasketLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.BasketLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.BasketLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.BasketLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTfruitBasket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tfruit.v1.TfruitBasketMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional TfruitBasketMessage tfruit_basket = 1;
 * @return {?proto.tfruit.v1.TfruitBasketMessage}
 */
proto.tfruit.v1.BasketLogRequest.prototype.getTfruitBasket = function() {
  return /** @type{?proto.tfruit.v1.TfruitBasketMessage} */ (
    jspb.Message.getWrapperField(this, proto.tfruit.v1.TfruitBasketMessage, 1));
};


/**
 * @param {?proto.tfruit.v1.TfruitBasketMessage|undefined} value
 * @return {!proto.tfruit.v1.BasketLogRequest} returns this
*/
proto.tfruit.v1.BasketLogRequest.prototype.setTfruitBasket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tfruit.v1.BasketLogRequest} returns this
 */
proto.tfruit.v1.BasketLogRequest.prototype.clearTfruitBasket = function() {
  return this.setTfruitBasket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tfruit.v1.BasketLogRequest.prototype.hasTfruitBasket = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.BasketLogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.BasketLogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.BasketLogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.BasketLogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    basketUid: msg.getBasketUid_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    station: jspb.Message.getFieldWithDefault(msg, 3, 0),
    collector: jspb.Message.getFieldWithDefault(msg, 4, 0),
    farmer: jspb.Message.getFieldWithDefault(msg, 5, 0),
    product: jspb.Message.getFieldWithDefault(msg, 6, 0),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    weightUom: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.BasketLogResponse}
 */
proto.tfruit.v1.BasketLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.BasketLogResponse;
  return proto.tfruit.v1.BasketLogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.BasketLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.BasketLogResponse}
 */
proto.tfruit.v1.BasketLogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBasketUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollector(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFarmer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProduct(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightUom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.BasketLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.BasketLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.BasketLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.BasketLogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasketUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStation();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCollector();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFarmer();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getProduct();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getWeightUom();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional bytes basket_uid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getBasketUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes basket_uid = 1;
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {string}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getBasketUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBasketUid()));
};


/**
 * optional bytes basket_uid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBasketUid()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getBasketUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBasketUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setBasketUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 station = 3;
 * @return {number}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getStation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setStation = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 collector = 4;
 * @return {number}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getCollector = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setCollector = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 farmer = 5;
 * @return {number}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getFarmer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setFarmer = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 product = 6;
 * @return {number}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getProduct = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setProduct = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float weight = 7;
 * @return {number}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string weight_uom = 8;
 * @return {string}
 */
proto.tfruit.v1.BasketLogResponse.prototype.getWeightUom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.BasketLogResponse} returns this
 */
proto.tfruit.v1.BasketLogResponse.prototype.setWeightUom = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.UltraflyStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.UltraflyStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflyStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    input1: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    input2: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    input3: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    input4: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    output1: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    output2: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    output3: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
    output4: jspb.Message.getBooleanFieldWithDefault(msg, 24, false),
    output5: jspb.Message.getBooleanFieldWithDefault(msg, 25, false),
    output6: jspb.Message.getBooleanFieldWithDefault(msg, 26, false),
    ultraflyConfiguration: (f = msg.getUltraflyConfiguration()) && proto.tfruit.v1.UltraflyConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.UltraflyStatusResponse}
 */
proto.tfruit.v1.UltraflyStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.UltraflyStatusResponse;
  return proto.tfruit.v1.UltraflyStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.UltraflyStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.UltraflyStatusResponse}
 */
proto.tfruit.v1.UltraflyStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInput1(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInput2(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInput3(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInput4(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutput1(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutput2(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutput3(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutput4(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutput5(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutput6(value);
      break;
    case 50:
      var value = new proto.tfruit.v1.UltraflyConfiguration;
      reader.readMessage(value,proto.tfruit.v1.UltraflyConfiguration.deserializeBinaryFromReader);
      msg.setUltraflyConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.UltraflyStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.UltraflyStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflyStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInput1();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getInput2();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getInput3();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getInput4();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getOutput1();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getOutput2();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getOutput3();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = message.getOutput4();
  if (f) {
    writer.writeBool(
      24,
      f
    );
  }
  f = message.getOutput5();
  if (f) {
    writer.writeBool(
      25,
      f
    );
  }
  f = message.getOutput6();
  if (f) {
    writer.writeBool(
      26,
      f
    );
  }
  f = message.getUltraflyConfiguration();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.tfruit.v1.UltraflyConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 timestamp = 1;
 * @return {number}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool input1 = 11;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getInput1 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setInput1 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool input2 = 12;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getInput2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setInput2 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool input3 = 13;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getInput3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setInput3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool input4 = 14;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getInput4 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setInput4 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool output1 = 21;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getOutput1 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setOutput1 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional bool output2 = 22;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getOutput2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setOutput2 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 22, value);
};


/**
 * optional bool output3 = 23;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getOutput3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setOutput3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};


/**
 * optional bool output4 = 24;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getOutput4 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setOutput4 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 24, value);
};


/**
 * optional bool output5 = 25;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getOutput5 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setOutput5 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 25, value);
};


/**
 * optional bool output6 = 26;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getOutput6 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 26, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.setOutput6 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 26, value);
};


/**
 * optional UltraflyConfiguration ultrafly_configuration = 50;
 * @return {?proto.tfruit.v1.UltraflyConfiguration}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.getUltraflyConfiguration = function() {
  return /** @type{?proto.tfruit.v1.UltraflyConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.tfruit.v1.UltraflyConfiguration, 50));
};


/**
 * @param {?proto.tfruit.v1.UltraflyConfiguration|undefined} value
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
*/
proto.tfruit.v1.UltraflyStatusResponse.prototype.setUltraflyConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 50, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tfruit.v1.UltraflyStatusResponse} returns this
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.clearUltraflyConfiguration = function() {
  return this.setUltraflyConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tfruit.v1.UltraflyStatusResponse.prototype.hasUltraflyConfiguration = function() {
  return jspb.Message.getField(this, 50) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.UltraflySignKeySetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.UltraflySignKeySetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflySignKeySetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nfcKeyMask: msg.getNfcKeyMask_asB64(),
    debugKeyMask: msg.getDebugKeyMask_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.UltraflySignKeySetRequest}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.UltraflySignKeySetRequest;
  return proto.tfruit.v1.UltraflySignKeySetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.UltraflySignKeySetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.UltraflySignKeySetRequest}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNfcKeyMask(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDebugKeyMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.UltraflySignKeySetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.UltraflySignKeySetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflySignKeySetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNfcKeyMask_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDebugKeyMask_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes nfc_key_mask = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.getNfcKeyMask = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nfc_key_mask = 1;
 * This is a type-conversion wrapper around `getNfcKeyMask()`
 * @return {string}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.getNfcKeyMask_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNfcKeyMask()));
};


/**
 * optional bytes nfc_key_mask = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNfcKeyMask()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.getNfcKeyMask_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNfcKeyMask()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.UltraflySignKeySetRequest} returns this
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.setNfcKeyMask = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes debug_key_mask = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.getDebugKeyMask = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes debug_key_mask = 2;
 * This is a type-conversion wrapper around `getDebugKeyMask()`
 * @return {string}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.getDebugKeyMask_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDebugKeyMask()));
};


/**
 * optional bytes debug_key_mask = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDebugKeyMask()`
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.getDebugKeyMask_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDebugKeyMask()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tfruit.v1.UltraflySignKeySetRequest} returns this
 */
proto.tfruit.v1.UltraflySignKeySetRequest.prototype.setDebugKeyMask = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.UltraflySignKeySetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.UltraflySignKeySetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.UltraflySignKeySetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflySignKeySetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.UltraflySignKeySetResponse}
 */
proto.tfruit.v1.UltraflySignKeySetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.UltraflySignKeySetResponse;
  return proto.tfruit.v1.UltraflySignKeySetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.UltraflySignKeySetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.UltraflySignKeySetResponse}
 */
proto.tfruit.v1.UltraflySignKeySetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.UltraflySignKeySetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.UltraflySignKeySetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.UltraflySignKeySetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.UltraflySignKeySetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.tfruit.v1.UltraflySignKeySetResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tfruit.v1.UltraflySignKeySetResponse} returns this
 */
proto.tfruit.v1.UltraflySignKeySetResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tfruit.v1.ContactInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tfruit.v1.ContactInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tfruit.v1.ContactInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.ContactInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tfruit.v1.ContactInfo}
 */
proto.tfruit.v1.ContactInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tfruit.v1.ContactInfo;
  return proto.tfruit.v1.ContactInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tfruit.v1.ContactInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tfruit.v1.ContactInfo}
 */
proto.tfruit.v1.ContactInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tfruit.v1.ContactInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tfruit.v1.ContactInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tfruit.v1.ContactInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tfruit.v1.ContactInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.tfruit.v1.ContactInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tfruit.v1.ContactInfo} returns this
 */
proto.tfruit.v1.ContactInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tfruit.v1.ContactInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.ContactInfo} returns this
 */
proto.tfruit.v1.ContactInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string phone = 3;
 * @return {string}
 */
proto.tfruit.v1.ContactInfo.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.ContactInfo} returns this
 */
proto.tfruit.v1.ContactInfo.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.tfruit.v1.ContactInfo.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tfruit.v1.ContactInfo} returns this
 */
proto.tfruit.v1.ContactInfo.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.tfruit.v1.FfruitSpecialCommand = {
  IGNORE_ME: 0,
  REDO_PRESET: 1
};

goog.object.extend(exports, proto.tfruit.v1);
