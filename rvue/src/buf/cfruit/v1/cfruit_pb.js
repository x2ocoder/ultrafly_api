// source: cfruit/v1/cfruit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cfruit.v1.CfruitConfig', null, global);
goog.exportSymbol('proto.cfruit.v1.CfruitStateMessage', null, global);
goog.exportSymbol('proto.cfruit.v1.CfruitStatus', null, global);
goog.exportSymbol('proto.cfruit.v1.CfruitUserBankData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cfruit.v1.CfruitConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cfruit.v1.CfruitConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cfruit.v1.CfruitConfig.displayName = 'proto.cfruit.v1.CfruitConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cfruit.v1.CfruitStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cfruit.v1.CfruitStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cfruit.v1.CfruitStateMessage.displayName = 'proto.cfruit.v1.CfruitStateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cfruit.v1.CfruitStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cfruit.v1.CfruitStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cfruit.v1.CfruitStatus.displayName = 'proto.cfruit.v1.CfruitStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cfruit.v1.CfruitUserBankData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cfruit.v1.CfruitUserBankData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cfruit.v1.CfruitUserBankData.displayName = 'proto.cfruit.v1.CfruitUserBankData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cfruit.v1.CfruitConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.cfruit.v1.CfruitConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cfruit.v1.CfruitConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    mqttUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mqttUsername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mqttPassword: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mqttClientId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    uksrState: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mineralPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    iz7kListenSpec: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gormDbEngine: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gormDbUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clearlyMac: jspb.Message.getFieldWithDefault(msg, 20, ""),
    itemPrimaryField: jspb.Message.getFieldWithDefault(msg, 30, ""),
    safetyRecordSeconds: jspb.Message.getFieldWithDefault(msg, 31, 0),
    rssiAttach: jspb.Message.getFieldWithDefault(msg, 41, 0),
    rssiDetach: jspb.Message.getFieldWithDefault(msg, 42, 0),
    farmerCardGrace: jspb.Message.getFieldWithDefault(msg, 51, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cfruit.v1.CfruitConfig}
 */
proto.cfruit.v1.CfruitConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cfruit.v1.CfruitConfig;
  return proto.cfruit.v1.CfruitConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cfruit.v1.CfruitConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cfruit.v1.CfruitConfig}
 */
proto.cfruit.v1.CfruitConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttPassword(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttClientId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUksrState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMineralPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIz7kListenSpec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGormDbEngine(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGormDbUrl(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setClearlyMac(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemPrimaryField(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSafetyRecordSeconds(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRssiAttach(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRssiDetach(value);
      break;
    case 51:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFarmerCardGrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cfruit.v1.CfruitConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cfruit.v1.CfruitConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cfruit.v1.CfruitConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMqttUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMqttUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMqttPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMqttClientId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUksrState();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMineralPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIz7kListenSpec();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGormDbEngine();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGormDbUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClearlyMac();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getItemPrimaryField();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getSafetyRecordSeconds();
  if (f !== 0) {
    writer.writeUint32(
      31,
      f
    );
  }
  f = message.getRssiAttach();
  if (f !== 0) {
    writer.writeUint32(
      41,
      f
    );
  }
  f = message.getRssiDetach();
  if (f !== 0) {
    writer.writeUint32(
      42,
      f
    );
  }
  f = message.getFarmerCardGrace();
  if (f !== 0) {
    writer.writeUint32(
      51,
      f
    );
  }
};


/**
 * optional string mqtt_uri = 5;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getMqttUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setMqttUri = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mqtt_username = 6;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getMqttUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setMqttUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mqtt_password = 7;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getMqttPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setMqttPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mqtt_client_id = 8;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getMqttClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setMqttClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string uksr_state = 9;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getUksrState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setUksrState = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mineral_path = 10;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getMineralPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setMineralPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string iz7k_listen_spec = 2;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getIz7kListenSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setIz7kListenSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string gorm_db_engine = 3;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getGormDbEngine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setGormDbEngine = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gorm_db_url = 4;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getGormDbUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setGormDbUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string clearly_mac = 20;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getClearlyMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setClearlyMac = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string item_primary_field = 30;
 * @return {string}
 */
proto.cfruit.v1.CfruitConfig.prototype.getItemPrimaryField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setItemPrimaryField = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional uint32 safety_record_seconds = 31;
 * @return {number}
 */
proto.cfruit.v1.CfruitConfig.prototype.getSafetyRecordSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setSafetyRecordSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional uint32 rssi_attach = 41;
 * @return {number}
 */
proto.cfruit.v1.CfruitConfig.prototype.getRssiAttach = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {number} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setRssiAttach = function(value) {
  return jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * optional uint32 rssi_detach = 42;
 * @return {number}
 */
proto.cfruit.v1.CfruitConfig.prototype.getRssiDetach = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setRssiDetach = function(value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};


/**
 * optional uint32 farmer_card_grace = 51;
 * @return {number}
 */
proto.cfruit.v1.CfruitConfig.prototype.getFarmerCardGrace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 51, 0));
};


/**
 * @param {number} value
 * @return {!proto.cfruit.v1.CfruitConfig} returns this
 */
proto.cfruit.v1.CfruitConfig.prototype.setFarmerCardGrace = function(value) {
  return jspb.Message.setProto3IntField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cfruit.v1.CfruitStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.cfruit.v1.CfruitStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cfruit.v1.CfruitStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    antennaNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cfruit.v1.CfruitStateMessage}
 */
proto.cfruit.v1.CfruitStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cfruit.v1.CfruitStateMessage;
  return proto.cfruit.v1.CfruitStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cfruit.v1.CfruitStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cfruit.v1.CfruitStateMessage}
 */
proto.cfruit.v1.CfruitStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntennaNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cfruit.v1.CfruitStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cfruit.v1.CfruitStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cfruit.v1.CfruitStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 error = 1;
 * @return {number}
 */
proto.cfruit.v1.CfruitStateMessage.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cfruit.v1.CfruitStateMessage} returns this
 */
proto.cfruit.v1.CfruitStateMessage.prototype.setError = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 antenna_no = 2;
 * @return {number}
 */
proto.cfruit.v1.CfruitStateMessage.prototype.getAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cfruit.v1.CfruitStateMessage} returns this
 */
proto.cfruit.v1.CfruitStateMessage.prototype.setAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.cfruit.v1.CfruitStateMessage.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitStateMessage} returns this
 */
proto.cfruit.v1.CfruitStateMessage.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cfruit.v1.CfruitStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.cfruit.v1.CfruitStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cfruit.v1.CfruitStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cfruit.v1.CfruitStatus}
 */
proto.cfruit.v1.CfruitStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cfruit.v1.CfruitStatus;
  return proto.cfruit.v1.CfruitStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cfruit.v1.CfruitStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cfruit.v1.CfruitStatus}
 */
proto.cfruit.v1.CfruitStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cfruit.v1.CfruitStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cfruit.v1.CfruitStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cfruit.v1.CfruitStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.cfruit.v1.CfruitStatus.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitStatus} returns this
 */
proto.cfruit.v1.CfruitStatus.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.cfruit.v1.CfruitStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitStatus} returns this
 */
proto.cfruit.v1.CfruitStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cfruit.v1.CfruitUserBankData.prototype.toObject = function(opt_includeInstance) {
  return proto.cfruit.v1.CfruitUserBankData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cfruit.v1.CfruitUserBankData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitUserBankData.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cfruit.v1.CfruitUserBankData}
 */
proto.cfruit.v1.CfruitUserBankData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cfruit.v1.CfruitUserBankData;
  return proto.cfruit.v1.CfruitUserBankData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cfruit.v1.CfruitUserBankData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cfruit.v1.CfruitUserBankData}
 */
proto.cfruit.v1.CfruitUserBankData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cfruit.v1.CfruitUserBankData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cfruit.v1.CfruitUserBankData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cfruit.v1.CfruitUserBankData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cfruit.v1.CfruitUserBankData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.cfruit.v1.CfruitUserBankData.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cfruit.v1.CfruitUserBankData} returns this
 */
proto.cfruit.v1.CfruitUserBankData.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cfruit.v1.CfruitUserBankData.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.cfruit.v1.CfruitUserBankData.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.cfruit.v1.CfruitUserBankData.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cfruit.v1.CfruitUserBankData} returns this
 */
proto.cfruit.v1.CfruitUserBankData.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.cfruit.v1);
