// source: clearly/v1/clearly.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.clearly.v1.Activated', null, global);
goog.exportSymbol('proto.clearly.v1.Checkpoint', null, global);
goog.exportSymbol('proto.clearly.v1.CheckpointArray', null, global);
goog.exportSymbol('proto.clearly.v1.Deactivated', null, global);
goog.exportSymbol('proto.clearly.v1.Debug', null, global);
goog.exportSymbol('proto.clearly.v1.Dfev2', null, global);
goog.exportSymbol('proto.clearly.v1.Dfev2.Command', null, global);
goog.exportSymbol('proto.clearly.v1.Gas', null, global);
goog.exportSymbol('proto.clearly.v1.Ident', null, global);
goog.exportSymbol('proto.clearly.v1.KeyRing', null, global);
goog.exportSymbol('proto.clearly.v1.KeySpec', null, global);
goog.exportSymbol('proto.clearly.v1.LcdDisplay', null, global);
goog.exportSymbol('proto.clearly.v1.SafetyRecord', null, global);
goog.exportSymbol('proto.clearly.v1.Wifista', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Debug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.Debug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Debug.displayName = 'proto.clearly.v1.Debug';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Dfev2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clearly.v1.Dfev2.repeatedFields_, null);
};
goog.inherits(proto.clearly.v1.Dfev2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Dfev2.displayName = 'proto.clearly.v1.Dfev2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.SafetyRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.SafetyRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.SafetyRecord.displayName = 'proto.clearly.v1.SafetyRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Ident = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.Ident, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Ident.displayName = 'proto.clearly.v1.Ident';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Gas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.Gas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Gas.displayName = 'proto.clearly.v1.Gas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Wifista = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.Wifista, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Wifista.displayName = 'proto.clearly.v1.Wifista';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Activated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.Activated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Activated.displayName = 'proto.clearly.v1.Activated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Deactivated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.Deactivated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Deactivated.displayName = 'proto.clearly.v1.Deactivated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.LcdDisplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.LcdDisplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.LcdDisplay.displayName = 'proto.clearly.v1.LcdDisplay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.Checkpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.Checkpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.Checkpoint.displayName = 'proto.clearly.v1.Checkpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.CheckpointArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clearly.v1.CheckpointArray.repeatedFields_, null);
};
goog.inherits(proto.clearly.v1.CheckpointArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.CheckpointArray.displayName = 'proto.clearly.v1.CheckpointArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.KeySpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clearly.v1.KeySpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.KeySpec.displayName = 'proto.clearly.v1.KeySpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clearly.v1.KeyRing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clearly.v1.KeyRing.repeatedFields_, null);
};
goog.inherits(proto.clearly.v1.KeyRing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clearly.v1.KeyRing.displayName = 'proto.clearly.v1.KeyRing';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Debug.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Debug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Debug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Debug.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    i1: jspb.Message.getFieldWithDefault(msg, 10, 0),
    i2: jspb.Message.getFieldWithDefault(msg, 11, 0),
    i3: jspb.Message.getFieldWithDefault(msg, 12, 0),
    i4: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Debug}
 */
proto.clearly.v1.Debug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Debug;
  return proto.clearly.v1.Debug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Debug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Debug}
 */
proto.clearly.v1.Debug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI1(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI3(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI4(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Debug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Debug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Debug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Debug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getI1();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getI2();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getI3();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getI4();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.clearly.v1.Debug.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Debug} returns this
 */
proto.clearly.v1.Debug.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 i1 = 10;
 * @return {number}
 */
proto.clearly.v1.Debug.prototype.getI1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Debug} returns this
 */
proto.clearly.v1.Debug.prototype.setI1 = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 i2 = 11;
 * @return {number}
 */
proto.clearly.v1.Debug.prototype.getI2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Debug} returns this
 */
proto.clearly.v1.Debug.prototype.setI2 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 i3 = 12;
 * @return {number}
 */
proto.clearly.v1.Debug.prototype.getI3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Debug} returns this
 */
proto.clearly.v1.Debug.prototype.setI3 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 i4 = 13;
 * @return {number}
 */
proto.clearly.v1.Debug.prototype.getI4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Debug} returns this
 */
proto.clearly.v1.Debug.prototype.setI4 = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clearly.v1.Dfev2.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Dfev2.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Dfev2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Dfev2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Dfev2.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.clearly.v1.Dfev2.toObject, includeInstance),
    pingId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pongId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    failPosition: jspb.Message.getFieldWithDefault(msg, 7, 0),
    hintDeauthed: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    uid: msg.getUid_asB64(),
    i1: jspb.Message.getFieldWithDefault(msg, 11, 0),
    i2: jspb.Message.getFieldWithDefault(msg, 12, 0),
    i3: jspb.Message.getFieldWithDefault(msg, 13, 0),
    i4: jspb.Message.getFieldWithDefault(msg, 14, 0),
    i5: jspb.Message.getFieldWithDefault(msg, 15, 0),
    i6: jspb.Message.getFieldWithDefault(msg, 16, 0),
    i7: jspb.Message.getFieldWithDefault(msg, 17, 0),
    i8: jspb.Message.getFieldWithDefault(msg, 18, 0),
    i9: jspb.Message.getFieldWithDefault(msg, 19, 0),
    b1: msg.getB1_asB64(),
    b2: msg.getB2_asB64(),
    b3: msg.getB3_asB64(),
    b4: msg.getB4_asB64(),
    s1: jspb.Message.getFieldWithDefault(msg, 31, ""),
    s2: jspb.Message.getFieldWithDefault(msg, 32, ""),
    s3: jspb.Message.getFieldWithDefault(msg, 33, ""),
    s4: jspb.Message.getFieldWithDefault(msg, 34, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Dfev2}
 */
proto.clearly.v1.Dfev2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Dfev2;
  return proto.clearly.v1.Dfev2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Dfev2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Dfev2}
 */
proto.clearly.v1.Dfev2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.clearly.v1.Dfev2.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.clearly.v1.Dfev2;
      reader.readMessage(value,proto.clearly.v1.Dfev2.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPingId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPongId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFailPosition(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHintDeauthed(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI1(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI3(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI4(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI5(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI6(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI7(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI8(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI9(value);
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB1(value);
      break;
    case 22:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB2(value);
      break;
    case 23:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB3(value);
      break;
    case 24:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB4(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setS1(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setS2(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setS3(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setS4(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Dfev2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Dfev2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Dfev2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Dfev2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.clearly.v1.Dfev2.serializeBinaryToWriter
    );
  }
  f = message.getPingId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPongId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getFailPosition();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getHintDeauthed();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getI1();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getI2();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getI3();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getI4();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getI5();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getI6();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getI7();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getI8();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getI9();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getB1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      21,
      f
    );
  }
  f = message.getB2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      22,
      f
    );
  }
  f = message.getB3_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      23,
      f
    );
  }
  f = message.getB4_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      24,
      f
    );
  }
  f = message.getS1();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getS2();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getS3();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getS4();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.clearly.v1.Dfev2.Command = {
  DEBUG: 0,
  EZ_BATCH_COMMAND: 58288,
  EZ_MASTER_SETUP: 58034,
  EZ_AUTH_APP: 58036,
  EZ_APP_ENSURE: 58037,
  AUTH_2TDEA: 57889,
  AUTH_ISO: 57890,
  AUTH_AES: 57891,
  AUTH_EV2_FIRST: 57892,
  AUTH_MASTER_DEFAULT: 58033,
  AUTH_MASTER_DIVERSIFIED_EV2: 58035,
  GET_FREEMEM: 57905,
  FORMAT_CARD: 57906,
  SET_CONFIURATION: 57907,
  GET_VERSION: 57908,
  GET_UID: 57909,
  CHANGE_KEY: 57921,
  CHANGE_KEY_EV2: 57922,
  INITIALIZE_KEY_SET: 57923,
  FINALIZE_KEY_SET: 57924,
  ROLL_KEY_SET: 57925,
  GET_KEY_SETTINGS: 57926,
  CHANGE_KEY_SETTINGS: 57927,
  GET_KEY_VERSION: 57928,
  APP_CREATE: 57937,
  APP_DELETE: 57938,
  APP_CREATE_DELEGATED: 57939,
  APP_SELECT: 57940,
  APP_GET_IDS: 57941,
  APP_GET_DFNAMES: 57942,
  APP_GET_DELETEGATED_INFO: 57943,
  FILE_CREATE_STD: 57953,
  FILE_CREATE_BACKUP: 57954,
  FILE_CREATE_VALUE: 57955,
  FILE_CREATE_LINEAR: 57956,
  FILE_CREATE_CYCLIC: 57957,
  FILE_CREATE_TXNMAC: 57958,
  FILE_DELETE: 57959,
  FILE_GET_IDS: 57960,
  FILE_GET_ISOIDS: 57961,
  FILE_GET_SETTINGS: 57962,
  FILE_CHANGE_SETTINGS: 57963,
  DATA_READ: 57969,
  DATA_WRITE: 57970,
  DATA_GET_VALUE: 57971,
  DATA_CREDIT: 57972,
  DATA_LIMITED_CREDIT: 57973,
  DATA_DEBIT: 57974,
  DATA_READ_RECORDS: 57975,
  DATA_WRITE_RECORD: 57976,
  DATA_UPDATE_RECORD: 57977,
  DATA_CLEAR_RECORD_FILE: 57978,
  EZ_READ_RECORDS: 58231,
  EZ_READ_RECORDS_REVERSE: 58232,
  SAFETY_TIMED_DATA_WRITE_RECORD: 58488,
  TXN_COMMIT: 57985,
  TXN_ABORT: 57986,
  TXN_COMMIT_READER_ID: 57987,
  EZ_CONFIRM_PROX_CHECK: 58291,
  READ_SIG: 58049
};

/**
 * optional Command command = 1;
 * @return {!proto.clearly.v1.Dfev2.Command}
 */
proto.clearly.v1.Dfev2.prototype.getCommand = function() {
  return /** @type {!proto.clearly.v1.Dfev2.Command} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.clearly.v1.Dfev2.Command} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Dfev2 commands = 2;
 * @return {!Array<!proto.clearly.v1.Dfev2>}
 */
proto.clearly.v1.Dfev2.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.clearly.v1.Dfev2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clearly.v1.Dfev2, 2));
};


/**
 * @param {!Array<!proto.clearly.v1.Dfev2>} value
 * @return {!proto.clearly.v1.Dfev2} returns this
*/
proto.clearly.v1.Dfev2.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.clearly.v1.Dfev2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clearly.v1.Dfev2}
 */
proto.clearly.v1.Dfev2.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.clearly.v1.Dfev2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};


/**
 * optional int32 ping_id = 3;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getPingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setPingId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 pong_id = 4;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getPongId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setPongId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool success = 5;
 * @return {boolean}
 */
proto.clearly.v1.Dfev2.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int32 error_code = 6;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 fail_position = 7;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getFailPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setFailPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool hint_deauthed = 8;
 * @return {boolean}
 */
proto.clearly.v1.Dfev2.prototype.getHintDeauthed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setHintDeauthed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bytes uid = 9;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Dfev2.prototype.getUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes uid = 9;
 * This is a type-conversion wrapper around `getUid()`
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUid()));
};


/**
 * optional bytes uid = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUid()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Dfev2.prototype.getUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int32 i1 = 11;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI1 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 i2 = 12;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI2 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 i3 = 13;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI3 = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 i4 = 14;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI4 = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 i5 = 15;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI5 = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 i6 = 16;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI6 = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 i7 = 17;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI7 = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 i8 = 18;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI8 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI8 = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 i9 = 19;
 * @return {number}
 */
proto.clearly.v1.Dfev2.prototype.getI9 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setI9 = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional bytes b1 = 21;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Dfev2.prototype.getB1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes b1 = 21;
 * This is a type-conversion wrapper around `getB1()`
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getB1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB1()));
};


/**
 * optional bytes b1 = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB1()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Dfev2.prototype.getB1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setB1 = function(value) {
  return jspb.Message.setProto3BytesField(this, 21, value);
};


/**
 * optional bytes b2 = 22;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Dfev2.prototype.getB2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * optional bytes b2 = 22;
 * This is a type-conversion wrapper around `getB2()`
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getB2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB2()));
};


/**
 * optional bytes b2 = 22;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB2()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Dfev2.prototype.getB2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB2()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setB2 = function(value) {
  return jspb.Message.setProto3BytesField(this, 22, value);
};


/**
 * optional bytes b3 = 23;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Dfev2.prototype.getB3 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * optional bytes b3 = 23;
 * This is a type-conversion wrapper around `getB3()`
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getB3_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB3()));
};


/**
 * optional bytes b3 = 23;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB3()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Dfev2.prototype.getB3_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB3()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setB3 = function(value) {
  return jspb.Message.setProto3BytesField(this, 23, value);
};


/**
 * optional bytes b4 = 24;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Dfev2.prototype.getB4 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * optional bytes b4 = 24;
 * This is a type-conversion wrapper around `getB4()`
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getB4_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB4()));
};


/**
 * optional bytes b4 = 24;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB4()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Dfev2.prototype.getB4_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB4()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setB4 = function(value) {
  return jspb.Message.setProto3BytesField(this, 24, value);
};


/**
 * optional string s1 = 31;
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getS1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setS1 = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional string s2 = 32;
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getS2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setS2 = function(value) {
  return jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * optional string s3 = 33;
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getS3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setS3 = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional string s4 = 34;
 * @return {string}
 */
proto.clearly.v1.Dfev2.prototype.getS4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Dfev2} returns this
 */
proto.clearly.v1.Dfev2.prototype.setS4 = function(value) {
  return jspb.Message.setProto3StringField(this, 34, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.SafetyRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.SafetyRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.SafetyRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.SafetyRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.SafetyRecord}
 */
proto.clearly.v1.SafetyRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.SafetyRecord;
  return proto.clearly.v1.SafetyRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.SafetyRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.SafetyRecord}
 */
proto.clearly.v1.SafetyRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.SafetyRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.SafetyRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.SafetyRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.SafetyRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 timestamp = 1;
 * @return {number}
 */
proto.clearly.v1.SafetyRecord.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.SafetyRecord} returns this
 */
proto.clearly.v1.SafetyRecord.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.SafetyRecord.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.clearly.v1.SafetyRecord.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.SafetyRecord.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.SafetyRecord} returns this
 */
proto.clearly.v1.SafetyRecord.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Ident.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Ident.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Ident} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Ident.toObject = function(includeInstance, msg) {
  var f, obj = {
    chipid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appProjectName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    appTime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    appIdfVer: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Ident}
 */
proto.clearly.v1.Ident.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Ident;
  return proto.clearly.v1.Ident.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Ident} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Ident}
 */
proto.clearly.v1.Ident.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChipid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppProjectName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppTime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppIdfVer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Ident.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Ident.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Ident} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Ident.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChipid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppProjectName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAppDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAppTime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAppIdfVer();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string chipid = 1;
 * @return {string}
 */
proto.clearly.v1.Ident.prototype.getChipid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Ident} returns this
 */
proto.clearly.v1.Ident.prototype.setChipid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string app_project_name = 2;
 * @return {string}
 */
proto.clearly.v1.Ident.prototype.getAppProjectName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Ident} returns this
 */
proto.clearly.v1.Ident.prototype.setAppProjectName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string app_version = 3;
 * @return {string}
 */
proto.clearly.v1.Ident.prototype.getAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Ident} returns this
 */
proto.clearly.v1.Ident.prototype.setAppVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string app_date = 4;
 * @return {string}
 */
proto.clearly.v1.Ident.prototype.getAppDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Ident} returns this
 */
proto.clearly.v1.Ident.prototype.setAppDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string app_time = 5;
 * @return {string}
 */
proto.clearly.v1.Ident.prototype.getAppTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Ident} returns this
 */
proto.clearly.v1.Ident.prototype.setAppTime = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string app_idf_ver = 6;
 * @return {string}
 */
proto.clearly.v1.Ident.prototype.getAppIdfVer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Ident} returns this
 */
proto.clearly.v1.Ident.prototype.setAppIdfVer = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Gas.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Gas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Gas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Gas.toObject = function(includeInstance, msg) {
  var f, obj = {
    voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    current: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    stateOfCharge: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    cycles: jspb.Message.getFieldWithDefault(msg, 4, 0),
    age: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timeToFull: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timeToEmpty: jspb.Message.getFieldWithDefault(msg, 7, 0),
    bq8: jspb.Message.getFieldWithDefault(msg, 18, 0),
    bq9: msg.getBq9_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Gas}
 */
proto.clearly.v1.Gas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Gas;
  return proto.clearly.v1.Gas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Gas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Gas}
 */
proto.clearly.v1.Gas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStateOfCharge(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCycles(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAge(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeToFull(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeToEmpty(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBq8(value);
      break;
    case 19:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBq9(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Gas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Gas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Gas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Gas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStateOfCharge();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCycles();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTimeToFull();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTimeToEmpty();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getBq8();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getBq9_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      19,
      f
    );
  }
};


/**
 * optional float voltage = 1;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float current = 2;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float state_of_charge = 3;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getStateOfCharge = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setStateOfCharge = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 cycles = 4;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getCycles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setCycles = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 age = 5;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setAge = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 time_to_full = 6;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getTimeToFull = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setTimeToFull = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 time_to_empty = 7;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getTimeToEmpty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setTimeToEmpty = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 bq8 = 18;
 * @return {number}
 */
proto.clearly.v1.Gas.prototype.getBq8 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setBq8 = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional bytes bq9 = 19;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Gas.prototype.getBq9 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * optional bytes bq9 = 19;
 * This is a type-conversion wrapper around `getBq9()`
 * @return {string}
 */
proto.clearly.v1.Gas.prototype.getBq9_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBq9()));
};


/**
 * optional bytes bq9 = 19;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBq9()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Gas.prototype.getBq9_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBq9()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Gas} returns this
 */
proto.clearly.v1.Gas.prototype.setBq9 = function(value) {
  return jspb.Message.setProto3BytesField(this, 19, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Wifista.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Wifista.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Wifista} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Wifista.toObject = function(includeInstance, msg) {
  var f, obj = {
    bssid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ssid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelPrimary: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 4, 0),
    is11b: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    is11g: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    is11n: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    country: jspb.Message.getFieldWithDefault(msg, 20, ""),
    channelStart: jspb.Message.getFieldWithDefault(msg, 21, 0),
    channelCount: jspb.Message.getFieldWithDefault(msg, 22, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Wifista}
 */
proto.clearly.v1.Wifista.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Wifista;
  return proto.clearly.v1.Wifista.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Wifista} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Wifista}
 */
proto.clearly.v1.Wifista.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBssid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelPrimary(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIs11b(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIs11g(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIs11n(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelStart(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Wifista.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Wifista.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Wifista} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Wifista.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBssid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelPrimary();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIs11b();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIs11g();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIs11n();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getChannelStart();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getChannelCount();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
};


/**
 * optional string bssid = 1;
 * @return {string}
 */
proto.clearly.v1.Wifista.prototype.getBssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setBssid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ssid = 2;
 * @return {string}
 */
proto.clearly.v1.Wifista.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 channel_primary = 3;
 * @return {number}
 */
proto.clearly.v1.Wifista.prototype.getChannelPrimary = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setChannelPrimary = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 rssi = 4;
 * @return {number}
 */
proto.clearly.v1.Wifista.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_11b = 10;
 * @return {boolean}
 */
proto.clearly.v1.Wifista.prototype.getIs11b = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setIs11b = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool is_11g = 11;
 * @return {boolean}
 */
proto.clearly.v1.Wifista.prototype.getIs11g = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setIs11g = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool is_11n = 12;
 * @return {boolean}
 */
proto.clearly.v1.Wifista.prototype.getIs11n = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setIs11n = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string country = 20;
 * @return {string}
 */
proto.clearly.v1.Wifista.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional uint32 channel_start = 21;
 * @return {number}
 */
proto.clearly.v1.Wifista.prototype.getChannelStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setChannelStart = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 channel_count = 22;
 * @return {number}
 */
proto.clearly.v1.Wifista.prototype.getChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Wifista} returns this
 */
proto.clearly.v1.Wifista.prototype.setChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Activated.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Activated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Activated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Activated.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: msg.getUid_asB64(),
    sak: jspb.Message.getFieldWithDefault(msg, 3, 0),
    atqa: msg.getAtqa_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Activated}
 */
proto.clearly.v1.Activated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Activated;
  return proto.clearly.v1.Activated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Activated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Activated}
 */
proto.clearly.v1.Activated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSak(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAtqa(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Activated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Activated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Activated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Activated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSak();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAtqa_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.clearly.v1.Activated.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Activated} returns this
 */
proto.clearly.v1.Activated.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes uid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Activated.prototype.getUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes uid = 2;
 * This is a type-conversion wrapper around `getUid()`
 * @return {string}
 */
proto.clearly.v1.Activated.prototype.getUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUid()));
};


/**
 * optional bytes uid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUid()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Activated.prototype.getUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Activated} returns this
 */
proto.clearly.v1.Activated.prototype.setUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 sak = 3;
 * @return {number}
 */
proto.clearly.v1.Activated.prototype.getSak = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Activated} returns this
 */
proto.clearly.v1.Activated.prototype.setSak = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes atqa = 4;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Activated.prototype.getAtqa = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes atqa = 4;
 * This is a type-conversion wrapper around `getAtqa()`
 * @return {string}
 */
proto.clearly.v1.Activated.prototype.getAtqa_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAtqa()));
};


/**
 * optional bytes atqa = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAtqa()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Activated.prototype.getAtqa_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAtqa()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Activated} returns this
 */
proto.clearly.v1.Activated.prototype.setAtqa = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Deactivated.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Deactivated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Deactivated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Deactivated.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: msg.getUid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Deactivated}
 */
proto.clearly.v1.Deactivated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Deactivated;
  return proto.clearly.v1.Deactivated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Deactivated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Deactivated}
 */
proto.clearly.v1.Deactivated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Deactivated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Deactivated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Deactivated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Deactivated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes uid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.Deactivated.prototype.getUid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes uid = 2;
 * This is a type-conversion wrapper around `getUid()`
 * @return {string}
 */
proto.clearly.v1.Deactivated.prototype.getUid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUid()));
};


/**
 * optional bytes uid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUid()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.Deactivated.prototype.getUid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.Deactivated} returns this
 */
proto.clearly.v1.Deactivated.prototype.setUid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.LcdDisplay.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.LcdDisplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.LcdDisplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.LcdDisplay.toObject = function(includeInstance, msg) {
  var f, obj = {
    line1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    line2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    durationMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    backlight: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.LcdDisplay}
 */
proto.clearly.v1.LcdDisplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.LcdDisplay;
  return proto.clearly.v1.LcdDisplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.LcdDisplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.LcdDisplay}
 */
proto.clearly.v1.LcdDisplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationMs(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBacklight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.LcdDisplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.LcdDisplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.LcdDisplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.LcdDisplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLine1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLine2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDurationMs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBacklight();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string line1 = 1;
 * @return {string}
 */
proto.clearly.v1.LcdDisplay.prototype.getLine1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.LcdDisplay} returns this
 */
proto.clearly.v1.LcdDisplay.prototype.setLine1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string line2 = 2;
 * @return {string}
 */
proto.clearly.v1.LcdDisplay.prototype.getLine2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.LcdDisplay} returns this
 */
proto.clearly.v1.LcdDisplay.prototype.setLine2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 duration_ms = 3;
 * @return {number}
 */
proto.clearly.v1.LcdDisplay.prototype.getDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.LcdDisplay} returns this
 */
proto.clearly.v1.LcdDisplay.prototype.setDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool backlight = 4;
 * @return {boolean}
 */
proto.clearly.v1.LcdDisplay.prototype.getBacklight = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.LcdDisplay} returns this
 */
proto.clearly.v1.LcdDisplay.prototype.setBacklight = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.Checkpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.Checkpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.Checkpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Checkpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startsAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endsAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    requiredOptions: jspb.Message.getFieldWithDefault(msg, 5, ""),
    strikeOptions: jspb.Message.getFieldWithDefault(msg, 6, ""),
    allowedOptions: jspb.Message.getFieldWithDefault(msg, 7, ""),
    code: jspb.Message.getFieldWithDefault(msg, 8, ""),
    scanLimit: jspb.Message.getFieldWithDefault(msg, 9, 0),
    minLevel1: jspb.Message.getFieldWithDefault(msg, 10, 0),
    maxLevel1: jspb.Message.getFieldWithDefault(msg, 11, 0),
    ledOkMs: jspb.Message.getFieldWithDefault(msg, 12, 0),
    ledFailMs: jspb.Message.getFieldWithDefault(msg, 13, 0),
    price: jspb.Message.getFieldWithDefault(msg, 14, 0),
    starsAllowed: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    starsPrice: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.Checkpoint}
 */
proto.clearly.v1.Checkpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.Checkpoint;
  return proto.clearly.v1.Checkpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.Checkpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.Checkpoint}
 */
proto.clearly.v1.Checkpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartsAt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndsAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredOptions(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrikeOptions(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAllowedOptions(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScanLimit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinLevel1(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxLevel1(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedOkMs(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedFailMs(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrice(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStarsAllowed(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarsPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.Checkpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.Checkpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.Checkpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.Checkpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartsAt();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEndsAt();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRequiredOptions();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStrikeOptions();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAllowedOptions();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getScanLimit();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMinLevel1();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getMaxLevel1();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getLedOkMs();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getLedFailMs();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getStarsAllowed();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getStarsPrice();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.clearly.v1.Checkpoint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 starts_at = 3;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getStartsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setStartsAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 ends_at = 4;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getEndsAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setEndsAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string required_options = 5;
 * @return {string}
 */
proto.clearly.v1.Checkpoint.prototype.getRequiredOptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setRequiredOptions = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string strike_options = 6;
 * @return {string}
 */
proto.clearly.v1.Checkpoint.prototype.getStrikeOptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setStrikeOptions = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string allowed_options = 7;
 * @return {string}
 */
proto.clearly.v1.Checkpoint.prototype.getAllowedOptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setAllowedOptions = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string code = 8;
 * @return {string}
 */
proto.clearly.v1.Checkpoint.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 scan_limit = 9;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getScanLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setScanLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 min_level_1 = 10;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getMinLevel1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setMinLevel1 = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 max_level_1 = 11;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getMaxLevel1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setMaxLevel1 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 led_ok_ms = 12;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getLedOkMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setLedOkMs = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 led_fail_ms = 13;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getLedFailMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setLedFailMs = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 price = 14;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional bool stars_allowed = 15;
 * @return {boolean}
 */
proto.clearly.v1.Checkpoint.prototype.getStarsAllowed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setStarsAllowed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional uint32 stars_price = 16;
 * @return {number}
 */
proto.clearly.v1.Checkpoint.prototype.getStarsPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.Checkpoint} returns this
 */
proto.clearly.v1.Checkpoint.prototype.setStarsPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clearly.v1.CheckpointArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.CheckpointArray.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.CheckpointArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.CheckpointArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.CheckpointArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkpointsList: jspb.Message.toObjectList(msg.getCheckpointsList(),
    proto.clearly.v1.Checkpoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.CheckpointArray}
 */
proto.clearly.v1.CheckpointArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.CheckpointArray;
  return proto.clearly.v1.CheckpointArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.CheckpointArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.CheckpointArray}
 */
proto.clearly.v1.CheckpointArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clearly.v1.Checkpoint;
      reader.readMessage(value,proto.clearly.v1.Checkpoint.deserializeBinaryFromReader);
      msg.addCheckpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.CheckpointArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.CheckpointArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.CheckpointArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.CheckpointArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.clearly.v1.Checkpoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Checkpoint checkpoints = 1;
 * @return {!Array<!proto.clearly.v1.Checkpoint>}
 */
proto.clearly.v1.CheckpointArray.prototype.getCheckpointsList = function() {
  return /** @type{!Array<!proto.clearly.v1.Checkpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clearly.v1.Checkpoint, 1));
};


/**
 * @param {!Array<!proto.clearly.v1.Checkpoint>} value
 * @return {!proto.clearly.v1.CheckpointArray} returns this
*/
proto.clearly.v1.CheckpointArray.prototype.setCheckpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.clearly.v1.Checkpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clearly.v1.Checkpoint}
 */
proto.clearly.v1.CheckpointArray.prototype.addCheckpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.clearly.v1.Checkpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clearly.v1.CheckpointArray} returns this
 */
proto.clearly.v1.CheckpointArray.prototype.clearCheckpointsList = function() {
  return this.setCheckpointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.KeySpec.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.KeySpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.KeySpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.KeySpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rawbytes: msg.getRawbytes_asB64(),
    usage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    diversifyBySwcmac: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    diversifyByKeystore: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    diversifyBySamav1: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    diversifyBySamav2: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    diversifyBySamav3: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.KeySpec}
 */
proto.clearly.v1.KeySpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.KeySpec;
  return proto.clearly.v1.KeySpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.KeySpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.KeySpec}
 */
proto.clearly.v1.KeySpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawbytes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsage(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiversifyBySwcmac(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiversifyByKeystore(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiversifyBySamav1(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiversifyBySamav2(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiversifyBySamav3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.KeySpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.KeySpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.KeySpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.KeySpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRawbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getUsage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDiversifyBySwcmac();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDiversifyByKeystore();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getDiversifyBySamav1();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getDiversifyBySamav2();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDiversifyBySamav3();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string protocol = 1;
 * @return {string}
 */
proto.clearly.v1.KeySpec.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 number = 2;
 * @return {number}
 */
proto.clearly.v1.KeySpec.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 position = 3;
 * @return {number}
 */
proto.clearly.v1.KeySpec.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 version = 4;
 * @return {number}
 */
proto.clearly.v1.KeySpec.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes rawbytes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.clearly.v1.KeySpec.prototype.getRawbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes rawbytes = 5;
 * This is a type-conversion wrapper around `getRawbytes()`
 * @return {string}
 */
proto.clearly.v1.KeySpec.prototype.getRawbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawbytes()));
};


/**
 * optional bytes rawbytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawbytes()`
 * @return {!Uint8Array}
 */
proto.clearly.v1.KeySpec.prototype.getRawbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawbytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setRawbytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string usage = 6;
 * @return {string}
 */
proto.clearly.v1.KeySpec.prototype.getUsage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setUsage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool diversify_by_swcmac = 10;
 * @return {boolean}
 */
proto.clearly.v1.KeySpec.prototype.getDiversifyBySwcmac = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setDiversifyBySwcmac = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool diversify_by_keystore = 11;
 * @return {boolean}
 */
proto.clearly.v1.KeySpec.prototype.getDiversifyByKeystore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setDiversifyByKeystore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool diversify_by_samav1 = 12;
 * @return {boolean}
 */
proto.clearly.v1.KeySpec.prototype.getDiversifyBySamav1 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setDiversifyBySamav1 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool diversify_by_samav2 = 13;
 * @return {boolean}
 */
proto.clearly.v1.KeySpec.prototype.getDiversifyBySamav2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setDiversifyBySamav2 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool diversify_by_samav3 = 14;
 * @return {boolean}
 */
proto.clearly.v1.KeySpec.prototype.getDiversifyBySamav3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clearly.v1.KeySpec} returns this
 */
proto.clearly.v1.KeySpec.prototype.setDiversifyBySamav3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clearly.v1.KeyRing.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clearly.v1.KeyRing.prototype.toObject = function(opt_includeInstance) {
  return proto.clearly.v1.KeyRing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clearly.v1.KeyRing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.KeyRing.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.clearly.v1.KeySpec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clearly.v1.KeyRing}
 */
proto.clearly.v1.KeyRing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clearly.v1.KeyRing;
  return proto.clearly.v1.KeyRing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clearly.v1.KeyRing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clearly.v1.KeyRing}
 */
proto.clearly.v1.KeyRing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clearly.v1.KeySpec;
      reader.readMessage(value,proto.clearly.v1.KeySpec.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clearly.v1.KeyRing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clearly.v1.KeyRing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clearly.v1.KeyRing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clearly.v1.KeyRing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.clearly.v1.KeySpec.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeySpec keys = 1;
 * @return {!Array<!proto.clearly.v1.KeySpec>}
 */
proto.clearly.v1.KeyRing.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.clearly.v1.KeySpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clearly.v1.KeySpec, 1));
};


/**
 * @param {!Array<!proto.clearly.v1.KeySpec>} value
 * @return {!proto.clearly.v1.KeyRing} returns this
*/
proto.clearly.v1.KeyRing.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.clearly.v1.KeySpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clearly.v1.KeySpec}
 */
proto.clearly.v1.KeyRing.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.clearly.v1.KeySpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clearly.v1.KeyRing} returns this
 */
proto.clearly.v1.KeyRing.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


goog.object.extend(exports, proto.clearly.v1);
