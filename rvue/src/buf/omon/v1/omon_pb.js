// source: omon/v1/omon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.omon.v1.OmonConfig', null, global);
goog.exportSymbol('proto.omon.v1.OmonStateMessage', null, global);
goog.exportSymbol('proto.omon.v1.OmonStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.omon.v1.OmonConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.omon.v1.OmonConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.omon.v1.OmonConfig.displayName = 'proto.omon.v1.OmonConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.omon.v1.OmonStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.omon.v1.OmonStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.omon.v1.OmonStateMessage.displayName = 'proto.omon.v1.OmonStateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.omon.v1.OmonStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.omon.v1.OmonStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.omon.v1.OmonStatus.displayName = 'proto.omon.v1.OmonStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.omon.v1.OmonConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.omon.v1.OmonConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.omon.v1.OmonConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.omon.v1.OmonConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    mqttUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mqttUsername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mqttPassword: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mqttClientId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    uksrState: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mineralPath: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.omon.v1.OmonConfig}
 */
proto.omon.v1.OmonConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.omon.v1.OmonConfig;
  return proto.omon.v1.OmonConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.omon.v1.OmonConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.omon.v1.OmonConfig}
 */
proto.omon.v1.OmonConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttPassword(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttClientId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUksrState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMineralPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.omon.v1.OmonConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.omon.v1.OmonConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.omon.v1.OmonConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.omon.v1.OmonConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMqttUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMqttUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMqttPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMqttClientId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUksrState();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMineralPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string mqtt_uri = 5;
 * @return {string}
 */
proto.omon.v1.OmonConfig.prototype.getMqttUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonConfig} returns this
 */
proto.omon.v1.OmonConfig.prototype.setMqttUri = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mqtt_username = 6;
 * @return {string}
 */
proto.omon.v1.OmonConfig.prototype.getMqttUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonConfig} returns this
 */
proto.omon.v1.OmonConfig.prototype.setMqttUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mqtt_password = 7;
 * @return {string}
 */
proto.omon.v1.OmonConfig.prototype.getMqttPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonConfig} returns this
 */
proto.omon.v1.OmonConfig.prototype.setMqttPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mqtt_client_id = 8;
 * @return {string}
 */
proto.omon.v1.OmonConfig.prototype.getMqttClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonConfig} returns this
 */
proto.omon.v1.OmonConfig.prototype.setMqttClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string uksr_state = 9;
 * @return {string}
 */
proto.omon.v1.OmonConfig.prototype.getUksrState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonConfig} returns this
 */
proto.omon.v1.OmonConfig.prototype.setUksrState = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mineral_path = 10;
 * @return {string}
 */
proto.omon.v1.OmonConfig.prototype.getMineralPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonConfig} returns this
 */
proto.omon.v1.OmonConfig.prototype.setMineralPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.omon.v1.OmonStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.omon.v1.OmonStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.omon.v1.OmonStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.omon.v1.OmonStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    antennaNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.omon.v1.OmonStateMessage}
 */
proto.omon.v1.OmonStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.omon.v1.OmonStateMessage;
  return proto.omon.v1.OmonStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.omon.v1.OmonStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.omon.v1.OmonStateMessage}
 */
proto.omon.v1.OmonStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntennaNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.omon.v1.OmonStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.omon.v1.OmonStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.omon.v1.OmonStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.omon.v1.OmonStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 error = 1;
 * @return {number}
 */
proto.omon.v1.OmonStateMessage.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.omon.v1.OmonStateMessage} returns this
 */
proto.omon.v1.OmonStateMessage.prototype.setError = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 antenna_no = 2;
 * @return {number}
 */
proto.omon.v1.OmonStateMessage.prototype.getAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.omon.v1.OmonStateMessage} returns this
 */
proto.omon.v1.OmonStateMessage.prototype.setAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.omon.v1.OmonStateMessage.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonStateMessage} returns this
 */
proto.omon.v1.OmonStateMessage.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.omon.v1.OmonStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.omon.v1.OmonStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.omon.v1.OmonStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.omon.v1.OmonStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.omon.v1.OmonStatus}
 */
proto.omon.v1.OmonStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.omon.v1.OmonStatus;
  return proto.omon.v1.OmonStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.omon.v1.OmonStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.omon.v1.OmonStatus}
 */
proto.omon.v1.OmonStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.omon.v1.OmonStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.omon.v1.OmonStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.omon.v1.OmonStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.omon.v1.OmonStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.omon.v1.OmonStatus.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonStatus} returns this
 */
proto.omon.v1.OmonStatus.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.omon.v1.OmonStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.omon.v1.OmonStatus} returns this
 */
proto.omon.v1.OmonStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.omon.v1);
