// source: ufly/v1/ufly.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ufly.v1.GpioRead', null, global);
goog.exportSymbol('proto.ufly.v1.GpioState', null, global);
goog.exportSymbol('proto.ufly.v1.GpioWriteRequest', null, global);
goog.exportSymbol('proto.ufly.v1.GpioWriteResponse', null, global);
goog.exportSymbol('proto.ufly.v1.UBlipLockRequest', null, global);
goog.exportSymbol('proto.ufly.v1.UBlipLockResponse', null, global);
goog.exportSymbol('proto.ufly.v1.UBlipReadRequest', null, global);
goog.exportSymbol('proto.ufly.v1.UBlipReadResponse', null, global);
goog.exportSymbol('proto.ufly.v1.UBlipWriteRequest', null, global);
goog.exportSymbol('proto.ufly.v1.UBlipWriteResponse', null, global);
goog.exportSymbol('proto.ufly.v1.UModeSet', null, global);
goog.exportSymbol('proto.ufly.v1.URadarEventMessage', null, global);
goog.exportSymbol('proto.ufly.v1.URadarStateMessage', null, global);
goog.exportSymbol('proto.ufly.v1.UTagMessage', null, global);
goog.exportSymbol('proto.ufly.v1.UltraflySignedMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.GpioRead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.GpioRead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.GpioRead.displayName = 'proto.ufly.v1.GpioRead';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.GpioState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ufly.v1.GpioState.repeatedFields_, null);
};
goog.inherits(proto.ufly.v1.GpioState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.GpioState.displayName = 'proto.ufly.v1.GpioState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.GpioWriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.GpioWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.GpioWriteRequest.displayName = 'proto.ufly.v1.GpioWriteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.GpioWriteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.GpioWriteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.GpioWriteResponse.displayName = 'proto.ufly.v1.GpioWriteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.URadarStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.URadarStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.URadarStateMessage.displayName = 'proto.ufly.v1.URadarStateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UTagMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UTagMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UTagMessage.displayName = 'proto.ufly.v1.UTagMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.URadarEventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ufly.v1.URadarEventMessage.repeatedFields_, null);
};
goog.inherits(proto.ufly.v1.URadarEventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.URadarEventMessage.displayName = 'proto.ufly.v1.URadarEventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UBlipReadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UBlipReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UBlipReadRequest.displayName = 'proto.ufly.v1.UBlipReadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UBlipReadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UBlipReadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UBlipReadResponse.displayName = 'proto.ufly.v1.UBlipReadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UBlipWriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UBlipWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UBlipWriteRequest.displayName = 'proto.ufly.v1.UBlipWriteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UBlipWriteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UBlipWriteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UBlipWriteResponse.displayName = 'proto.ufly.v1.UBlipWriteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UBlipLockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UBlipLockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UBlipLockRequest.displayName = 'proto.ufly.v1.UBlipLockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UBlipLockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UBlipLockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UBlipLockResponse.displayName = 'proto.ufly.v1.UBlipLockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UModeSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UModeSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UModeSet.displayName = 'proto.ufly.v1.UModeSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ufly.v1.UltraflySignedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ufly.v1.UltraflySignedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ufly.v1.UltraflySignedMessage.displayName = 'proto.ufly.v1.UltraflySignedMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.GpioRead.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.GpioRead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.GpioRead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioRead.toObject = function(includeInstance, msg) {
  var f, obj = {
    pin: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    initialState: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.GpioRead}
 */
proto.ufly.v1.GpioRead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.GpioRead;
  return proto.ufly.v1.GpioRead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.GpioRead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.GpioRead}
 */
proto.ufly.v1.GpioRead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInitialState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.GpioRead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.GpioRead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.GpioRead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioRead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPin();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInitialState();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 pin = 1;
 * @return {number}
 */
proto.ufly.v1.GpioRead.prototype.getPin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioRead} returns this
 */
proto.ufly.v1.GpioRead.prototype.setPin = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.ufly.v1.GpioRead.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioRead} returns this
 */
proto.ufly.v1.GpioRead.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool initial_state = 3;
 * @return {boolean}
 */
proto.ufly.v1.GpioRead.prototype.getInitialState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.GpioRead} returns this
 */
proto.ufly.v1.GpioRead.prototype.setInitialState = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.ufly.v1.GpioRead.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.GpioRead} returns this
 */
proto.ufly.v1.GpioRead.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ufly.v1.GpioState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.GpioState.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.GpioState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.GpioState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioState.toObject = function(includeInstance, msg) {
  var f, obj = {
    gpioReadsList: jspb.Message.toObjectList(msg.getGpioReadsList(),
    proto.ufly.v1.GpioRead.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.GpioState}
 */
proto.ufly.v1.GpioState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.GpioState;
  return proto.ufly.v1.GpioState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.GpioState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.GpioState}
 */
proto.ufly.v1.GpioState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ufly.v1.GpioRead;
      reader.readMessage(value,proto.ufly.v1.GpioRead.deserializeBinaryFromReader);
      msg.addGpioReads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.GpioState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.GpioState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.GpioState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGpioReadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ufly.v1.GpioRead.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GpioRead gpio_reads = 1;
 * @return {!Array<!proto.ufly.v1.GpioRead>}
 */
proto.ufly.v1.GpioState.prototype.getGpioReadsList = function() {
  return /** @type{!Array<!proto.ufly.v1.GpioRead>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ufly.v1.GpioRead, 1));
};


/**
 * @param {!Array<!proto.ufly.v1.GpioRead>} value
 * @return {!proto.ufly.v1.GpioState} returns this
*/
proto.ufly.v1.GpioState.prototype.setGpioReadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ufly.v1.GpioRead=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ufly.v1.GpioRead}
 */
proto.ufly.v1.GpioState.prototype.addGpioReads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ufly.v1.GpioRead, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ufly.v1.GpioState} returns this
 */
proto.ufly.v1.GpioState.prototype.clearGpioReadsList = function() {
  return this.setGpioReadsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.GpioWriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.GpioWriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.GpioWriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioWriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pinName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pulseMs: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.GpioWriteRequest}
 */
proto.ufly.v1.GpioWriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.GpioWriteRequest;
  return proto.ufly.v1.GpioWriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.GpioWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.GpioWriteRequest}
 */
proto.ufly.v1.GpioWriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPulseMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.GpioWriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.GpioWriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.GpioWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioWriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPin();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPinName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPulseMs();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.GpioWriteRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteRequest} returns this
 */
proto.ufly.v1.GpioWriteRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 pin = 2;
 * @return {number}
 */
proto.ufly.v1.GpioWriteRequest.prototype.getPin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteRequest} returns this
 */
proto.ufly.v1.GpioWriteRequest.prototype.setPin = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string pin_name = 3;
 * @return {string}
 */
proto.ufly.v1.GpioWriteRequest.prototype.getPinName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.GpioWriteRequest} returns this
 */
proto.ufly.v1.GpioWriteRequest.prototype.setPinName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 value = 4;
 * @return {number}
 */
proto.ufly.v1.GpioWriteRequest.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteRequest} returns this
 */
proto.ufly.v1.GpioWriteRequest.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 pulse_ms = 5;
 * @return {number}
 */
proto.ufly.v1.GpioWriteRequest.prototype.getPulseMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteRequest} returns this
 */
proto.ufly.v1.GpioWriteRequest.prototype.setPulseMs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.GpioWriteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.GpioWriteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.GpioWriteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioWriteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pin: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pulseMs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pinName: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.GpioWriteResponse}
 */
proto.ufly.v1.GpioWriteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.GpioWriteResponse;
  return proto.ufly.v1.GpioWriteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.GpioWriteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.GpioWriteResponse}
 */
proto.ufly.v1.GpioWriteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPulseMs(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.GpioWriteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.GpioWriteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.GpioWriteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.GpioWriteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPin();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPulseMs();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getPinName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.GpioWriteResponse.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteResponse} returns this
 */
proto.ufly.v1.GpioWriteResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.ufly.v1.GpioWriteResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.GpioWriteResponse} returns this
 */
proto.ufly.v1.GpioWriteResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ufly.v1.GpioWriteResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.GpioWriteResponse} returns this
 */
proto.ufly.v1.GpioWriteResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 pin = 4;
 * @return {number}
 */
proto.ufly.v1.GpioWriteResponse.prototype.getPin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteResponse} returns this
 */
proto.ufly.v1.GpioWriteResponse.prototype.setPin = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 value = 5;
 * @return {number}
 */
proto.ufly.v1.GpioWriteResponse.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteResponse} returns this
 */
proto.ufly.v1.GpioWriteResponse.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 pulse_ms = 6;
 * @return {number}
 */
proto.ufly.v1.GpioWriteResponse.prototype.getPulseMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.GpioWriteResponse} returns this
 */
proto.ufly.v1.GpioWriteResponse.prototype.setPulseMs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string pin_name = 7;
 * @return {string}
 */
proto.ufly.v1.GpioWriteResponse.prototype.getPinName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.GpioWriteResponse} returns this
 */
proto.ufly.v1.GpioWriteResponse.prototype.setPinName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.URadarStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.URadarStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.URadarStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.URadarStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: jspb.Message.getFieldWithDefault(msg, 1, 0),
    antennaNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.URadarStateMessage}
 */
proto.ufly.v1.URadarStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.URadarStateMessage;
  return proto.ufly.v1.URadarStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.URadarStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.URadarStateMessage}
 */
proto.ufly.v1.URadarStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntennaNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.URadarStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.URadarStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.URadarStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.URadarStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 power = 1;
 * @return {number}
 */
proto.ufly.v1.URadarStateMessage.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.URadarStateMessage} returns this
 */
proto.ufly.v1.URadarStateMessage.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 antenna_no = 2;
 * @return {number}
 */
proto.ufly.v1.URadarStateMessage.prototype.getAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.URadarStateMessage} returns this
 */
proto.ufly.v1.URadarStateMessage.prototype.setAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ufly.v1.URadarStateMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.URadarStateMessage} returns this
 */
proto.ufly.v1.URadarStateMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UTagMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UTagMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UTagMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UTagMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    rssi: jspb.Message.getFieldWithDefault(msg, 2, 0),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0),
    antennaNo: jspb.Message.getFieldWithDefault(msg, 5, 0),
    zone: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UTagMessage}
 */
proto.ufly.v1.UTagMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UTagMessage;
  return proto.ufly.v1.UTagMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UTagMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UTagMessage}
 */
proto.ufly.v1.UTagMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntennaNo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UTagMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UTagMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UTagMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UTagMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 rssi = 2;
 * @return {number}
 */
proto.ufly.v1.UTagMessage.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UTagMessage} returns this
 */
proto.ufly.v1.UTagMessage.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 count = 3;
 * @return {number}
 */
proto.ufly.v1.UTagMessage.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UTagMessage} returns this
 */
proto.ufly.v1.UTagMessage.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 antenna_no = 5;
 * @return {number}
 */
proto.ufly.v1.UTagMessage.prototype.getAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UTagMessage} returns this
 */
proto.ufly.v1.UTagMessage.prototype.setAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string zone = 6;
 * @return {string}
 */
proto.ufly.v1.UTagMessage.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UTagMessage} returns this
 */
proto.ufly.v1.UTagMessage.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ufly.v1.URadarEventMessage.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.URadarEventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.URadarEventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.URadarEventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.URadarEventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oldState: jspb.Message.getFieldWithDefault(msg, 3, ""),
    newState: jspb.Message.getFieldWithDefault(msg, 4, ""),
    oldZone: jspb.Message.getFieldWithDefault(msg, 5, ""),
    newZone: jspb.Message.getFieldWithDefault(msg, 6, ""),
    oldRssi: jspb.Message.getFieldWithDefault(msg, 7, 0),
    newRssi: jspb.Message.getFieldWithDefault(msg, 8, 0),
    oldAntennaNo: jspb.Message.getFieldWithDefault(msg, 9, 0),
    newAntennaNo: jspb.Message.getFieldWithDefault(msg, 10, 0),
    utagsList: jspb.Message.toObjectList(msg.getUtagsList(),
    proto.ufly.v1.UTagMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.URadarEventMessage}
 */
proto.ufly.v1.URadarEventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.URadarEventMessage;
  return proto.ufly.v1.URadarEventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.URadarEventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.URadarEventMessage}
 */
proto.ufly.v1.URadarEventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldZone(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewZone(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOldRssi(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewRssi(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOldAntennaNo(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewAntennaNo(value);
      break;
    case 11:
      var value = new proto.ufly.v1.UTagMessage;
      reader.readMessage(value,proto.ufly.v1.UTagMessage.deserializeBinaryFromReader);
      msg.addUtags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.URadarEventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.URadarEventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.URadarEventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.URadarEventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOldState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNewState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOldZone();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNewZone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOldRssi();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getNewRssi();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getOldAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getNewAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getUtagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.ufly.v1.UTagMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.ufly.v1.URadarEventMessage.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.ufly.v1.URadarEventMessage.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string old_state = 3;
 * @return {string}
 */
proto.ufly.v1.URadarEventMessage.prototype.getOldState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setOldState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string new_state = 4;
 * @return {string}
 */
proto.ufly.v1.URadarEventMessage.prototype.getNewState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setNewState = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string old_zone = 5;
 * @return {string}
 */
proto.ufly.v1.URadarEventMessage.prototype.getOldZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setOldZone = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string new_zone = 6;
 * @return {string}
 */
proto.ufly.v1.URadarEventMessage.prototype.getNewZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setNewZone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 old_rssi = 7;
 * @return {number}
 */
proto.ufly.v1.URadarEventMessage.prototype.getOldRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setOldRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 new_rssi = 8;
 * @return {number}
 */
proto.ufly.v1.URadarEventMessage.prototype.getNewRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setNewRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 old_antenna_no = 9;
 * @return {number}
 */
proto.ufly.v1.URadarEventMessage.prototype.getOldAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setOldAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 new_antenna_no = 10;
 * @return {number}
 */
proto.ufly.v1.URadarEventMessage.prototype.getNewAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.setNewAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated UTagMessage utags = 11;
 * @return {!Array<!proto.ufly.v1.UTagMessage>}
 */
proto.ufly.v1.URadarEventMessage.prototype.getUtagsList = function() {
  return /** @type{!Array<!proto.ufly.v1.UTagMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ufly.v1.UTagMessage, 11));
};


/**
 * @param {!Array<!proto.ufly.v1.UTagMessage>} value
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
*/
proto.ufly.v1.URadarEventMessage.prototype.setUtagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ufly.v1.UTagMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ufly.v1.UTagMessage}
 */
proto.ufly.v1.URadarEventMessage.prototype.addUtags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ufly.v1.UTagMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ufly.v1.URadarEventMessage} returns this
 */
proto.ufly.v1.URadarEventMessage.prototype.clearUtagsList = function() {
  return this.setUtagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UBlipReadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UBlipReadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UBlipReadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipReadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bank: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    words: jspb.Message.getFieldWithDefault(msg, 5, 0),
    disableEpcLookup: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    antennaNo: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UBlipReadRequest}
 */
proto.ufly.v1.UBlipReadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UBlipReadRequest;
  return proto.ufly.v1.UBlipReadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UBlipReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UBlipReadRequest}
 */
proto.ufly.v1.UBlipReadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBank(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWords(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableEpcLookup(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntennaNo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipReadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UBlipReadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UBlipReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipReadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBank();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWords();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDisableEpcLookup();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.UBlipReadRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipReadRequest} returns this
 */
proto.ufly.v1.UBlipReadRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string epc = 2;
 * @return {string}
 */
proto.ufly.v1.UBlipReadRequest.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipReadRequest} returns this
 */
proto.ufly.v1.UBlipReadRequest.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 bank = 3;
 * @return {number}
 */
proto.ufly.v1.UBlipReadRequest.prototype.getBank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipReadRequest} returns this
 */
proto.ufly.v1.UBlipReadRequest.prototype.setBank = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.ufly.v1.UBlipReadRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipReadRequest} returns this
 */
proto.ufly.v1.UBlipReadRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 words = 5;
 * @return {number}
 */
proto.ufly.v1.UBlipReadRequest.prototype.getWords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipReadRequest} returns this
 */
proto.ufly.v1.UBlipReadRequest.prototype.setWords = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool disable_epc_lookup = 6;
 * @return {boolean}
 */
proto.ufly.v1.UBlipReadRequest.prototype.getDisableEpcLookup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UBlipReadRequest} returns this
 */
proto.ufly.v1.UBlipReadRequest.prototype.setDisableEpcLookup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 antenna_no = 7;
 * @return {number}
 */
proto.ufly.v1.UBlipReadRequest.prototype.getAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipReadRequest} returns this
 */
proto.ufly.v1.UBlipReadRequest.prototype.setAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UBlipReadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UBlipReadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UBlipReadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipReadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    epc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bank: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UBlipReadResponse}
 */
proto.ufly.v1.UBlipReadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UBlipReadResponse;
  return proto.ufly.v1.UBlipReadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UBlipReadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UBlipReadResponse}
 */
proto.ufly.v1.UBlipReadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBank(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipReadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UBlipReadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UBlipReadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipReadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBank();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipReadResponse} returns this
 */
proto.ufly.v1.UBlipReadResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UBlipReadResponse} returns this
 */
proto.ufly.v1.UBlipReadResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipReadResponse} returns this
 */
proto.ufly.v1.UBlipReadResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string epc = 4;
 * @return {string}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipReadResponse} returns this
 */
proto.ufly.v1.UBlipReadResponse.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 bank = 5;
 * @return {number}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getBank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipReadResponse} returns this
 */
proto.ufly.v1.UBlipReadResponse.prototype.setBank = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipReadResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ufly.v1.UBlipReadResponse} returns this
 */
proto.ufly.v1.UBlipReadResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UBlipWriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UBlipWriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipWriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bank: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: msg.getData_asB64(),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    words: jspb.Message.getFieldWithDefault(msg, 6, 0),
    accessPassword: msg.getAccessPassword_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UBlipWriteRequest}
 */
proto.ufly.v1.UBlipWriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UBlipWriteRequest;
  return proto.ufly.v1.UBlipWriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UBlipWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UBlipWriteRequest}
 */
proto.ufly.v1.UBlipWriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBank(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWords(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccessPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UBlipWriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UBlipWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipWriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBank();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWords();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAccessPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipWriteRequest} returns this
 */
proto.ufly.v1.UBlipWriteRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string epc = 2;
 * @return {string}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipWriteRequest} returns this
 */
proto.ufly.v1.UBlipWriteRequest.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 bank = 3;
 * @return {number}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getBank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipWriteRequest} returns this
 */
proto.ufly.v1.UBlipWriteRequest.prototype.setBank = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ufly.v1.UBlipWriteRequest} returns this
 */
proto.ufly.v1.UBlipWriteRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int32 offset = 5;
 * @return {number}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipWriteRequest} returns this
 */
proto.ufly.v1.UBlipWriteRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 words = 6;
 * @return {number}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getWords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipWriteRequest} returns this
 */
proto.ufly.v1.UBlipWriteRequest.prototype.setWords = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes access_password = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getAccessPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes access_password = 7;
 * This is a type-conversion wrapper around `getAccessPassword()`
 * @return {string}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getAccessPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccessPassword()));
};


/**
 * optional bytes access_password = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccessPassword()`
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipWriteRequest.prototype.getAccessPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccessPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ufly.v1.UBlipWriteRequest} returns this
 */
proto.ufly.v1.UBlipWriteRequest.prototype.setAccessPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UBlipWriteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UBlipWriteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UBlipWriteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipWriteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    epc: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UBlipWriteResponse}
 */
proto.ufly.v1.UBlipWriteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UBlipWriteResponse;
  return proto.ufly.v1.UBlipWriteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UBlipWriteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UBlipWriteResponse}
 */
proto.ufly.v1.UBlipWriteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipWriteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UBlipWriteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UBlipWriteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipWriteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.UBlipWriteResponse.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipWriteResponse} returns this
 */
proto.ufly.v1.UBlipWriteResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.ufly.v1.UBlipWriteResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UBlipWriteResponse} returns this
 */
proto.ufly.v1.UBlipWriteResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ufly.v1.UBlipWriteResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipWriteResponse} returns this
 */
proto.ufly.v1.UBlipWriteResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string epc = 4;
 * @return {string}
 */
proto.ufly.v1.UBlipWriteResponse.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipWriteResponse} returns this
 */
proto.ufly.v1.UBlipWriteResponse.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UBlipLockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UBlipLockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UBlipLockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipLockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    area: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    accessPassword: msg.getAccessPassword_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UBlipLockRequest}
 */
proto.ufly.v1.UBlipLockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UBlipLockRequest;
  return proto.ufly.v1.UBlipLockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UBlipLockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UBlipLockRequest}
 */
proto.ufly.v1.UBlipLockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArea(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccessPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipLockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UBlipLockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UBlipLockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipLockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArea();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAccessPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.UBlipLockRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipLockRequest} returns this
 */
proto.ufly.v1.UBlipLockRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string epc = 2;
 * @return {string}
 */
proto.ufly.v1.UBlipLockRequest.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipLockRequest} returns this
 */
proto.ufly.v1.UBlipLockRequest.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 area = 3;
 * @return {number}
 */
proto.ufly.v1.UBlipLockRequest.prototype.getArea = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipLockRequest} returns this
 */
proto.ufly.v1.UBlipLockRequest.prototype.setArea = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 type = 4;
 * @return {number}
 */
proto.ufly.v1.UBlipLockRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipLockRequest} returns this
 */
proto.ufly.v1.UBlipLockRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes access_password = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ufly.v1.UBlipLockRequest.prototype.getAccessPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes access_password = 7;
 * This is a type-conversion wrapper around `getAccessPassword()`
 * @return {string}
 */
proto.ufly.v1.UBlipLockRequest.prototype.getAccessPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccessPassword()));
};


/**
 * optional bytes access_password = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccessPassword()`
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipLockRequest.prototype.getAccessPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccessPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ufly.v1.UBlipLockRequest} returns this
 */
proto.ufly.v1.UBlipLockRequest.prototype.setAccessPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UBlipLockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UBlipLockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UBlipLockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipLockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    epc: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UBlipLockResponse}
 */
proto.ufly.v1.UBlipLockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UBlipLockResponse;
  return proto.ufly.v1.UBlipLockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UBlipLockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UBlipLockResponse}
 */
proto.ufly.v1.UBlipLockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UBlipLockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UBlipLockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UBlipLockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UBlipLockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.UBlipLockResponse.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UBlipLockResponse} returns this
 */
proto.ufly.v1.UBlipLockResponse.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.ufly.v1.UBlipLockResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UBlipLockResponse} returns this
 */
proto.ufly.v1.UBlipLockResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ufly.v1.UBlipLockResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipLockResponse} returns this
 */
proto.ufly.v1.UBlipLockResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string epc = 4;
 * @return {string}
 */
proto.ufly.v1.UBlipLockResponse.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ufly.v1.UBlipLockResponse} returns this
 */
proto.ufly.v1.UBlipLockResponse.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UModeSet.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UModeSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UModeSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UModeSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inventoryEnable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    inventoryDisable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    times: jspb.Message.getFieldWithDefault(msg, 4, 0),
    autoUserBank: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    onItemAbortInventory: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UModeSet}
 */
proto.ufly.v1.UModeSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UModeSet;
  return proto.ufly.v1.UModeSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UModeSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UModeSet}
 */
proto.ufly.v1.UModeSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInventoryEnable(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInventoryDisable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimes(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoUserBank(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnItemAbortInventory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UModeSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UModeSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UModeSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UModeSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInventoryEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getInventoryDisable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTimes();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAutoUserBank();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOnItemAbortInventory();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int32 request_id = 1;
 * @return {number}
 */
proto.ufly.v1.UModeSet.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UModeSet} returns this
 */
proto.ufly.v1.UModeSet.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool inventory_enable = 2;
 * @return {boolean}
 */
proto.ufly.v1.UModeSet.prototype.getInventoryEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UModeSet} returns this
 */
proto.ufly.v1.UModeSet.prototype.setInventoryEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool inventory_disable = 3;
 * @return {boolean}
 */
proto.ufly.v1.UModeSet.prototype.getInventoryDisable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UModeSet} returns this
 */
proto.ufly.v1.UModeSet.prototype.setInventoryDisable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 times = 4;
 * @return {number}
 */
proto.ufly.v1.UModeSet.prototype.getTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ufly.v1.UModeSet} returns this
 */
proto.ufly.v1.UModeSet.prototype.setTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool auto_user_bank = 5;
 * @return {boolean}
 */
proto.ufly.v1.UModeSet.prototype.getAutoUserBank = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UModeSet} returns this
 */
proto.ufly.v1.UModeSet.prototype.setAutoUserBank = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool on_item_abort_inventory = 6;
 * @return {boolean}
 */
proto.ufly.v1.UModeSet.prototype.getOnItemAbortInventory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ufly.v1.UModeSet} returns this
 */
proto.ufly.v1.UModeSet.prototype.setOnItemAbortInventory = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ufly.v1.UltraflySignedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ufly.v1.UltraflySignedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UltraflySignedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: msg.getTopic_asB64(),
    data: msg.getData_asB64(),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ufly.v1.UltraflySignedMessage}
 */
proto.ufly.v1.UltraflySignedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ufly.v1.UltraflySignedMessage;
  return proto.ufly.v1.UltraflySignedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ufly.v1.UltraflySignedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ufly.v1.UltraflySignedMessage}
 */
proto.ufly.v1.UltraflySignedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ufly.v1.UltraflySignedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ufly.v1.UltraflySignedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ufly.v1.UltraflySignedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes topic = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getTopic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes topic = 1;
 * This is a type-conversion wrapper around `getTopic()`
 * @return {string}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getTopic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic()));
};


/**
 * optional bytes topic = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic()`
 * @return {!Uint8Array}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getTopic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ufly.v1.UltraflySignedMessage} returns this
 */
proto.ufly.v1.UltraflySignedMessage.prototype.setTopic = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ufly.v1.UltraflySignedMessage} returns this
 */
proto.ufly.v1.UltraflySignedMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.ufly.v1.UltraflySignedMessage.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ufly.v1.UltraflySignedMessage} returns this
 */
proto.ufly.v1.UltraflySignedMessage.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.ufly.v1);
