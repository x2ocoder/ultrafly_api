// source: ffruit/v1/ffruit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var dacs_v1_dacs_pb = require('../../dacs/v1/dacs_pb.js');
goog.object.extend(proto, dacs_v1_dacs_pb);
var oneshelf_v1_oneshelf_pb = require('../../oneshelf/v1/oneshelf_pb.js');
goog.object.extend(proto, oneshelf_v1_oneshelf_pb);
goog.exportSymbol('proto.ffruit.v1.BoxSimEvent', null, global);
goog.exportSymbol('proto.ffruit.v1.DacsSimEvent', null, global);
goog.exportSymbol('proto.ffruit.v1.FfruitConfig', null, global);
goog.exportSymbol('proto.ffruit.v1.FfruitRegisterBox', null, global);
goog.exportSymbol('proto.ffruit.v1.FfruitSignEpc', null, global);
goog.exportSymbol('proto.ffruit.v1.FfruitSpecialCommand', null, global);
goog.exportSymbol('proto.ffruit.v1.FfruitStateMessage', null, global);
goog.exportSymbol('proto.ffruit.v1.FfruitStatus', null, global);
goog.exportSymbol('proto.ffruit.v1.FfruitUserBankInit', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.FfruitConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.FfruitConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.FfruitConfig.displayName = 'proto.ffruit.v1.FfruitConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.FfruitStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.FfruitStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.FfruitStateMessage.displayName = 'proto.ffruit.v1.FfruitStateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.DacsSimEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.DacsSimEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.DacsSimEvent.displayName = 'proto.ffruit.v1.DacsSimEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.BoxSimEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.BoxSimEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.BoxSimEvent.displayName = 'proto.ffruit.v1.BoxSimEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.FfruitStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.FfruitStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.FfruitStatus.displayName = 'proto.ffruit.v1.FfruitStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.FfruitSignEpc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.FfruitSignEpc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.FfruitSignEpc.displayName = 'proto.ffruit.v1.FfruitSignEpc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.FfruitRegisterBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.FfruitRegisterBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.FfruitRegisterBox.displayName = 'proto.ffruit.v1.FfruitRegisterBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffruit.v1.FfruitUserBankInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffruit.v1.FfruitUserBankInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffruit.v1.FfruitUserBankInit.displayName = 'proto.ffruit.v1.FfruitUserBankInit';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.FfruitConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.FfruitConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.FfruitConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    gormDbEngine: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gormDbUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dacsXmitterTcpEndpoint: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dacsWeightTcpEndpoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mqttUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mqttUsername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mqttPassword: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mqttClientId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    uksrState: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mineralPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    watchZone: jspb.Message.getFieldWithDefault(msg, 11, ""),
    attachRssi: jspb.Message.getFieldWithDefault(msg, 12, 0),
    detachRssi: jspb.Message.getFieldWithDefault(msg, 13, 0),
    inventorySettlingRounds: jspb.Message.getFieldWithDefault(msg, 15, 0),
    proceedRelayLetter: jspb.Message.getFieldWithDefault(msg, 20, ""),
    proceedRelayNegativeLogic: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    proceedRelayPulseMs: jspb.Message.getFieldWithDefault(msg, 22, 0),
    errorRelayLetter: jspb.Message.getFieldWithDefault(msg, 30, ""),
    errorRelayNegativeLogic: jspb.Message.getBooleanFieldWithDefault(msg, 31, false),
    errorRelayPulseMs: jspb.Message.getFieldWithDefault(msg, 32, 0),
    tagOkRelayLetter: jspb.Message.getFieldWithDefault(msg, 35, ""),
    tagOkRelayNegativeLogic: jspb.Message.getBooleanFieldWithDefault(msg, 36, false),
    tagOkRelayPulseMs: jspb.Message.getFieldWithDefault(msg, 37, 0),
    boxInputLetter: jspb.Message.getFieldWithDefault(msg, 41, ""),
    boxInputNegativeLogic: jspb.Message.getBooleanFieldWithDefault(msg, 42, false),
    boxRelayPulseMs: jspb.Message.getFieldWithDefault(msg, 43, 0),
    enableOled: jspb.Message.getBooleanFieldWithDefault(msg, 50, false),
    enableLcd1602: jspb.Message.getBooleanFieldWithDefault(msg, 51, false),
    enableHdmi: jspb.Message.getBooleanFieldWithDefault(msg, 52, false),
    dacsCmdPDefaults: (f = msg.getDacsCmdPDefaults()) && dacs_v1_dacs_pb.DacsCmdP.toObject(includeInstance, f),
    dacsRedoPresetCmdPDefaults: (f = msg.getDacsRedoPresetCmdPDefaults()) && dacs_v1_dacs_pb.DacsCmdP.toObject(includeInstance, f),
    dacsCmdPPresetsMap: (f = msg.getDacsCmdPPresetsMap()) ? f.toObject(includeInstance, proto.dacs.v1.DacsCmdP.toObject) : [],
    oneshelfConfig: (f = msg.getOneshelfConfig()) && oneshelf_v1_oneshelf_pb.OneshelfConfig.toObject(includeInstance, f),
    boxLogSyncUrl: jspb.Message.getFieldWithDefault(msg, 100, ""),
    debugDacsCmdAt: jspb.Message.getBooleanFieldWithDefault(msg, 110, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.FfruitConfig}
 */
proto.ffruit.v1.FfruitConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.FfruitConfig;
  return proto.ffruit.v1.FfruitConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.FfruitConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.FfruitConfig}
 */
proto.ffruit.v1.FfruitConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGormDbEngine(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGormDbUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDacsXmitterTcpEndpoint(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDacsWeightTcpEndpoint(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttPassword(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttClientId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUksrState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMineralPath(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWatchZone(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttachRssi(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDetachRssi(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInventorySettlingRounds(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setProceedRelayLetter(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProceedRelayNegativeLogic(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProceedRelayPulseMs(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorRelayLetter(value);
      break;
    case 31:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setErrorRelayNegativeLogic(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErrorRelayPulseMs(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.setTagOkRelayLetter(value);
      break;
    case 36:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTagOkRelayNegativeLogic(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagOkRelayPulseMs(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoxInputLetter(value);
      break;
    case 42:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoxInputNegativeLogic(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBoxRelayPulseMs(value);
      break;
    case 50:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableOled(value);
      break;
    case 51:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableLcd1602(value);
      break;
    case 52:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableHdmi(value);
      break;
    case 60:
      var value = new dacs_v1_dacs_pb.DacsCmdP;
      reader.readMessage(value,dacs_v1_dacs_pb.DacsCmdP.deserializeBinaryFromReader);
      msg.setDacsCmdPDefaults(value);
      break;
    case 61:
      var value = new dacs_v1_dacs_pb.DacsCmdP;
      reader.readMessage(value,dacs_v1_dacs_pb.DacsCmdP.deserializeBinaryFromReader);
      msg.setDacsRedoPresetCmdPDefaults(value);
      break;
    case 62:
      var value = msg.getDacsCmdPPresetsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.dacs.v1.DacsCmdP.deserializeBinaryFromReader, 0, new proto.dacs.v1.DacsCmdP());
         });
      break;
    case 99:
      var value = new oneshelf_v1_oneshelf_pb.OneshelfConfig;
      reader.readMessage(value,oneshelf_v1_oneshelf_pb.OneshelfConfig.deserializeBinaryFromReader);
      msg.setOneshelfConfig(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoxLogSyncUrl(value);
      break;
    case 110:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugDacsCmdAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.FfruitConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.FfruitConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGormDbEngine();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGormDbUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDacsXmitterTcpEndpoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDacsWeightTcpEndpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMqttUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMqttUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMqttPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMqttClientId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUksrState();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMineralPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getWatchZone();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAttachRssi();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDetachRssi();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getInventorySettlingRounds();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getProceedRelayLetter();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getProceedRelayNegativeLogic();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getProceedRelayPulseMs();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getErrorRelayLetter();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getErrorRelayNegativeLogic();
  if (f) {
    writer.writeBool(
      31,
      f
    );
  }
  f = message.getErrorRelayPulseMs();
  if (f !== 0) {
    writer.writeUint32(
      32,
      f
    );
  }
  f = message.getTagOkRelayLetter();
  if (f.length > 0) {
    writer.writeString(
      35,
      f
    );
  }
  f = message.getTagOkRelayNegativeLogic();
  if (f) {
    writer.writeBool(
      36,
      f
    );
  }
  f = message.getTagOkRelayPulseMs();
  if (f !== 0) {
    writer.writeUint32(
      37,
      f
    );
  }
  f = message.getBoxInputLetter();
  if (f.length > 0) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getBoxInputNegativeLogic();
  if (f) {
    writer.writeBool(
      42,
      f
    );
  }
  f = message.getBoxRelayPulseMs();
  if (f !== 0) {
    writer.writeUint32(
      43,
      f
    );
  }
  f = message.getEnableOled();
  if (f) {
    writer.writeBool(
      50,
      f
    );
  }
  f = message.getEnableLcd1602();
  if (f) {
    writer.writeBool(
      51,
      f
    );
  }
  f = message.getEnableHdmi();
  if (f) {
    writer.writeBool(
      52,
      f
    );
  }
  f = message.getDacsCmdPDefaults();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      dacs_v1_dacs_pb.DacsCmdP.serializeBinaryToWriter
    );
  }
  f = message.getDacsRedoPresetCmdPDefaults();
  if (f != null) {
    writer.writeMessage(
      61,
      f,
      dacs_v1_dacs_pb.DacsCmdP.serializeBinaryToWriter
    );
  }
  f = message.getDacsCmdPPresetsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(62, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.dacs.v1.DacsCmdP.serializeBinaryToWriter);
  }
  f = message.getOneshelfConfig();
  if (f != null) {
    writer.writeMessage(
      99,
      f,
      oneshelf_v1_oneshelf_pb.OneshelfConfig.serializeBinaryToWriter
    );
  }
  f = message.getBoxLogSyncUrl();
  if (f.length > 0) {
    writer.writeString(
      100,
      f
    );
  }
  f = message.getDebugDacsCmdAt();
  if (f) {
    writer.writeBool(
      110,
      f
    );
  }
};


/**
 * optional string gorm_db_engine = 1;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getGormDbEngine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setGormDbEngine = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gorm_db_url = 2;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getGormDbUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setGormDbUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dacs_xmitter_tcp_endpoint = 3;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getDacsXmitterTcpEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setDacsXmitterTcpEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dacs_weight_tcp_endpoint = 4;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getDacsWeightTcpEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setDacsWeightTcpEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string mqtt_uri = 5;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getMqttUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setMqttUri = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mqtt_username = 6;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getMqttUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setMqttUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mqtt_password = 7;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getMqttPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setMqttPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mqtt_client_id = 8;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getMqttClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setMqttClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string uksr_state = 9;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getUksrState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setUksrState = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mineral_path = 10;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getMineralPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setMineralPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string watch_zone = 11;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getWatchZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setWatchZone = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 attach_rssi = 12;
 * @return {number}
 */
proto.ffruit.v1.FfruitConfig.prototype.getAttachRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setAttachRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 detach_rssi = 13;
 * @return {number}
 */
proto.ffruit.v1.FfruitConfig.prototype.getDetachRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setDetachRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 inventory_settling_rounds = 15;
 * @return {number}
 */
proto.ffruit.v1.FfruitConfig.prototype.getInventorySettlingRounds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setInventorySettlingRounds = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string proceed_relay_letter = 20;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getProceedRelayLetter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setProceedRelayLetter = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional bool proceed_relay_negative_logic = 21;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getProceedRelayNegativeLogic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setProceedRelayNegativeLogic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional uint32 proceed_relay_pulse_ms = 22;
 * @return {number}
 */
proto.ffruit.v1.FfruitConfig.prototype.getProceedRelayPulseMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setProceedRelayPulseMs = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional string error_relay_letter = 30;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getErrorRelayLetter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setErrorRelayLetter = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional bool error_relay_negative_logic = 31;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getErrorRelayNegativeLogic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 31, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setErrorRelayNegativeLogic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 31, value);
};


/**
 * optional uint32 error_relay_pulse_ms = 32;
 * @return {number}
 */
proto.ffruit.v1.FfruitConfig.prototype.getErrorRelayPulseMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setErrorRelayPulseMs = function(value) {
  return jspb.Message.setProto3IntField(this, 32, value);
};


/**
 * optional string tag_ok_relay_letter = 35;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getTagOkRelayLetter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setTagOkRelayLetter = function(value) {
  return jspb.Message.setProto3StringField(this, 35, value);
};


/**
 * optional bool tag_ok_relay_negative_logic = 36;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getTagOkRelayNegativeLogic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 36, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setTagOkRelayNegativeLogic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 36, value);
};


/**
 * optional uint32 tag_ok_relay_pulse_ms = 37;
 * @return {number}
 */
proto.ffruit.v1.FfruitConfig.prototype.getTagOkRelayPulseMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 37, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setTagOkRelayPulseMs = function(value) {
  return jspb.Message.setProto3IntField(this, 37, value);
};


/**
 * optional string box_input_letter = 41;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getBoxInputLetter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setBoxInputLetter = function(value) {
  return jspb.Message.setProto3StringField(this, 41, value);
};


/**
 * optional bool box_input_negative_logic = 42;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getBoxInputNegativeLogic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 42, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setBoxInputNegativeLogic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 42, value);
};


/**
 * optional uint32 box_relay_pulse_ms = 43;
 * @return {number}
 */
proto.ffruit.v1.FfruitConfig.prototype.getBoxRelayPulseMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setBoxRelayPulseMs = function(value) {
  return jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional bool enable_oled = 50;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getEnableOled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 50, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setEnableOled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 50, value);
};


/**
 * optional bool enable_lcd1602 = 51;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getEnableLcd1602 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 51, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setEnableLcd1602 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 51, value);
};


/**
 * optional bool enable_hdmi = 52;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getEnableHdmi = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 52, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setEnableHdmi = function(value) {
  return jspb.Message.setProto3BooleanField(this, 52, value);
};


/**
 * optional dacs.v1.DacsCmdP dacs_cmd_p_defaults = 60;
 * @return {?proto.dacs.v1.DacsCmdP}
 */
proto.ffruit.v1.FfruitConfig.prototype.getDacsCmdPDefaults = function() {
  return /** @type{?proto.dacs.v1.DacsCmdP} */ (
    jspb.Message.getWrapperField(this, dacs_v1_dacs_pb.DacsCmdP, 60));
};


/**
 * @param {?proto.dacs.v1.DacsCmdP|undefined} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
*/
proto.ffruit.v1.FfruitConfig.prototype.setDacsCmdPDefaults = function(value) {
  return jspb.Message.setWrapperField(this, 60, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.clearDacsCmdPDefaults = function() {
  return this.setDacsCmdPDefaults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.hasDacsCmdPDefaults = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional dacs.v1.DacsCmdP dacs_redo_preset_cmd_p_defaults = 61;
 * @return {?proto.dacs.v1.DacsCmdP}
 */
proto.ffruit.v1.FfruitConfig.prototype.getDacsRedoPresetCmdPDefaults = function() {
  return /** @type{?proto.dacs.v1.DacsCmdP} */ (
    jspb.Message.getWrapperField(this, dacs_v1_dacs_pb.DacsCmdP, 61));
};


/**
 * @param {?proto.dacs.v1.DacsCmdP|undefined} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
*/
proto.ffruit.v1.FfruitConfig.prototype.setDacsRedoPresetCmdPDefaults = function(value) {
  return jspb.Message.setWrapperField(this, 61, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.clearDacsRedoPresetCmdPDefaults = function() {
  return this.setDacsRedoPresetCmdPDefaults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.hasDacsRedoPresetCmdPDefaults = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * map<int32, dacs.v1.DacsCmdP> dacs_cmd_p_presets = 62;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.dacs.v1.DacsCmdP>}
 */
proto.ffruit.v1.FfruitConfig.prototype.getDacsCmdPPresetsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.dacs.v1.DacsCmdP>} */ (
      jspb.Message.getMapField(this, 62, opt_noLazyCreate,
      proto.dacs.v1.DacsCmdP));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.clearDacsCmdPPresetsMap = function() {
  this.getDacsCmdPPresetsMap().clear();
  return this;};


/**
 * optional oneshelf.v1.OneshelfConfig oneshelf_config = 99;
 * @return {?proto.oneshelf.v1.OneshelfConfig}
 */
proto.ffruit.v1.FfruitConfig.prototype.getOneshelfConfig = function() {
  return /** @type{?proto.oneshelf.v1.OneshelfConfig} */ (
    jspb.Message.getWrapperField(this, oneshelf_v1_oneshelf_pb.OneshelfConfig, 99));
};


/**
 * @param {?proto.oneshelf.v1.OneshelfConfig|undefined} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
*/
proto.ffruit.v1.FfruitConfig.prototype.setOneshelfConfig = function(value) {
  return jspb.Message.setWrapperField(this, 99, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.clearOneshelfConfig = function() {
  return this.setOneshelfConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.hasOneshelfConfig = function() {
  return jspb.Message.getField(this, 99) != null;
};


/**
 * optional string box_log_sync_url = 100;
 * @return {string}
 */
proto.ffruit.v1.FfruitConfig.prototype.getBoxLogSyncUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setBoxLogSyncUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 100, value);
};


/**
 * optional bool debug_dacs_cmd_at = 110;
 * @return {boolean}
 */
proto.ffruit.v1.FfruitConfig.prototype.getDebugDacsCmdAt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 110, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffruit.v1.FfruitConfig} returns this
 */
proto.ffruit.v1.FfruitConfig.prototype.setDebugDacsCmdAt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 110, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.FfruitStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.FfruitStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.FfruitStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    antennaNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.FfruitStateMessage}
 */
proto.ffruit.v1.FfruitStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.FfruitStateMessage;
  return proto.ffruit.v1.FfruitStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.FfruitStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.FfruitStateMessage}
 */
proto.ffruit.v1.FfruitStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntennaNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.FfruitStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.FfruitStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 error = 1;
 * @return {number}
 */
proto.ffruit.v1.FfruitStateMessage.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitStateMessage} returns this
 */
proto.ffruit.v1.FfruitStateMessage.prototype.setError = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 antenna_no = 2;
 * @return {number}
 */
proto.ffruit.v1.FfruitStateMessage.prototype.getAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.FfruitStateMessage} returns this
 */
proto.ffruit.v1.FfruitStateMessage.prototype.setAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.ffruit.v1.FfruitStateMessage.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitStateMessage} returns this
 */
proto.ffruit.v1.FfruitStateMessage.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.DacsSimEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.DacsSimEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.DacsSimEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.DacsSimEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    dacsData: msg.getDacsData_asB64(),
    dacsWeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.DacsSimEvent}
 */
proto.ffruit.v1.DacsSimEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.DacsSimEvent;
  return proto.ffruit.v1.DacsSimEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.DacsSimEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.DacsSimEvent}
 */
proto.ffruit.v1.DacsSimEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDacsData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDacsWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.DacsSimEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.DacsSimEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.DacsSimEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.DacsSimEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDacsData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDacsWeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes dacs_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ffruit.v1.DacsSimEvent.prototype.getDacsData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dacs_data = 1;
 * This is a type-conversion wrapper around `getDacsData()`
 * @return {string}
 */
proto.ffruit.v1.DacsSimEvent.prototype.getDacsData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDacsData()));
};


/**
 * optional bytes dacs_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDacsData()`
 * @return {!Uint8Array}
 */
proto.ffruit.v1.DacsSimEvent.prototype.getDacsData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDacsData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffruit.v1.DacsSimEvent} returns this
 */
proto.ffruit.v1.DacsSimEvent.prototype.setDacsData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 dacs_weight = 2;
 * @return {number}
 */
proto.ffruit.v1.DacsSimEvent.prototype.getDacsWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.DacsSimEvent} returns this
 */
proto.ffruit.v1.DacsSimEvent.prototype.setDacsWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.BoxSimEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.BoxSimEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.BoxSimEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.BoxSimEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrived: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.BoxSimEvent}
 */
proto.ffruit.v1.BoxSimEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.BoxSimEvent;
  return proto.ffruit.v1.BoxSimEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.BoxSimEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.BoxSimEvent}
 */
proto.ffruit.v1.BoxSimEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArrived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.BoxSimEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.BoxSimEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.BoxSimEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.BoxSimEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrived();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 arrived = 1;
 * @return {number}
 */
proto.ffruit.v1.BoxSimEvent.prototype.getArrived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffruit.v1.BoxSimEvent} returns this
 */
proto.ffruit.v1.BoxSimEvent.prototype.setArrived = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.FfruitStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.FfruitStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.FfruitStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.FfruitStatus}
 */
proto.ffruit.v1.FfruitStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.FfruitStatus;
  return proto.ffruit.v1.FfruitStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.FfruitStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.FfruitStatus}
 */
proto.ffruit.v1.FfruitStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.FfruitStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.FfruitStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.ffruit.v1.FfruitStatus.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitStatus} returns this
 */
proto.ffruit.v1.FfruitStatus.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ffruit.v1.FfruitStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitStatus} returns this
 */
proto.ffruit.v1.FfruitStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.FfruitSignEpc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.FfruitSignEpc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitSignEpc.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64(),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.FfruitSignEpc}
 */
proto.ffruit.v1.FfruitSignEpc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.FfruitSignEpc;
  return proto.ffruit.v1.FfruitSignEpc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.FfruitSignEpc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.FfruitSignEpc}
 */
proto.ffruit.v1.FfruitSignEpc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.FfruitSignEpc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.FfruitSignEpc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitSignEpc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitSignEpc} returns this
 */
proto.ffruit.v1.FfruitSignEpc.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffruit.v1.FfruitSignEpc} returns this
 */
proto.ffruit.v1.FfruitSignEpc.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitSignEpc.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffruit.v1.FfruitSignEpc} returns this
 */
proto.ffruit.v1.FfruitSignEpc.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.FfruitRegisterBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.FfruitRegisterBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitRegisterBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.FfruitRegisterBox}
 */
proto.ffruit.v1.FfruitRegisterBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.FfruitRegisterBox;
  return proto.ffruit.v1.FfruitRegisterBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.FfruitRegisterBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.FfruitRegisterBox}
 */
proto.ffruit.v1.FfruitRegisterBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.FfruitRegisterBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.FfruitRegisterBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitRegisterBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitRegisterBox} returns this
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffruit.v1.FfruitRegisterBox} returns this
 */
proto.ffruit.v1.FfruitRegisterBox.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ffruit.v1.FfruitUserBankInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffruit.v1.FfruitUserBankInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitUserBankInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffruit.v1.FfruitUserBankInit}
 */
proto.ffruit.v1.FfruitUserBankInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffruit.v1.FfruitUserBankInit;
  return proto.ffruit.v1.FfruitUserBankInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffruit.v1.FfruitUserBankInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffruit.v1.FfruitUserBankInit}
 */
proto.ffruit.v1.FfruitUserBankInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffruit.v1.FfruitUserBankInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffruit.v1.FfruitUserBankInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffruit.v1.FfruitUserBankInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffruit.v1.FfruitUserBankInit} returns this
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffruit.v1.FfruitUserBankInit} returns this
 */
proto.ffruit.v1.FfruitUserBankInit.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.ffruit.v1.FfruitSpecialCommand = {
  IGNORE_ME: 0,
  REDO_PRESET: 1
};

goog.object.extend(exports, proto.ffruit.v1);
