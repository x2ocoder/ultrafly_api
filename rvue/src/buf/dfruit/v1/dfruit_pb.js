// source: dfruit/v1/dfruit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ffruit_v1_ffruit_pb = require('../../ffruit/v1/ffruit_pb.js');
goog.object.extend(proto, ffruit_v1_ffruit_pb);
goog.exportSymbol('proto.dfruit.v1.DfruitBarcode', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitConfig', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitOperation', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitPrepareReservedBlock', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitRegisterBox', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitSignEpc', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitStateMessage', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitStatus', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitUserBankInit', null, global);
goog.exportSymbol('proto.dfruit.v1.DfruitUserBankInitSpecialCommand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitConfig.displayName = 'proto.dfruit.v1.DfruitConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitStateMessage.displayName = 'proto.dfruit.v1.DfruitStateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitStatus.displayName = 'proto.dfruit.v1.DfruitStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitSignEpc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitSignEpc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitSignEpc.displayName = 'proto.dfruit.v1.DfruitSignEpc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitPrepareReservedBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitPrepareReservedBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitPrepareReservedBlock.displayName = 'proto.dfruit.v1.DfruitPrepareReservedBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitRegisterBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitRegisterBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitRegisterBox.displayName = 'proto.dfruit.v1.DfruitRegisterBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitUserBankInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitUserBankInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitUserBankInit.displayName = 'proto.dfruit.v1.DfruitUserBankInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitUserBankInitSpecialCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitUserBankInitSpecialCommand.displayName = 'proto.dfruit.v1.DfruitUserBankInitSpecialCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitBarcode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitBarcode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitBarcode.displayName = 'proto.dfruit.v1.DfruitBarcode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfruit.v1.DfruitOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfruit.v1.DfruitOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dfruit.v1.DfruitOperation.displayName = 'proto.dfruit.v1.DfruitOperation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    mqttUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mqttUsername: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mqttPassword: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mqttClientId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    uksrState: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mineralPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    watchZone: jspb.Message.getFieldWithDefault(msg, 11, ""),
    attachRssi: jspb.Message.getFieldWithDefault(msg, 12, 0),
    detachRssi: jspb.Message.getFieldWithDefault(msg, 13, 0),
    inventorySettlingRounds: jspb.Message.getFieldWithDefault(msg, 15, 0),
    gormDbEngine: jspb.Message.getFieldWithDefault(msg, 80, ""),
    gormDbUrl: jspb.Message.getFieldWithDefault(msg, 81, ""),
    dummyWaitMs: jspb.Message.getFieldWithDefault(msg, 90, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitConfig}
 */
proto.dfruit.v1.DfruitConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitConfig;
  return proto.dfruit.v1.DfruitConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitConfig}
 */
proto.dfruit.v1.DfruitConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUri(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttPassword(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttClientId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUksrState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMineralPath(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWatchZone(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttachRssi(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDetachRssi(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInventorySettlingRounds(value);
      break;
    case 80:
      var value = /** @type {string} */ (reader.readString());
      msg.setGormDbEngine(value);
      break;
    case 81:
      var value = /** @type {string} */ (reader.readString());
      msg.setGormDbUrl(value);
      break;
    case 90:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDummyWaitMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMqttUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMqttUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMqttPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMqttClientId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUksrState();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMineralPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getWatchZone();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAttachRssi();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDetachRssi();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getInventorySettlingRounds();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getGormDbEngine();
  if (f.length > 0) {
    writer.writeString(
      80,
      f
    );
  }
  f = message.getGormDbUrl();
  if (f.length > 0) {
    writer.writeString(
      81,
      f
    );
  }
  f = message.getDummyWaitMs();
  if (f !== 0) {
    writer.writeInt32(
      90,
      f
    );
  }
};


/**
 * optional string mqtt_uri = 5;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getMqttUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setMqttUri = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mqtt_username = 6;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getMqttUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setMqttUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mqtt_password = 7;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getMqttPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setMqttPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mqtt_client_id = 8;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getMqttClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setMqttClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string uksr_state = 9;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getUksrState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setUksrState = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mineral_path = 10;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getMineralPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setMineralPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string watch_zone = 11;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getWatchZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setWatchZone = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 attach_rssi = 12;
 * @return {number}
 */
proto.dfruit.v1.DfruitConfig.prototype.getAttachRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setAttachRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 detach_rssi = 13;
 * @return {number}
 */
proto.dfruit.v1.DfruitConfig.prototype.getDetachRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setDetachRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 inventory_settling_rounds = 15;
 * @return {number}
 */
proto.dfruit.v1.DfruitConfig.prototype.getInventorySettlingRounds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setInventorySettlingRounds = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string gorm_db_engine = 80;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getGormDbEngine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 80, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setGormDbEngine = function(value) {
  return jspb.Message.setProto3StringField(this, 80, value);
};


/**
 * optional string gorm_db_url = 81;
 * @return {string}
 */
proto.dfruit.v1.DfruitConfig.prototype.getGormDbUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 81, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setGormDbUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 81, value);
};


/**
 * optional int32 dummy_wait_ms = 90;
 * @return {number}
 */
proto.dfruit.v1.DfruitConfig.prototype.getDummyWaitMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 90, 0));
};


/**
 * @param {number} value
 * @return {!proto.dfruit.v1.DfruitConfig} returns this
 */
proto.dfruit.v1.DfruitConfig.prototype.setDummyWaitMs = function(value) {
  return jspb.Message.setProto3IntField(this, 90, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, 0),
    antennaNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitStateMessage}
 */
proto.dfruit.v1.DfruitStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitStateMessage;
  return proto.dfruit.v1.DfruitStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitStateMessage}
 */
proto.dfruit.v1.DfruitStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntennaNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAntennaNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 error = 1;
 * @return {number}
 */
proto.dfruit.v1.DfruitStateMessage.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dfruit.v1.DfruitStateMessage} returns this
 */
proto.dfruit.v1.DfruitStateMessage.prototype.setError = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 antenna_no = 2;
 * @return {number}
 */
proto.dfruit.v1.DfruitStateMessage.prototype.getAntennaNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dfruit.v1.DfruitStateMessage} returns this
 */
proto.dfruit.v1.DfruitStateMessage.prototype.setAntennaNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.dfruit.v1.DfruitStateMessage.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitStateMessage} returns this
 */
proto.dfruit.v1.DfruitStateMessage.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitStatus}
 */
proto.dfruit.v1.DfruitStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitStatus;
  return proto.dfruit.v1.DfruitStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitStatus}
 */
proto.dfruit.v1.DfruitStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitStatus.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitStatus} returns this
 */
proto.dfruit.v1.DfruitStatus.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.dfruit.v1.DfruitStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitStatus} returns this
 */
proto.dfruit.v1.DfruitStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitSignEpc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitSignEpc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitSignEpc.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64(),
    key: msg.getKey_asB64(),
    tid: msg.getTid_asB64(),
    serialBytes: msg.getSerialBytes_asB64(),
    companyBytes: msg.getCompanyBytes_asB64(),
    productBytes: msg.getProductBytes_asB64(),
    force: jspb.Message.getBooleanFieldWithDefault(msg, 20, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitSignEpc}
 */
proto.dfruit.v1.DfruitSignEpc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitSignEpc;
  return proto.dfruit.v1.DfruitSignEpc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitSignEpc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitSignEpc}
 */
proto.dfruit.v1.DfruitSignEpc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTid(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSerialBytes(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCompanyBytes(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProductBytes(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitSignEpc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitSignEpc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitSignEpc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSerialBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getCompanyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProductBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes tid = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getTid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes tid = 4;
 * This is a type-conversion wrapper around `getTid()`
 * @return {string}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getTid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTid()));
};


/**
 * optional bytes tid = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTid()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getTid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setTid = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes serial_bytes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getSerialBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes serial_bytes = 5;
 * This is a type-conversion wrapper around `getSerialBytes()`
 * @return {string}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getSerialBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSerialBytes()));
};


/**
 * optional bytes serial_bytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSerialBytes()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getSerialBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSerialBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setSerialBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes company_bytes = 6;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getCompanyBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes company_bytes = 6;
 * This is a type-conversion wrapper around `getCompanyBytes()`
 * @return {string}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getCompanyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCompanyBytes()));
};


/**
 * optional bytes company_bytes = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCompanyBytes()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getCompanyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCompanyBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setCompanyBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes product_bytes = 7;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getProductBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes product_bytes = 7;
 * This is a type-conversion wrapper around `getProductBytes()`
 * @return {string}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getProductBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProductBytes()));
};


/**
 * optional bytes product_bytes = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProductBytes()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getProductBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProductBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setProductBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bool force = 20;
 * @return {boolean}
 */
proto.dfruit.v1.DfruitSignEpc.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dfruit.v1.DfruitSignEpc} returns this
 */
proto.dfruit.v1.DfruitSignEpc.prototype.setForce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitPrepareReservedBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitPrepareReservedBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    force: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitPrepareReservedBlock}
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitPrepareReservedBlock;
  return proto.dfruit.v1.DfruitPrepareReservedBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitPrepareReservedBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitPrepareReservedBlock}
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitPrepareReservedBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitPrepareReservedBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitPrepareReservedBlock} returns this
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool force = 2;
 * @return {boolean}
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dfruit.v1.DfruitPrepareReservedBlock} returns this
 */
proto.dfruit.v1.DfruitPrepareReservedBlock.prototype.setForce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitRegisterBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitRegisterBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitRegisterBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitRegisterBox}
 */
proto.dfruit.v1.DfruitRegisterBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitRegisterBox;
  return proto.dfruit.v1.DfruitRegisterBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitRegisterBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitRegisterBox}
 */
proto.dfruit.v1.DfruitRegisterBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitRegisterBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitRegisterBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitRegisterBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitRegisterBox} returns this
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitRegisterBox} returns this
 */
proto.dfruit.v1.DfruitRegisterBox.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitUserBankInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitUserBankInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitUserBankInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitUserBankInit}
 */
proto.dfruit.v1.DfruitUserBankInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitUserBankInit;
  return proto.dfruit.v1.DfruitUserBankInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitUserBankInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitUserBankInit}
 */
proto.dfruit.v1.DfruitUserBankInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitUserBankInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitUserBankInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitUserBankInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitUserBankInit} returns this
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitUserBankInit} returns this
 */
proto.dfruit.v1.DfruitUserBankInit.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitUserBankInitSpecialCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    epc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appId: msg.getAppId_asB64(),
    command: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitUserBankInitSpecialCommand;
  return proto.dfruit.v1.DfruitUserBankInitSpecialCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {!proto.ffruit.v1.FfruitSpecialCommand} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitUserBankInitSpecialCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string epc = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.getEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand} returns this
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.setEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes app_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.getAppId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_id = 2;
 * This is a type-conversion wrapper around `getAppId()`
 * @return {string}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.getAppId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppId()));
};


/**
 * optional bytes app_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppId()`
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.getAppId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand} returns this
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.setAppId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ffruit.v1.FfruitSpecialCommand command = 3;
 * @return {!proto.ffruit.v1.FfruitSpecialCommand}
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.getCommand = function() {
  return /** @type {!proto.ffruit.v1.FfruitSpecialCommand} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ffruit.v1.FfruitSpecialCommand} value
 * @return {!proto.dfruit.v1.DfruitUserBankInitSpecialCommand} returns this
 */
proto.dfruit.v1.DfruitUserBankInitSpecialCommand.prototype.setCommand = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitBarcode.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitBarcode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitBarcode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitBarcode.toObject = function(includeInstance, msg) {
  var f, obj = {
    scanned: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confirmed: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitBarcode}
 */
proto.dfruit.v1.DfruitBarcode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitBarcode;
  return proto.dfruit.v1.DfruitBarcode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitBarcode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitBarcode}
 */
proto.dfruit.v1.DfruitBarcode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScanned(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitBarcode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitBarcode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitBarcode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitBarcode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScanned();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfirmed();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scanned = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitBarcode.prototype.getScanned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitBarcode} returns this
 */
proto.dfruit.v1.DfruitBarcode.prototype.setScanned = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string confirmed = 2;
 * @return {string}
 */
proto.dfruit.v1.DfruitBarcode.prototype.getConfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitBarcode} returns this
 */
proto.dfruit.v1.DfruitBarcode.prototype.setConfirmed = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfruit.v1.DfruitOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.dfruit.v1.DfruitOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfruit.v1.DfruitOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialEpcBank: jspb.Message.getFieldWithDefault(msg, 1, ""),
    initialTidBank: jspb.Message.getFieldWithDefault(msg, 2, ""),
    initialUserBank: jspb.Message.getFieldWithDefault(msg, 3, ""),
    barcodeAsScanned: jspb.Message.getFieldWithDefault(msg, 4, ""),
    barcodeAsConfirmed: jspb.Message.getFieldWithDefault(msg, 5, ""),
    finalEpc: jspb.Message.getFieldWithDefault(msg, 10, ""),
    finalEpcFound: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    tagLocked: jspb.Message.getBooleanFieldWithDefault(msg, 20, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfruit.v1.DfruitOperation}
 */
proto.dfruit.v1.DfruitOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfruit.v1.DfruitOperation;
  return proto.dfruit.v1.DfruitOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfruit.v1.DfruitOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfruit.v1.DfruitOperation}
 */
proto.dfruit.v1.DfruitOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialEpcBank(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialTidBank(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialUserBank(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarcodeAsScanned(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBarcodeAsConfirmed(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFinalEpc(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinalEpcFound(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTagLocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfruit.v1.DfruitOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfruit.v1.DfruitOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfruit.v1.DfruitOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfruit.v1.DfruitOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialEpcBank();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInitialTidBank();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInitialUserBank();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBarcodeAsScanned();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBarcodeAsConfirmed();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFinalEpc();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFinalEpcFound();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getTagLocked();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
};


/**
 * optional string initial_epc_bank = 1;
 * @return {string}
 */
proto.dfruit.v1.DfruitOperation.prototype.getInitialEpcBank = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setInitialEpcBank = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string initial_tid_bank = 2;
 * @return {string}
 */
proto.dfruit.v1.DfruitOperation.prototype.getInitialTidBank = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setInitialTidBank = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string initial_user_bank = 3;
 * @return {string}
 */
proto.dfruit.v1.DfruitOperation.prototype.getInitialUserBank = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setInitialUserBank = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string barcode_as_scanned = 4;
 * @return {string}
 */
proto.dfruit.v1.DfruitOperation.prototype.getBarcodeAsScanned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setBarcodeAsScanned = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string barcode_as_confirmed = 5;
 * @return {string}
 */
proto.dfruit.v1.DfruitOperation.prototype.getBarcodeAsConfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setBarcodeAsConfirmed = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string final_epc = 10;
 * @return {string}
 */
proto.dfruit.v1.DfruitOperation.prototype.getFinalEpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setFinalEpc = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool final_epc_found = 11;
 * @return {boolean}
 */
proto.dfruit.v1.DfruitOperation.prototype.getFinalEpcFound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setFinalEpcFound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool tag_locked = 20;
 * @return {boolean}
 */
proto.dfruit.v1.DfruitOperation.prototype.getTagLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dfruit.v1.DfruitOperation} returns this
 */
proto.dfruit.v1.DfruitOperation.prototype.setTagLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};


goog.object.extend(exports, proto.dfruit.v1);
