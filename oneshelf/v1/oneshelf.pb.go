// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: oneshelf/v1/oneshelf.proto

package oneshelf_v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GpioMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PinNumber   uint32 `protobuf:"varint,1,opt,name=pin_number,json=pinNumber,proto3" json:"pin_number,omitempty"`    // GPIO # (Linux System level)
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                // Cross Hardware Board "Name" Such as "A" = Pin 0 or "A" = Pin 16 on another breakout board
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                  // Description of Pin for example "Leftmost input"
	Direction   string `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`                      // I = Input, O = Output
	InitHigh    bool   `protobuf:"varint,5,opt,name=init_high,json=initHigh,proto3" json:"init_high,omitempty"`       // When: Output, When InitHigh set pin to High on Boot
	DebounceMs  uint32 `protobuf:"varint,6,opt,name=debounce_ms,json=debounceMs,proto3" json:"debounce_ms,omitempty"` // When: Input, # of Miliseconds to debounce input with
}

func (x *GpioMapping) Reset() {
	*x = GpioMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneshelf_v1_oneshelf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpioMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpioMapping) ProtoMessage() {}

func (x *GpioMapping) ProtoReflect() protoreflect.Message {
	mi := &file_oneshelf_v1_oneshelf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpioMapping.ProtoReflect.Descriptor instead.
func (*GpioMapping) Descriptor() ([]byte, []int) {
	return file_oneshelf_v1_oneshelf_proto_rawDescGZIP(), []int{0}
}

func (x *GpioMapping) GetPinNumber() uint32 {
	if x != nil {
		return x.PinNumber
	}
	return 0
}

func (x *GpioMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GpioMapping) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GpioMapping) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GpioMapping) GetInitHigh() bool {
	if x != nil {
		return x.InitHigh
	}
	return false
}

func (x *GpioMapping) GetDebounceMs() uint32 {
	if x != nil {
		return x.DebounceMs
	}
	return 0
}

type OneshelfConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialPortName       string         `protobuf:"bytes,1,opt,name=serial_port_name,json=serialPortName,proto3" json:"serial_port_name,omitempty"` // Serial Port /dev/tty.something
	MqttUri              string         `protobuf:"bytes,5,opt,name=mqtt_uri,json=mqttUri,proto3" json:"mqtt_uri,omitempty"`                        // MQTT Connection String "tcp://127.0.0.1:1883"
	MqttUsername         string         `protobuf:"bytes,6,opt,name=mqtt_username,json=mqttUsername,proto3" json:"mqtt_username,omitempty"`
	MqttPassword         string         `protobuf:"bytes,7,opt,name=mqtt_password,json=mqttPassword,proto3" json:"mqtt_password,omitempty"`
	MqttClientId         string         `protobuf:"bytes,8,opt,name=mqtt_client_id,json=mqttClientId,proto3" json:"mqtt_client_id,omitempty"`
	MineralPath          string         `protobuf:"bytes,10,opt,name=mineral_path,json=mineralPath,proto3" json:"mineral_path,omitempty"`                                 // License path
	ReaderName           string         `protobuf:"bytes,11,opt,name=reader_name,json=readerName,proto3" json:"reader_name,omitempty"`                                    // "m2900x" reported to endpoint for UHF chipset identification // Used mostly in V1
	MacAddress           string         `protobuf:"bytes,12,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`                                    // "29:10:22:33:44:55" -  MAC Address of Reader (reported to endpoint for identification) // Used mostly in V1
	UhfCountry           string         `protobuf:"bytes,13,opt,name=uhf_country,json=uhfCountry,proto3" json:"uhf_country,omitempty"`                                    // USA, KR, VN - Talk to your favorite developer to add more countries
	AntennasOnStr        string         `protobuf:"bytes,20,opt,name=antennas_on_str,json=antennasOnStr,proto3" json:"antennas_on_str,omitempty"`                         //  CSV Antennas Enabled (Format: #[:Power#],...) Power # between 20-33  - Example: 0:20,3:33,5:20") ; TODO Move into structure for more per-antenna detail
	InventorySec         int32          `protobuf:"varint,21,opt,name=inventory_sec,json=inventorySec,proto3" json:"inventory_sec,omitempty"`                             // seconds to wait before POSTING full inventory via HTTP (could do many scans in between inventory sends) // 60 good for shop, 2 good for factory
	RssiPreFilterMinimum int32          `protobuf:"varint,22,opt,name=rssi_pre_filter_minimum,json=rssiPreFilterMinimum,proto3" json:"rssi_pre_filter_minimum,omitempty"` // TODO: make per-antenna -- 30-60 depending on antenna type
	WaitMs               int32          `protobuf:"varint,31,opt,name=wait_ms,json=waitMs,proto3" json:"wait_ms,omitempty"`                                               // 100 - miliseconds to wait before inventory rounds
	FadingMs             int32          `protobuf:"varint,32,opt,name=fading_ms,json=fadingMs,proto3" json:"fading_ms,omitempty"`                                         // 1000 - miliseconds to wait before flagging as Fading")                 // 5000 good for shops; 1000 good for factory
	LostMs               int32          `protobuf:"varint,33,opt,name=lost_ms,json=lostMs,proto3" json:"lost_ms,omitempty"`                                               // 2000 - miliseconds to wait before flagging as Lost")                     // 15000 good for shops for brief handling; 2000 good for factory
	UrlV1                string         `protobuf:"bytes,70,opt,name=url_v1,json=urlV1,proto3" json:"url_v1,omitempty"`                                                   // v1 charlie format - POST URL for version 1 formatted data  (rf1 to rf8) Ex http://localhost:3123/endpoint/dummy")
	InventoryUrl         string         `protobuf:"bytes,71,opt,name=inventory_url,json=inventoryUrl,proto3" json:"inventory_url,omitempty"`                              // (Not Implemented Yet - Doing MQTT First) v2 per-zone, delta, event info
	EventsUrl            string         `protobuf:"bytes,72,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`                                       //  (Not Implemented Yet - Doing MQTT First) v2: POST URL for version 2 formatted data - Per Zone Data, Delta Reporting, Event Based Ex http://localhost:3123/endpoint/v2events")
	PcbMajorVersion      int32          `protobuf:"varint,80,opt,name=pcb_major_version,json=pcbMajorVersion,proto3" json:"pcb_major_version,omitempty"`                  // 0
	PcbMinorVersion      int32          `protobuf:"varint,81,opt,name=pcb_minor_version,json=pcbMinorVersion,proto3" json:"pcb_minor_version,omitempty"`                  // 6
	Spotlight            string         `protobuf:"bytes,90,opt,name=spotlight,proto3" json:"spotlight,omitempty"`                                                        // CSV - Spotlight MACs on debug "ABCD,1234"
	Verbosity            string         `protobuf:"bytes,91,opt,name=verbosity,proto3" json:"verbosity,omitempty"`                                                        // Verbosity Level (I = Info, D = Debug)
	TestGpo              bool           `protobuf:"varint,92,opt,name=test_gpo,json=testGpo,proto3" json:"test_gpo,omitempty"`                                            // true = toggle GPIO Outputs
	GpioMappings         []*GpioMapping `protobuf:"bytes,100,rep,name=gpio_mappings,json=gpioMappings,proto3" json:"gpio_mappings,omitempty"`
}

func (x *OneshelfConfig) Reset() {
	*x = OneshelfConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneshelf_v1_oneshelf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneshelfConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneshelfConfig) ProtoMessage() {}

func (x *OneshelfConfig) ProtoReflect() protoreflect.Message {
	mi := &file_oneshelf_v1_oneshelf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneshelfConfig.ProtoReflect.Descriptor instead.
func (*OneshelfConfig) Descriptor() ([]byte, []int) {
	return file_oneshelf_v1_oneshelf_proto_rawDescGZIP(), []int{1}
}

func (x *OneshelfConfig) GetSerialPortName() string {
	if x != nil {
		return x.SerialPortName
	}
	return ""
}

func (x *OneshelfConfig) GetMqttUri() string {
	if x != nil {
		return x.MqttUri
	}
	return ""
}

func (x *OneshelfConfig) GetMqttUsername() string {
	if x != nil {
		return x.MqttUsername
	}
	return ""
}

func (x *OneshelfConfig) GetMqttPassword() string {
	if x != nil {
		return x.MqttPassword
	}
	return ""
}

func (x *OneshelfConfig) GetMqttClientId() string {
	if x != nil {
		return x.MqttClientId
	}
	return ""
}

func (x *OneshelfConfig) GetMineralPath() string {
	if x != nil {
		return x.MineralPath
	}
	return ""
}

func (x *OneshelfConfig) GetReaderName() string {
	if x != nil {
		return x.ReaderName
	}
	return ""
}

func (x *OneshelfConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *OneshelfConfig) GetUhfCountry() string {
	if x != nil {
		return x.UhfCountry
	}
	return ""
}

func (x *OneshelfConfig) GetAntennasOnStr() string {
	if x != nil {
		return x.AntennasOnStr
	}
	return ""
}

func (x *OneshelfConfig) GetInventorySec() int32 {
	if x != nil {
		return x.InventorySec
	}
	return 0
}

func (x *OneshelfConfig) GetRssiPreFilterMinimum() int32 {
	if x != nil {
		return x.RssiPreFilterMinimum
	}
	return 0
}

func (x *OneshelfConfig) GetWaitMs() int32 {
	if x != nil {
		return x.WaitMs
	}
	return 0
}

func (x *OneshelfConfig) GetFadingMs() int32 {
	if x != nil {
		return x.FadingMs
	}
	return 0
}

func (x *OneshelfConfig) GetLostMs() int32 {
	if x != nil {
		return x.LostMs
	}
	return 0
}

func (x *OneshelfConfig) GetUrlV1() string {
	if x != nil {
		return x.UrlV1
	}
	return ""
}

func (x *OneshelfConfig) GetInventoryUrl() string {
	if x != nil {
		return x.InventoryUrl
	}
	return ""
}

func (x *OneshelfConfig) GetEventsUrl() string {
	if x != nil {
		return x.EventsUrl
	}
	return ""
}

func (x *OneshelfConfig) GetPcbMajorVersion() int32 {
	if x != nil {
		return x.PcbMajorVersion
	}
	return 0
}

func (x *OneshelfConfig) GetPcbMinorVersion() int32 {
	if x != nil {
		return x.PcbMinorVersion
	}
	return 0
}

func (x *OneshelfConfig) GetSpotlight() string {
	if x != nil {
		return x.Spotlight
	}
	return ""
}

func (x *OneshelfConfig) GetVerbosity() string {
	if x != nil {
		return x.Verbosity
	}
	return ""
}

func (x *OneshelfConfig) GetTestGpo() bool {
	if x != nil {
		return x.TestGpo
	}
	return false
}

func (x *OneshelfConfig) GetGpioMappings() []*GpioMapping {
	if x != nil {
		return x.GpioMappings
	}
	return nil
}

var File_oneshelf_v1_oneshelf_proto protoreflect.FileDescriptor

var file_oneshelf_v1_oneshelf_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x6e,
	0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x6e,
	0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x47, 0x70,
	0x69, 0x6f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6e, 0x69, 0x74, 0x48, 0x69, 0x67, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x22, 0xe7, 0x06, 0x0a, 0x0e, 0x4f,
	0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x71, 0x74, 0x74, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x71, 0x74, 0x74, 0x55,
	0x72, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x71, 0x74, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x71, 0x74, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x71, 0x74, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x68, 0x66, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x68,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x73, 0x4f, 0x6e, 0x53, 0x74, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x73, 0x73, 0x69, 0x50, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x61, 0x69, 0x74, 0x4d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x75,
	0x72, 0x6c, 0x5f, 0x76, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x72, 0x6c,
	0x56, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x63, 0x62, 0x5f, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x63, 0x62, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x63, 0x62, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x63, 0x62, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x67, 0x70, 0x6f, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x47, 0x70, 0x6f, 0x12, 0x3d, 0x0a, 0x0d, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x69, 0x6f, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x67, 0x70, 0x69, 0x6f, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x19, 0x5a, 0x17, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66,
	0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_oneshelf_v1_oneshelf_proto_rawDescOnce sync.Once
	file_oneshelf_v1_oneshelf_proto_rawDescData = file_oneshelf_v1_oneshelf_proto_rawDesc
)

func file_oneshelf_v1_oneshelf_proto_rawDescGZIP() []byte {
	file_oneshelf_v1_oneshelf_proto_rawDescOnce.Do(func() {
		file_oneshelf_v1_oneshelf_proto_rawDescData = protoimpl.X.CompressGZIP(file_oneshelf_v1_oneshelf_proto_rawDescData)
	})
	return file_oneshelf_v1_oneshelf_proto_rawDescData
}

var file_oneshelf_v1_oneshelf_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_oneshelf_v1_oneshelf_proto_goTypes = []interface{}{
	(*GpioMapping)(nil),    // 0: oneshelf.v1.GpioMapping
	(*OneshelfConfig)(nil), // 1: oneshelf.v1.OneshelfConfig
}
var file_oneshelf_v1_oneshelf_proto_depIdxs = []int32{
	0, // 0: oneshelf.v1.OneshelfConfig.gpio_mappings:type_name -> oneshelf.v1.GpioMapping
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_oneshelf_v1_oneshelf_proto_init() }
func file_oneshelf_v1_oneshelf_proto_init() {
	if File_oneshelf_v1_oneshelf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oneshelf_v1_oneshelf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpioMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneshelf_v1_oneshelf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneshelfConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oneshelf_v1_oneshelf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oneshelf_v1_oneshelf_proto_goTypes,
		DependencyIndexes: file_oneshelf_v1_oneshelf_proto_depIdxs,
		MessageInfos:      file_oneshelf_v1_oneshelf_proto_msgTypes,
	}.Build()
	File_oneshelf_v1_oneshelf_proto = out.File
	file_oneshelf_v1_oneshelf_proto_rawDesc = nil
	file_oneshelf_v1_oneshelf_proto_goTypes = nil
	file_oneshelf_v1_oneshelf_proto_depIdxs = nil
}
