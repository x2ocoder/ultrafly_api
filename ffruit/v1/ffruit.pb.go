// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: ffruit/v1/ffruit.proto

package ffruit_v1

import (
	v1 "dacs/v1"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v11 "oneshelf/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FfruitSpecialCommand int32

const (
	FfruitSpecialCommand_IGNORE_ME   FfruitSpecialCommand = 0 // Tell Ffruit Program: Do nothing
	FfruitSpecialCommand_REDO_PRESET FfruitSpecialCommand = 1 // Tell Ffruit Program: Send this special basket to DACS and read new Preset ####
)

// Enum value maps for FfruitSpecialCommand.
var (
	FfruitSpecialCommand_name = map[int32]string{
		0: "IGNORE_ME",
		1: "REDO_PRESET",
	}
	FfruitSpecialCommand_value = map[string]int32{
		"IGNORE_ME":   0,
		"REDO_PRESET": 1,
	}
)

func (x FfruitSpecialCommand) Enum() *FfruitSpecialCommand {
	p := new(FfruitSpecialCommand)
	*p = x
	return p
}

func (x FfruitSpecialCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FfruitSpecialCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_ffruit_v1_ffruit_proto_enumTypes[0].Descriptor()
}

func (FfruitSpecialCommand) Type() protoreflect.EnumType {
	return &file_ffruit_v1_ffruit_proto_enumTypes[0]
}

func (x FfruitSpecialCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FfruitSpecialCommand.Descriptor instead.
func (FfruitSpecialCommand) EnumDescriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{0}
}

type FfruitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GormDbEngine string `protobuf:"bytes,1,opt,name=gorm_db_engine,json=gormDbEngine,proto3" json:"gorm_db_engine,omitempty"` // Example: "mysql"
	GormDbUrl    string `protobuf:"bytes,2,opt,name=gorm_db_url,json=gormDbUrl,proto3" json:"gorm_db_url,omitempty"`          // Example: "username:password@(hostname)/database?charset=utf8mb4&parseTime=True&loc=Local"
	// DACS Integration
	DacsXmitterTcpEndpoint string `protobuf:"bytes,3,opt,name=dacs_xmitter_tcp_endpoint,json=dacsXmitterTcpEndpoint,proto3" json:"dacs_xmitter_tcp_endpoint,omitempty"` // test: 127.0.0.1:9000
	DacsWeightTcpEndpoint  string `protobuf:"bytes,4,opt,name=dacs_weight_tcp_endpoint,json=dacsWeightTcpEndpoint,proto3" json:"dacs_weight_tcp_endpoint,omitempty"`    // test: 127.0.0.1:2000
	// Ultrafly Integration
	MqttUri      string `protobuf:"bytes,5,opt,name=mqtt_uri,json=mqttUri,proto3" json:"mqtt_uri,omitempty"`
	MqttUsername string `protobuf:"bytes,6,opt,name=mqtt_username,json=mqttUsername,proto3" json:"mqtt_username,omitempty"`
	MqttPassword string `protobuf:"bytes,7,opt,name=mqtt_password,json=mqttPassword,proto3" json:"mqtt_password,omitempty"`
	MqttClientId string `protobuf:"bytes,8,opt,name=mqtt_client_id,json=mqttClientId,proto3" json:"mqtt_client_id,omitempty"`
	UksrState    string `protobuf:"bytes,9,opt,name=uksr_state,json=uksrState,proto3" json:"uksr_state,omitempty"`
	MineralPath  string `protobuf:"bytes,10,opt,name=mineral_path,json=mineralPath,proto3" json:"mineral_path,omitempty"` // License path
	WatchZone    string `protobuf:"bytes,11,opt,name=watch_zone,json=watchZone,proto3" json:"watch_zone,omitempty"`       // belt, shelf
	AttachRssi   int32  `protobuf:"varint,12,opt,name=attach_rssi,json=attachRssi,proto3" json:"attach_rssi,omitempty"`
	DetachRssi   int32  `protobuf:"varint,13,opt,name=detach_rssi,json=detachRssi,proto3" json:"detach_rssi,omitempty"`
	// Extra inventory rounds after Box trigger
	InventorySettlingRounds int32 `protobuf:"varint,15,opt,name=inventory_settling_rounds,json=inventorySettlingRounds,proto3" json:"inventory_settling_rounds,omitempty"` // typically 1 to be sure, but can reduce to 0 if single antenna
	// Which gpio in/out (ultrafly v0.6: Avoid A & B in case of Rpi Kernel update which reactivates i2c-0 on boot for pi hat scan
	ProceedRelayLetter         string                 `protobuf:"bytes,20,opt,name=proceed_relay_letter,json=proceedRelayLetter,proto3" json:"proceed_relay_letter,omitempty"`                                                                                   // Typically D (closest to Pi)
	ProceedRelayNegativeLogic  bool                   `protobuf:"varint,21,opt,name=proceed_relay_negative_logic,json=proceedRelayNegativeLogic,proto3" json:"proceed_relay_negative_logic,omitempty"`                                                           // Typically false since that activates relay to close which is what ishida wants
	ProceedRelayPulseMs        uint32                 `protobuf:"varint,22,opt,name=proceed_relay_pulse_ms,json=proceedRelayPulseMs,proto3" json:"proceed_relay_pulse_ms,omitempty"`                                                                             // Miliseconds pulse duration
	ErrorRelayLetter           string                 `protobuf:"bytes,30,opt,name=error_relay_letter,json=errorRelayLetter,proto3" json:"error_relay_letter,omitempty"`                                                                                         // Typically C (next closest to Pi)
	ErrorRelayNegativeLogic    bool                   `protobuf:"varint,31,opt,name=error_relay_negative_logic,json=errorRelayNegativeLogic,proto3" json:"error_relay_negative_logic,omitempty"`                                                                 // Typically false since that activates relay to close which is what ishida wants
	ErrorRelayPulseMs          uint32                 `protobuf:"varint,32,opt,name=error_relay_pulse_ms,json=errorRelayPulseMs,proto3" json:"error_relay_pulse_ms,omitempty"`                                                                                   // Miliseconds pulse duration
	TagOkRelayLetter           string                 `protobuf:"bytes,35,opt,name=tag_ok_relay_letter,json=tagOkRelayLetter,proto3" json:"tag_ok_relay_letter,omitempty"`                                                                                       // Typically C (next closest to Pi)
	TagOkRelayNegativeLogic    bool                   `protobuf:"varint,36,opt,name=tag_ok_relay_negative_logic,json=tagOkRelayNegativeLogic,proto3" json:"tag_ok_relay_negative_logic,omitempty"`                                                               // Typically false since that activates relay to close which is what ishida wants
	TagOkRelayPulseMs          uint32                 `protobuf:"varint,37,opt,name=tag_ok_relay_pulse_ms,json=tagOkRelayPulseMs,proto3" json:"tag_ok_relay_pulse_ms,omitempty"`                                                                                 // Miliseconds pulse duration
	BoxInputLetter             string                 `protobuf:"bytes,41,opt,name=box_input_letter,json=boxInputLetter,proto3" json:"box_input_letter,omitempty"`                                                                                               // Typically H (closest to Pi)
	BoxInputNegativeLogic      bool                   `protobuf:"varint,42,opt,name=box_input_negative_logic,json=boxInputNegativeLogic,proto3" json:"box_input_negative_logic,omitempty"`                                                                       // Typically false since that activates relay to close which is what ishida wants
	BoxRelayPulseMs            uint32                 `protobuf:"varint,43,opt,name=box_relay_pulse_ms,json=boxRelayPulseMs,proto3" json:"box_relay_pulse_ms,omitempty"`                                                                                         // Miliseconds pulse duration
	EnableOled                 bool                   `protobuf:"varint,50,opt,name=enable_oled,json=enableOled,proto3" json:"enable_oled,omitempty"`                                                                                                            // Do we expect oled on i2c
	EnableLcd1602              bool                   `protobuf:"varint,51,opt,name=enable_lcd1602,json=enableLcd1602,proto3" json:"enable_lcd1602,omitempty"`                                                                                                   // Do we expect 16x2 LCD?
	EnableHdmi                 bool                   `protobuf:"varint,52,opt,name=enable_hdmi,json=enableHdmi,proto3" json:"enable_hdmi,omitempty"`                                                                                                            // Do we expect HDMI display to load JS UI?
	DacsCmdPDefaults           *v1.DacsCmdP           `protobuf:"bytes,60,opt,name=dacs_cmd_p_defaults,json=dacsCmdPDefaults,proto3" json:"dacs_cmd_p_defaults,omitempty"`                                                                                       // Template Object
	DacsRedoPresetCmdPDefaults *v1.DacsCmdP           `protobuf:"bytes,61,opt,name=dacs_redo_preset_cmd_p_defaults,json=dacsRedoPresetCmdPDefaults,proto3" json:"dacs_redo_preset_cmd_p_defaults,omitempty"`                                                     // Template Object
	DacsCmdPPresets            map[int32]*v1.DacsCmdP `protobuf:"bytes,62,rep,name=dacs_cmd_p_presets,json=dacsCmdPPresets,proto3" json:"dacs_cmd_p_presets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // For each Preset = int(####) have a DacsCmdP to apply as a preset; If not found, default back to dacs_cmd_p_defaults
	OneshelfConfig             *v11.OneshelfConfig    `protobuf:"bytes,99,opt,name=oneshelf_config,json=oneshelfConfig,proto3" json:"oneshelf_config,omitempty"`                                                                                                 // dummy
	BoxLogSyncUrl              string                 `protobuf:"bytes,100,opt,name=box_log_sync_url,json=boxLogSyncUrl,proto3" json:"box_log_sync_url,omitempty"`                                                                                               // URL to send boxlog data to
	DebugDacsCmdAt             bool                   `protobuf:"varint,110,opt,name=debug_dacs_cmd_at,json=debugDacsCmdAt,proto3" json:"debug_dacs_cmd_at,omitempty"`                                                                                           // while event loop is idle poll dacs @->9 response
}

func (x *FfruitConfig) Reset() {
	*x = FfruitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfruitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfruitConfig) ProtoMessage() {}

func (x *FfruitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfruitConfig.ProtoReflect.Descriptor instead.
func (*FfruitConfig) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{0}
}

func (x *FfruitConfig) GetGormDbEngine() string {
	if x != nil {
		return x.GormDbEngine
	}
	return ""
}

func (x *FfruitConfig) GetGormDbUrl() string {
	if x != nil {
		return x.GormDbUrl
	}
	return ""
}

func (x *FfruitConfig) GetDacsXmitterTcpEndpoint() string {
	if x != nil {
		return x.DacsXmitterTcpEndpoint
	}
	return ""
}

func (x *FfruitConfig) GetDacsWeightTcpEndpoint() string {
	if x != nil {
		return x.DacsWeightTcpEndpoint
	}
	return ""
}

func (x *FfruitConfig) GetMqttUri() string {
	if x != nil {
		return x.MqttUri
	}
	return ""
}

func (x *FfruitConfig) GetMqttUsername() string {
	if x != nil {
		return x.MqttUsername
	}
	return ""
}

func (x *FfruitConfig) GetMqttPassword() string {
	if x != nil {
		return x.MqttPassword
	}
	return ""
}

func (x *FfruitConfig) GetMqttClientId() string {
	if x != nil {
		return x.MqttClientId
	}
	return ""
}

func (x *FfruitConfig) GetUksrState() string {
	if x != nil {
		return x.UksrState
	}
	return ""
}

func (x *FfruitConfig) GetMineralPath() string {
	if x != nil {
		return x.MineralPath
	}
	return ""
}

func (x *FfruitConfig) GetWatchZone() string {
	if x != nil {
		return x.WatchZone
	}
	return ""
}

func (x *FfruitConfig) GetAttachRssi() int32 {
	if x != nil {
		return x.AttachRssi
	}
	return 0
}

func (x *FfruitConfig) GetDetachRssi() int32 {
	if x != nil {
		return x.DetachRssi
	}
	return 0
}

func (x *FfruitConfig) GetInventorySettlingRounds() int32 {
	if x != nil {
		return x.InventorySettlingRounds
	}
	return 0
}

func (x *FfruitConfig) GetProceedRelayLetter() string {
	if x != nil {
		return x.ProceedRelayLetter
	}
	return ""
}

func (x *FfruitConfig) GetProceedRelayNegativeLogic() bool {
	if x != nil {
		return x.ProceedRelayNegativeLogic
	}
	return false
}

func (x *FfruitConfig) GetProceedRelayPulseMs() uint32 {
	if x != nil {
		return x.ProceedRelayPulseMs
	}
	return 0
}

func (x *FfruitConfig) GetErrorRelayLetter() string {
	if x != nil {
		return x.ErrorRelayLetter
	}
	return ""
}

func (x *FfruitConfig) GetErrorRelayNegativeLogic() bool {
	if x != nil {
		return x.ErrorRelayNegativeLogic
	}
	return false
}

func (x *FfruitConfig) GetErrorRelayPulseMs() uint32 {
	if x != nil {
		return x.ErrorRelayPulseMs
	}
	return 0
}

func (x *FfruitConfig) GetTagOkRelayLetter() string {
	if x != nil {
		return x.TagOkRelayLetter
	}
	return ""
}

func (x *FfruitConfig) GetTagOkRelayNegativeLogic() bool {
	if x != nil {
		return x.TagOkRelayNegativeLogic
	}
	return false
}

func (x *FfruitConfig) GetTagOkRelayPulseMs() uint32 {
	if x != nil {
		return x.TagOkRelayPulseMs
	}
	return 0
}

func (x *FfruitConfig) GetBoxInputLetter() string {
	if x != nil {
		return x.BoxInputLetter
	}
	return ""
}

func (x *FfruitConfig) GetBoxInputNegativeLogic() bool {
	if x != nil {
		return x.BoxInputNegativeLogic
	}
	return false
}

func (x *FfruitConfig) GetBoxRelayPulseMs() uint32 {
	if x != nil {
		return x.BoxRelayPulseMs
	}
	return 0
}

func (x *FfruitConfig) GetEnableOled() bool {
	if x != nil {
		return x.EnableOled
	}
	return false
}

func (x *FfruitConfig) GetEnableLcd1602() bool {
	if x != nil {
		return x.EnableLcd1602
	}
	return false
}

func (x *FfruitConfig) GetEnableHdmi() bool {
	if x != nil {
		return x.EnableHdmi
	}
	return false
}

func (x *FfruitConfig) GetDacsCmdPDefaults() *v1.DacsCmdP {
	if x != nil {
		return x.DacsCmdPDefaults
	}
	return nil
}

func (x *FfruitConfig) GetDacsRedoPresetCmdPDefaults() *v1.DacsCmdP {
	if x != nil {
		return x.DacsRedoPresetCmdPDefaults
	}
	return nil
}

func (x *FfruitConfig) GetDacsCmdPPresets() map[int32]*v1.DacsCmdP {
	if x != nil {
		return x.DacsCmdPPresets
	}
	return nil
}

func (x *FfruitConfig) GetOneshelfConfig() *v11.OneshelfConfig {
	if x != nil {
		return x.OneshelfConfig
	}
	return nil
}

func (x *FfruitConfig) GetBoxLogSyncUrl() string {
	if x != nil {
		return x.BoxLogSyncUrl
	}
	return ""
}

func (x *FfruitConfig) GetDebugDacsCmdAt() bool {
	if x != nil {
		return x.DebugDacsCmdAt
	}
	return false
}

type FfruitStateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	AntennaNo int32  `protobuf:"varint,2,opt,name=antenna_no,json=antennaNo,proto3" json:"antenna_no,omitempty"`
	State     string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"` // Restart, AwaitBox, ReadTag, SendWeight, AwaitWeight, LogResult, Error
}

func (x *FfruitStateMessage) Reset() {
	*x = FfruitStateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfruitStateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfruitStateMessage) ProtoMessage() {}

func (x *FfruitStateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfruitStateMessage.ProtoReflect.Descriptor instead.
func (*FfruitStateMessage) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{1}
}

func (x *FfruitStateMessage) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *FfruitStateMessage) GetAntennaNo() int32 {
	if x != nil {
		return x.AntennaNo
	}
	return 0
}

func (x *FfruitStateMessage) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type DacsSimEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DacsData   []byte `protobuf:"bytes,1,opt,name=dacs_data,json=dacsData,proto3" json:"dacs_data,omitempty"`
	DacsWeight int32  `protobuf:"varint,2,opt,name=dacs_weight,json=dacsWeight,proto3" json:"dacs_weight,omitempty"`
}

func (x *DacsSimEvent) Reset() {
	*x = DacsSimEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DacsSimEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DacsSimEvent) ProtoMessage() {}

func (x *DacsSimEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DacsSimEvent.ProtoReflect.Descriptor instead.
func (*DacsSimEvent) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{2}
}

func (x *DacsSimEvent) GetDacsData() []byte {
	if x != nil {
		return x.DacsData
	}
	return nil
}

func (x *DacsSimEvent) GetDacsWeight() int32 {
	if x != nil {
		return x.DacsWeight
	}
	return 0
}

type BoxSimEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arrived int32 `protobuf:"varint,1,opt,name=arrived,proto3" json:"arrived,omitempty"`
}

func (x *BoxSimEvent) Reset() {
	*x = BoxSimEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxSimEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxSimEvent) ProtoMessage() {}

func (x *BoxSimEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxSimEvent.ProtoReflect.Descriptor instead.
func (*BoxSimEvent) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{3}
}

func (x *BoxSimEvent) GetArrived() int32 {
	if x != nil {
		return x.Arrived
	}
	return 0
}

type FfruitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`     // Inform UI about Error Problem
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Just annoucing state
}

func (x *FfruitStatus) Reset() {
	*x = FfruitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfruitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfruitStatus) ProtoMessage() {}

func (x *FfruitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfruitStatus.ProtoReflect.Descriptor instead.
func (*FfruitStatus) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{4}
}

func (x *FfruitStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FfruitStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Add application signature to EPC Bank
type FfruitSignEpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc   string `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"` // HexString (must decode if you want Binary)
	AppId []byte `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Key   []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"` // Typically not provided because setup_fruit can determine based on AppId
}

func (x *FfruitSignEpc) Reset() {
	*x = FfruitSignEpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfruitSignEpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfruitSignEpc) ProtoMessage() {}

func (x *FfruitSignEpc) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfruitSignEpc.ProtoReflect.Descriptor instead.
func (*FfruitSignEpc) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{5}
}

func (x *FfruitSignEpc) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *FfruitSignEpc) GetAppId() []byte {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *FfruitSignEpc) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// Add signed tag to our database of recognized tags (useful for factory to detect strange tag insert)
type FfruitRegisterBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc   string `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"` // HexString (must decode if you want Binary)
	AppId []byte `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *FfruitRegisterBox) Reset() {
	*x = FfruitRegisterBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfruitRegisterBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfruitRegisterBox) ProtoMessage() {}

func (x *FfruitRegisterBox) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfruitRegisterBox.ProtoReflect.Descriptor instead.
func (*FfruitRegisterBox) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{6}
}

func (x *FfruitRegisterBox) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *FfruitRegisterBox) GetAppId() []byte {
	if x != nil {
		return x.AppId
	}
	return nil
}

// Fill User Bank with default info
type FfruitUserBankInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc   string `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"` // HexString (must decode if you want Binary)
	AppId []byte `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *FfruitUserBankInit) Reset() {
	*x = FfruitUserBankInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ffruit_v1_ffruit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FfruitUserBankInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfruitUserBankInit) ProtoMessage() {}

func (x *FfruitUserBankInit) ProtoReflect() protoreflect.Message {
	mi := &file_ffruit_v1_ffruit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfruitUserBankInit.ProtoReflect.Descriptor instead.
func (*FfruitUserBankInit) Descriptor() ([]byte, []int) {
	return file_ffruit_v1_ffruit_proto_rawDescGZIP(), []int{7}
}

func (x *FfruitUserBankInit) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *FfruitUserBankInit) GetAppId() []byte {
	if x != nil {
		return x.AppId
	}
	return nil
}

var File_ffruit_v1_ffruit_proto protoreflect.FileDescriptor

var file_ffruit_v1_ffruit_proto_rawDesc = []byte{
	0x0a, 0x16, 0x66, 0x66, 0x72, 0x75, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x66, 0x72, 0x75,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x66, 0x66, 0x72, 0x75, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x12, 0x64, 0x61, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c,
	0x66, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x0d, 0x0a, 0x0c, 0x46, 0x66, 0x72, 0x75, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6f,
	0x72, 0x6d, 0x44, 0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x6f,
	0x72, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x6f, 0x72, 0x6d, 0x44, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x61,
	0x63, 0x73, 0x5f, 0x78, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64,
	0x61, 0x63, 0x73, 0x58, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x63, 0x70, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x61, 0x63, 0x73, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x61, 0x63, 0x73, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x63, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x71, 0x74, 0x74, 0x55, 0x72, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x71, 0x74,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6b, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x6b, 0x73, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x73, 0x73, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x73, 0x73, 0x69, 0x12, 0x3a, 0x0a, 0x19,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x1a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x74, 0x61, 0x67, 0x5f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x67, 0x4f, 0x6b,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x74,
	0x61, 0x67, 0x5f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x74, 0x61, 0x67, 0x4f, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x61, 0x67,
	0x5f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x67, 0x4f, 0x6b, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x2b,
	0x0a, 0x12, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6f, 0x78, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6c, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x63, 0x64, 0x31, 0x36, 0x30, 0x32, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x63, 0x64, 0x31,
	0x36, 0x30, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x64,
	0x6d, 0x69, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x64, 0x6d, 0x69, 0x12, 0x40, 0x0a, 0x13, 0x64, 0x61, 0x63, 0x73, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x63, 0x73,
	0x43, 0x6d, 0x64, 0x50, 0x52, 0x10, 0x64, 0x61, 0x63, 0x73, 0x43, 0x6d, 0x64, 0x50, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x1f, 0x64, 0x61, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x64, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x70,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x61, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x63, 0x73, 0x43, 0x6d,
	0x64, 0x50, 0x52, 0x1a, 0x64, 0x61, 0x63, 0x73, 0x52, 0x65, 0x64, 0x6f, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x6d, 0x64, 0x50, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x59,
	0x0a, 0x12, 0x64, 0x61, 0x63, 0x73, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x66, 0x72,
	0x75, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x66, 0x72, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x63, 0x73, 0x43, 0x6d, 0x64, 0x50, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x61, 0x63, 0x73, 0x43, 0x6d,
	0x64, 0x50, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x6e, 0x65,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x0a, 0x10, 0x62, 0x6f, 0x78, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x78, 0x4c, 0x6f,
	0x67, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x64, 0x61, 0x63, 0x73, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x44, 0x61, 0x63, 0x73, 0x43, 0x6d,
	0x64, 0x41, 0x74, 0x1a, 0x55, 0x0a, 0x14, 0x44, 0x61, 0x63, 0x73, 0x43, 0x6d, 0x64, 0x50, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x61, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x63, 0x73, 0x43, 0x6d, 0x64, 0x50, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x12, 0x46, 0x66,
	0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x0c, 0x44,
	0x61, 0x63, 0x73, 0x53, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x61, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x63, 0x73,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x61, 0x63, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x27, 0x0a, 0x0b, 0x42, 0x6f, 0x78,
	0x53, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x22, 0x3e, 0x0a, 0x0c, 0x46, 0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4a, 0x0a, 0x0d, 0x46, 0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x45, 0x70, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3c,
	0x0a, 0x11, 0x46, 0x66, 0x72, 0x75, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x12,
	0x46, 0x66, 0x72, 0x75, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x2a, 0x36, 0x0a, 0x14, 0x46,
	0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x44, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x10, 0x01, 0x42, 0x15, 0x5a, 0x13, 0x66, 0x66, 0x72, 0x75, 0x69, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x66, 0x66, 0x72, 0x75, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ffruit_v1_ffruit_proto_rawDescOnce sync.Once
	file_ffruit_v1_ffruit_proto_rawDescData = file_ffruit_v1_ffruit_proto_rawDesc
)

func file_ffruit_v1_ffruit_proto_rawDescGZIP() []byte {
	file_ffruit_v1_ffruit_proto_rawDescOnce.Do(func() {
		file_ffruit_v1_ffruit_proto_rawDescData = protoimpl.X.CompressGZIP(file_ffruit_v1_ffruit_proto_rawDescData)
	})
	return file_ffruit_v1_ffruit_proto_rawDescData
}

var file_ffruit_v1_ffruit_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ffruit_v1_ffruit_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ffruit_v1_ffruit_proto_goTypes = []interface{}{
	(FfruitSpecialCommand)(0),  // 0: ffruit.v1.FfruitSpecialCommand
	(*FfruitConfig)(nil),       // 1: ffruit.v1.FfruitConfig
	(*FfruitStateMessage)(nil), // 2: ffruit.v1.FfruitStateMessage
	(*DacsSimEvent)(nil),       // 3: ffruit.v1.DacsSimEvent
	(*BoxSimEvent)(nil),        // 4: ffruit.v1.BoxSimEvent
	(*FfruitStatus)(nil),       // 5: ffruit.v1.FfruitStatus
	(*FfruitSignEpc)(nil),      // 6: ffruit.v1.FfruitSignEpc
	(*FfruitRegisterBox)(nil),  // 7: ffruit.v1.FfruitRegisterBox
	(*FfruitUserBankInit)(nil), // 8: ffruit.v1.FfruitUserBankInit
	nil,                        // 9: ffruit.v1.FfruitConfig.DacsCmdPPresetsEntry
	(*v1.DacsCmdP)(nil),        // 10: dacs.v1.DacsCmdP
	(*v11.OneshelfConfig)(nil), // 11: oneshelf.v1.OneshelfConfig
}
var file_ffruit_v1_ffruit_proto_depIdxs = []int32{
	10, // 0: ffruit.v1.FfruitConfig.dacs_cmd_p_defaults:type_name -> dacs.v1.DacsCmdP
	10, // 1: ffruit.v1.FfruitConfig.dacs_redo_preset_cmd_p_defaults:type_name -> dacs.v1.DacsCmdP
	9,  // 2: ffruit.v1.FfruitConfig.dacs_cmd_p_presets:type_name -> ffruit.v1.FfruitConfig.DacsCmdPPresetsEntry
	11, // 3: ffruit.v1.FfruitConfig.oneshelf_config:type_name -> oneshelf.v1.OneshelfConfig
	10, // 4: ffruit.v1.FfruitConfig.DacsCmdPPresetsEntry.value:type_name -> dacs.v1.DacsCmdP
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_ffruit_v1_ffruit_proto_init() }
func file_ffruit_v1_ffruit_proto_init() {
	if File_ffruit_v1_ffruit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ffruit_v1_ffruit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfruitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffruit_v1_ffruit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfruitStateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffruit_v1_ffruit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DacsSimEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffruit_v1_ffruit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxSimEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffruit_v1_ffruit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfruitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffruit_v1_ffruit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfruitSignEpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffruit_v1_ffruit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfruitRegisterBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ffruit_v1_ffruit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FfruitUserBankInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ffruit_v1_ffruit_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ffruit_v1_ffruit_proto_goTypes,
		DependencyIndexes: file_ffruit_v1_ffruit_proto_depIdxs,
		EnumInfos:         file_ffruit_v1_ffruit_proto_enumTypes,
		MessageInfos:      file_ffruit_v1_ffruit_proto_msgTypes,
	}.Build()
	File_ffruit_v1_ffruit_proto = out.File
	file_ffruit_v1_ffruit_proto_rawDesc = nil
	file_ffruit_v1_ffruit_proto_goTypes = nil
	file_ffruit_v1_ffruit_proto_depIdxs = nil
}
