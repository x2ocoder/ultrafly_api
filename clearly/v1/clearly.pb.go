// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: clearly/v1/clearly.proto

package clearly_v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Dfev2_Command int32

const (
	Dfev2_DEBUG            Dfev2_Command = 0 // D40 2TDEA Auth Only
	Dfev2_EZ_BATCH_COMMAND Dfev2_Command = 58288
	Dfev2_EZ_MASTER_SETUP  Dfev2_Command = 58034 // Converts DFEV2 from DES->EV2 AES Diversified MasterPICC Key
	Dfev2_EZ_AUTH_APP      Dfev2_Command = 58036 // Auth App 0x112233 with KeyRing X, KeyVer Y, with Protocol KeyX.Proto
	Dfev2_EZ_APP_ENSURE    Dfev2_Command = 58037 // Creates application with reasonable keyset defaults according to keystore setup
	Dfev2_AUTH_2TDEA       Dfev2_Command = 57889 // D40 2TDEA Auth Only // Default delivery format
	Dfev2_AUTH_ISO         Dfev2_Command = 57890 // Desfire EV1 2TDEA, 3TDEA
	Dfev2_AUTH_AES         Dfev2_Command = 57891 // Desfire EV1 AES Mode (Secure Messaging)
	Dfev2_AUTH_EV2_FIRST   Dfev2_Command = 57892 // Desfire EV2 First Auth AES Mode (Secure Messaging + Message Counter)
	// AUTH_EV2_NEXT                = 0xE225;  // Desfire EV2 Non-First Auth (Secure Messaging + Msg Counter Increment) -- Just use AUTH_EV2_FIRST firstAuth = 0
	Dfev2_AUTH_MASTER_DEFAULT            Dfev2_Command = 58033 // Typically if this works, you want to immediately secure the card with EZ_MASTER_SETUP
	Dfev2_AUTH_MASTER_DIVERSIFIED_EV2    Dfev2_Command = 58035
	Dfev2_GET_FREEMEM                    Dfev2_Command = 57905 // For request, just send empty PB, respond with filled PB
	Dfev2_FORMAT_CARD                    Dfev2_Command = 57906 // The only way to free memory on Desfire (other than deleting delegated app)
	Dfev2_SET_CONFIURATION               Dfev2_Command = 57907 // 7.3.3 SetConfiguration, 6.4.3.1 SetConfiguration Command - Highly variable option + option.data[25]
	Dfev2_GET_VERSION                    Dfev2_Command = 57908 // For request, just send empty PB, respond with filled PB
	Dfev2_GET_UID                        Dfev2_Command = 57909 // For request, just send empty PB, respond with filled PB
	Dfev2_CHANGE_KEY                     Dfev2_Command = 57921 // More general like for first PICCMaster Change
	Dfev2_CHANGE_KEY_EV2                 Dfev2_Command = 57922 // AppliationKeySet specific changes (multiple AKS version targets)
	Dfev2_INITIALIZE_KEY_SET             Dfev2_Command = 57923 // AppliationKeySet specific changes (multiple AKS version targets)
	Dfev2_FINALIZE_KEY_SET               Dfev2_Command = 57924 // AppliationKeySet specific changes (multiple AKS version targets)
	Dfev2_ROLL_KEY_SET                   Dfev2_Command = 57925 // AppliationKeySet specific changes (multiple AKS version targets)
	Dfev2_GET_KEY_SETTINGS               Dfev2_Command = 57926 // For request, just send empty PB, respond with filled PB
	Dfev2_CHANGE_KEY_SETTINGS            Dfev2_Command = 57927 // For request, just send empty PB, respond with filled PB
	Dfev2_GET_KEY_VERSION                Dfev2_Command = 57928 // For request, just send empty PB, respond with filled PB
	Dfev2_APP_CREATE                     Dfev2_Command = 57937 // 6.5.5.2 Application Keys -- Table 17. Keys at application level
	Dfev2_APP_DELETE                     Dfev2_Command = 57938
	Dfev2_APP_CREATE_DELEGATED           Dfev2_Command = 57939 // 6.6.2.2 For delegated application creation, the PICC level (AID 0x000000)
	Dfev2_APP_SELECT                     Dfev2_Command = 57940
	Dfev2_APP_GET_IDS                    Dfev2_Command = 57941
	Dfev2_APP_GET_DFNAMES                Dfev2_Command = 57942
	Dfev2_APP_GET_DELETEGATED_INFO       Dfev2_Command = 57943
	Dfev2_FILE_CREATE_STD                Dfev2_Command = 57953
	Dfev2_FILE_CREATE_BACKUP             Dfev2_Command = 57954
	Dfev2_FILE_CREATE_VALUE              Dfev2_Command = 57955
	Dfev2_FILE_CREATE_LINEAR             Dfev2_Command = 57956
	Dfev2_FILE_CREATE_CYCLIC             Dfev2_Command = 57957
	Dfev2_FILE_CREATE_TXNMAC             Dfev2_Command = 57958
	Dfev2_FILE_DELETE                    Dfev2_Command = 57959
	Dfev2_FILE_GET_IDS                   Dfev2_Command = 57960 // For request, just send empty PB, respond with filled PB
	Dfev2_FILE_GET_ISOIDS                Dfev2_Command = 57961 // For request, just send empty PB, respond with filled PB
	Dfev2_FILE_GET_SETTINGS              Dfev2_Command = 57962 // For request, just send empty PB, respond with filled PB
	Dfev2_FILE_CHANGE_SETTINGS           Dfev2_Command = 57963
	Dfev2_DATA_READ                      Dfev2_Command = 57969
	Dfev2_DATA_WRITE                     Dfev2_Command = 57970
	Dfev2_DATA_GET_VALUE                 Dfev2_Command = 57971
	Dfev2_DATA_CREDIT                    Dfev2_Command = 57972
	Dfev2_DATA_LIMITED_CREDIT            Dfev2_Command = 57973
	Dfev2_DATA_DEBIT                     Dfev2_Command = 57974
	Dfev2_DATA_READ_RECORDS              Dfev2_Command = 57975
	Dfev2_DATA_WRITE_RECORD              Dfev2_Command = 57976
	Dfev2_DATA_UPDATE_RECORD             Dfev2_Command = 57977
	Dfev2_DATA_CLEAR_RECORD_FILE         Dfev2_Command = 57978
	Dfev2_EZ_READ_RECORDS                Dfev2_Command = 58231
	Dfev2_EZ_READ_RECORDS_REVERSE        Dfev2_Command = 58232
	Dfev2_SAFETY_TIMED_DATA_WRITE_RECORD Dfev2_Command = 58488
	Dfev2_TXN_COMMIT                     Dfev2_Command = 57985
	Dfev2_TXN_ABORT                      Dfev2_Command = 57986
	Dfev2_TXN_COMMIT_READER_ID           Dfev2_Command = 57987
	// ISO 7.9.x SKIP
	// VC 7.10.x SKIP
	// Prox 7.11.x EZ
	Dfev2_EZ_CONFIRM_PROX_CHECK Dfev2_Command = 58291
	Dfev2_READ_SIG              Dfev2_Command = 58049
)

// Enum value maps for Dfev2_Command.
var (
	Dfev2_Command_name = map[int32]string{
		0:     "DEBUG",
		58288: "EZ_BATCH_COMMAND",
		58034: "EZ_MASTER_SETUP",
		58036: "EZ_AUTH_APP",
		58037: "EZ_APP_ENSURE",
		57889: "AUTH_2TDEA",
		57890: "AUTH_ISO",
		57891: "AUTH_AES",
		57892: "AUTH_EV2_FIRST",
		58033: "AUTH_MASTER_DEFAULT",
		58035: "AUTH_MASTER_DIVERSIFIED_EV2",
		57905: "GET_FREEMEM",
		57906: "FORMAT_CARD",
		57907: "SET_CONFIURATION",
		57908: "GET_VERSION",
		57909: "GET_UID",
		57921: "CHANGE_KEY",
		57922: "CHANGE_KEY_EV2",
		57923: "INITIALIZE_KEY_SET",
		57924: "FINALIZE_KEY_SET",
		57925: "ROLL_KEY_SET",
		57926: "GET_KEY_SETTINGS",
		57927: "CHANGE_KEY_SETTINGS",
		57928: "GET_KEY_VERSION",
		57937: "APP_CREATE",
		57938: "APP_DELETE",
		57939: "APP_CREATE_DELEGATED",
		57940: "APP_SELECT",
		57941: "APP_GET_IDS",
		57942: "APP_GET_DFNAMES",
		57943: "APP_GET_DELETEGATED_INFO",
		57953: "FILE_CREATE_STD",
		57954: "FILE_CREATE_BACKUP",
		57955: "FILE_CREATE_VALUE",
		57956: "FILE_CREATE_LINEAR",
		57957: "FILE_CREATE_CYCLIC",
		57958: "FILE_CREATE_TXNMAC",
		57959: "FILE_DELETE",
		57960: "FILE_GET_IDS",
		57961: "FILE_GET_ISOIDS",
		57962: "FILE_GET_SETTINGS",
		57963: "FILE_CHANGE_SETTINGS",
		57969: "DATA_READ",
		57970: "DATA_WRITE",
		57971: "DATA_GET_VALUE",
		57972: "DATA_CREDIT",
		57973: "DATA_LIMITED_CREDIT",
		57974: "DATA_DEBIT",
		57975: "DATA_READ_RECORDS",
		57976: "DATA_WRITE_RECORD",
		57977: "DATA_UPDATE_RECORD",
		57978: "DATA_CLEAR_RECORD_FILE",
		58231: "EZ_READ_RECORDS",
		58232: "EZ_READ_RECORDS_REVERSE",
		58488: "SAFETY_TIMED_DATA_WRITE_RECORD",
		57985: "TXN_COMMIT",
		57986: "TXN_ABORT",
		57987: "TXN_COMMIT_READER_ID",
		58291: "EZ_CONFIRM_PROX_CHECK",
		58049: "READ_SIG",
	}
	Dfev2_Command_value = map[string]int32{
		"DEBUG":                          0,
		"EZ_BATCH_COMMAND":               58288,
		"EZ_MASTER_SETUP":                58034,
		"EZ_AUTH_APP":                    58036,
		"EZ_APP_ENSURE":                  58037,
		"AUTH_2TDEA":                     57889,
		"AUTH_ISO":                       57890,
		"AUTH_AES":                       57891,
		"AUTH_EV2_FIRST":                 57892,
		"AUTH_MASTER_DEFAULT":            58033,
		"AUTH_MASTER_DIVERSIFIED_EV2":    58035,
		"GET_FREEMEM":                    57905,
		"FORMAT_CARD":                    57906,
		"SET_CONFIURATION":               57907,
		"GET_VERSION":                    57908,
		"GET_UID":                        57909,
		"CHANGE_KEY":                     57921,
		"CHANGE_KEY_EV2":                 57922,
		"INITIALIZE_KEY_SET":             57923,
		"FINALIZE_KEY_SET":               57924,
		"ROLL_KEY_SET":                   57925,
		"GET_KEY_SETTINGS":               57926,
		"CHANGE_KEY_SETTINGS":            57927,
		"GET_KEY_VERSION":                57928,
		"APP_CREATE":                     57937,
		"APP_DELETE":                     57938,
		"APP_CREATE_DELEGATED":           57939,
		"APP_SELECT":                     57940,
		"APP_GET_IDS":                    57941,
		"APP_GET_DFNAMES":                57942,
		"APP_GET_DELETEGATED_INFO":       57943,
		"FILE_CREATE_STD":                57953,
		"FILE_CREATE_BACKUP":             57954,
		"FILE_CREATE_VALUE":              57955,
		"FILE_CREATE_LINEAR":             57956,
		"FILE_CREATE_CYCLIC":             57957,
		"FILE_CREATE_TXNMAC":             57958,
		"FILE_DELETE":                    57959,
		"FILE_GET_IDS":                   57960,
		"FILE_GET_ISOIDS":                57961,
		"FILE_GET_SETTINGS":              57962,
		"FILE_CHANGE_SETTINGS":           57963,
		"DATA_READ":                      57969,
		"DATA_WRITE":                     57970,
		"DATA_GET_VALUE":                 57971,
		"DATA_CREDIT":                    57972,
		"DATA_LIMITED_CREDIT":            57973,
		"DATA_DEBIT":                     57974,
		"DATA_READ_RECORDS":              57975,
		"DATA_WRITE_RECORD":              57976,
		"DATA_UPDATE_RECORD":             57977,
		"DATA_CLEAR_RECORD_FILE":         57978,
		"EZ_READ_RECORDS":                58231,
		"EZ_READ_RECORDS_REVERSE":        58232,
		"SAFETY_TIMED_DATA_WRITE_RECORD": 58488,
		"TXN_COMMIT":                     57985,
		"TXN_ABORT":                      57986,
		"TXN_COMMIT_READER_ID":           57987,
		"EZ_CONFIRM_PROX_CHECK":          58291,
		"READ_SIG":                       58049,
	}
)

func (x Dfev2_Command) Enum() *Dfev2_Command {
	p := new(Dfev2_Command)
	*p = x
	return p
}

func (x Dfev2_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dfev2_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_clearly_v1_clearly_proto_enumTypes[0].Descriptor()
}

func (Dfev2_Command) Type() protoreflect.EnumType {
	return &file_clearly_v1_clearly_proto_enumTypes[0]
}

func (x Dfev2_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dfev2_Command.Descriptor instead.
func (Dfev2_Command) EnumDescriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{1, 0}
}

type Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	I1  int32  `protobuf:"varint,10,opt,name=i1,proto3" json:"i1,omitempty"`
	I2  int32  `protobuf:"varint,11,opt,name=i2,proto3" json:"i2,omitempty"`
	I3  int32  `protobuf:"varint,12,opt,name=i3,proto3" json:"i3,omitempty"`
	I4  int32  `protobuf:"varint,13,opt,name=i4,proto3" json:"i4,omitempty"`
}

func (x *Debug) Reset() {
	*x = Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debug) ProtoMessage() {}

func (x *Debug) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debug.ProtoReflect.Descriptor instead.
func (*Debug) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{0}
}

func (x *Debug) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Debug) GetI1() int32 {
	if x != nil {
		return x.I1
	}
	return 0
}

func (x *Debug) GetI2() int32 {
	if x != nil {
		return x.I2
	}
	return 0
}

func (x *Debug) GetI3() int32 {
	if x != nil {
		return x.I3
	}
	return 0
}

func (x *Debug) GetI4() int32 {
	if x != nil {
		return x.I4
	}
	return 0
}

// All commands sent to clr/%s/c/dfev2
type Dfev2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command      Dfev2_Command `protobuf:"varint,1,opt,name=command,proto3,enum=clearly.v1.Dfev2_Command" json:"command,omitempty"` // id for when string is missing - faster transmission
	Commands     []*Dfev2      `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	PingId       int32         `protobuf:"varint,3,opt,name=ping_id,json=pingId,proto3" json:"ping_id,omitempty"`                   // echo back in response
	PongId       int32         `protobuf:"varint,4,opt,name=pong_id,json=pongId,proto3" json:"pong_id,omitempty"`                   // echo back in response
	Success      bool          `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`                               // Used in response packet
	ErrorCode    int32         `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`          // Used in response packet
	FailPosition int32         `protobuf:"varint,7,opt,name=fail_position,json=failPosition,proto3" json:"fail_position,omitempty"` // 0 index of failed command in batch
	HintDeauthed bool          `protobuf:"varint,8,opt,name=hint_deauthed,json=hintDeauthed,proto3" json:"hint_deauthed,omitempty"` // if you get this, you better reauth
	Uid          []byte        `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`                                        // card uid for clarity and ease of use
	// 32bit embedded system so most likely 32 bit int is sufficient
	I1 int32  `protobuf:"varint,11,opt,name=i1,proto3" json:"i1,omitempty"`
	I2 int32  `protobuf:"varint,12,opt,name=i2,proto3" json:"i2,omitempty"`
	I3 int32  `protobuf:"varint,13,opt,name=i3,proto3" json:"i3,omitempty"`
	I4 int32  `protobuf:"varint,14,opt,name=i4,proto3" json:"i4,omitempty"`
	I5 int32  `protobuf:"varint,15,opt,name=i5,proto3" json:"i5,omitempty"`
	I6 int32  `protobuf:"varint,16,opt,name=i6,proto3" json:"i6,omitempty"`
	I7 int32  `protobuf:"varint,17,opt,name=i7,proto3" json:"i7,omitempty"`
	I8 int32  `protobuf:"varint,18,opt,name=i8,proto3" json:"i8,omitempty"`
	I9 int32  `protobuf:"varint,19,opt,name=i9,proto3" json:"i9,omitempty"`
	B1 []byte `protobuf:"bytes,21,opt,name=b1,proto3" json:"b1,omitempty"`
	B2 []byte `protobuf:"bytes,22,opt,name=b2,proto3" json:"b2,omitempty"`
	B3 []byte `protobuf:"bytes,23,opt,name=b3,proto3" json:"b3,omitempty"`
	B4 []byte `protobuf:"bytes,24,opt,name=b4,proto3" json:"b4,omitempty"`
	S1 string `protobuf:"bytes,31,opt,name=s1,proto3" json:"s1,omitempty"`
	S2 string `protobuf:"bytes,32,opt,name=s2,proto3" json:"s2,omitempty"`
	S3 string `protobuf:"bytes,33,opt,name=s3,proto3" json:"s3,omitempty"`
	S4 string `protobuf:"bytes,34,opt,name=s4,proto3" json:"s4,omitempty"`
}

func (x *Dfev2) Reset() {
	*x = Dfev2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dfev2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dfev2) ProtoMessage() {}

func (x *Dfev2) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dfev2.ProtoReflect.Descriptor instead.
func (*Dfev2) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{1}
}

func (x *Dfev2) GetCommand() Dfev2_Command {
	if x != nil {
		return x.Command
	}
	return Dfev2_DEBUG
}

func (x *Dfev2) GetCommands() []*Dfev2 {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Dfev2) GetPingId() int32 {
	if x != nil {
		return x.PingId
	}
	return 0
}

func (x *Dfev2) GetPongId() int32 {
	if x != nil {
		return x.PongId
	}
	return 0
}

func (x *Dfev2) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Dfev2) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *Dfev2) GetFailPosition() int32 {
	if x != nil {
		return x.FailPosition
	}
	return 0
}

func (x *Dfev2) GetHintDeauthed() bool {
	if x != nil {
		return x.HintDeauthed
	}
	return false
}

func (x *Dfev2) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Dfev2) GetI1() int32 {
	if x != nil {
		return x.I1
	}
	return 0
}

func (x *Dfev2) GetI2() int32 {
	if x != nil {
		return x.I2
	}
	return 0
}

func (x *Dfev2) GetI3() int32 {
	if x != nil {
		return x.I3
	}
	return 0
}

func (x *Dfev2) GetI4() int32 {
	if x != nil {
		return x.I4
	}
	return 0
}

func (x *Dfev2) GetI5() int32 {
	if x != nil {
		return x.I5
	}
	return 0
}

func (x *Dfev2) GetI6() int32 {
	if x != nil {
		return x.I6
	}
	return 0
}

func (x *Dfev2) GetI7() int32 {
	if x != nil {
		return x.I7
	}
	return 0
}

func (x *Dfev2) GetI8() int32 {
	if x != nil {
		return x.I8
	}
	return 0
}

func (x *Dfev2) GetI9() int32 {
	if x != nil {
		return x.I9
	}
	return 0
}

func (x *Dfev2) GetB1() []byte {
	if x != nil {
		return x.B1
	}
	return nil
}

func (x *Dfev2) GetB2() []byte {
	if x != nil {
		return x.B2
	}
	return nil
}

func (x *Dfev2) GetB3() []byte {
	if x != nil {
		return x.B3
	}
	return nil
}

func (x *Dfev2) GetB4() []byte {
	if x != nil {
		return x.B4
	}
	return nil
}

func (x *Dfev2) GetS1() string {
	if x != nil {
		return x.S1
	}
	return ""
}

func (x *Dfev2) GetS2() string {
	if x != nil {
		return x.S2
	}
	return ""
}

func (x *Dfev2) GetS3() string {
	if x != nil {
		return x.S3
	}
	return ""
}

func (x *Dfev2) GetS4() string {
	if x != nil {
		return x.S4
	}
	return ""
}

// Used for Desfire Record Writing to ensure we can quickly determine the age of record we are reading/writing
// Safety since we can safeguard the data for X seconds before we overwrite on a cyclic record
type SafetyRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SafetyRecord) Reset() {
	*x = SafetyRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyRecord) ProtoMessage() {}

func (x *SafetyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyRecord.ProtoReflect.Descriptor instead.
func (*SafetyRecord) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{2}
}

func (x *SafetyRecord) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SafetyRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Ident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chipid string `protobuf:"bytes,1,opt,name=chipid,proto3" json:"chipid,omitempty"`
	// from const esp_app_desc_t *app_desc = esp_ota_get_app_description();
	AppProjectName string `protobuf:"bytes,2,opt,name=app_project_name,json=appProjectName,proto3" json:"app_project_name,omitempty"`
	AppVersion     string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	AppDate        string `protobuf:"bytes,4,opt,name=app_date,json=appDate,proto3" json:"app_date,omitempty"`
	AppTime        string `protobuf:"bytes,5,opt,name=app_time,json=appTime,proto3" json:"app_time,omitempty"`
	AppIdfVer      string `protobuf:"bytes,6,opt,name=app_idf_ver,json=appIdfVer,proto3" json:"app_idf_ver,omitempty"`
}

func (x *Ident) Reset() {
	*x = Ident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ident) ProtoMessage() {}

func (x *Ident) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ident.ProtoReflect.Descriptor instead.
func (*Ident) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{3}
}

func (x *Ident) GetChipid() string {
	if x != nil {
		return x.Chipid
	}
	return ""
}

func (x *Ident) GetAppProjectName() string {
	if x != nil {
		return x.AppProjectName
	}
	return ""
}

func (x *Ident) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Ident) GetAppDate() string {
	if x != nil {
		return x.AppDate
	}
	return ""
}

func (x *Ident) GetAppTime() string {
	if x != nil {
		return x.AppTime
	}
	return ""
}

func (x *Ident) GetAppIdfVer() string {
	if x != nil {
		return x.AppIdfVer
	}
	return ""
}

// Legacy Pipe: GAS|v:3.7|i:-221.2|soc:47.6|cycles:16|age:140|ttf:0|tte:556|bq8:2C|bq9:00,00,00
type Gas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage       float32 `protobuf:"fixed32,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current       float32 `protobuf:"fixed32,2,opt,name=current,proto3" json:"current,omitempty"`
	StateOfCharge float32 `protobuf:"fixed32,3,opt,name=state_of_charge,json=stateOfCharge,proto3" json:"state_of_charge,omitempty"`
	Cycles        uint32  `protobuf:"varint,4,opt,name=cycles,proto3" json:"cycles,omitempty"`
	Age           uint32  `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`
	TimeToFull    uint32  `protobuf:"varint,6,opt,name=time_to_full,json=timeToFull,proto3" json:"time_to_full,omitempty"`
	TimeToEmpty   uint32  `protobuf:"varint,7,opt,name=time_to_empty,json=timeToEmpty,proto3" json:"time_to_empty,omitempty"`
	Bq8           uint32  `protobuf:"varint,18,opt,name=bq8,proto3" json:"bq8,omitempty"`
	Bq9           []byte  `protobuf:"bytes,19,opt,name=bq9,proto3" json:"bq9,omitempty"`
}

func (x *Gas) Reset() {
	*x = Gas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gas) ProtoMessage() {}

func (x *Gas) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gas.ProtoReflect.Descriptor instead.
func (*Gas) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{4}
}

func (x *Gas) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *Gas) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Gas) GetStateOfCharge() float32 {
	if x != nil {
		return x.StateOfCharge
	}
	return 0
}

func (x *Gas) GetCycles() uint32 {
	if x != nil {
		return x.Cycles
	}
	return 0
}

func (x *Gas) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Gas) GetTimeToFull() uint32 {
	if x != nil {
		return x.TimeToFull
	}
	return 0
}

func (x *Gas) GetTimeToEmpty() uint32 {
	if x != nil {
		return x.TimeToEmpty
	}
	return 0
}

func (x *Gas) GetBq8() uint32 {
	if x != nil {
		return x.Bq8
	}
	return 0
}

func (x *Gas) GetBq9() []byte {
	if x != nil {
		return x.Bq9
	}
	return nil
}

// Legacy Pipe: clr/b4e62ddd1ad1/toserver/wifista WIFISTA|BSSID:909F33C7AF46|SSID:OkieDokie|chan1:12|rssi:-21|11b:1|11g:1|11n:1|cc:0000|schan:0|nchan:0
type Wifista struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bssid          string `protobuf:"bytes,1,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Ssid           string `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
	ChannelPrimary uint32 `protobuf:"varint,3,opt,name=channel_primary,json=channelPrimary,proto3" json:"channel_primary,omitempty"`
	Rssi           int32  `protobuf:"varint,4,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Is_11B         bool   `protobuf:"varint,10,opt,name=is_11b,json=is11b,proto3" json:"is_11b,omitempty"`
	Is_11G         bool   `protobuf:"varint,11,opt,name=is_11g,json=is11g,proto3" json:"is_11g,omitempty"`
	Is_11N         bool   `protobuf:"varint,12,opt,name=is_11n,json=is11n,proto3" json:"is_11n,omitempty"`
	Country        string `protobuf:"bytes,20,opt,name=country,proto3" json:"country,omitempty"`
	ChannelStart   uint32 `protobuf:"varint,21,opt,name=channel_start,json=channelStart,proto3" json:"channel_start,omitempty"`
	ChannelCount   uint32 `protobuf:"varint,22,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
}

func (x *Wifista) Reset() {
	*x = Wifista{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wifista) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wifista) ProtoMessage() {}

func (x *Wifista) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wifista.ProtoReflect.Descriptor instead.
func (*Wifista) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{5}
}

func (x *Wifista) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *Wifista) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *Wifista) GetChannelPrimary() uint32 {
	if x != nil {
		return x.ChannelPrimary
	}
	return 0
}

func (x *Wifista) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *Wifista) GetIs_11B() bool {
	if x != nil {
		return x.Is_11B
	}
	return false
}

func (x *Wifista) GetIs_11G() bool {
	if x != nil {
		return x.Is_11G
	}
	return false
}

func (x *Wifista) GetIs_11N() bool {
	if x != nil {
		return x.Is_11N
	}
	return false
}

func (x *Wifista) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Wifista) GetChannelStart() uint32 {
	if x != nil {
		return x.ChannelStart
	}
	return 0
}

func (x *Wifista) GetChannelCount() uint32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

type Activated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Uid  []byte `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Sak  uint32 `protobuf:"varint,3,opt,name=sak,proto3" json:"sak,omitempty"`
	Atqa []byte `protobuf:"bytes,4,opt,name=atqa,proto3" json:"atqa,omitempty"`
}

func (x *Activated) Reset() {
	*x = Activated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activated) ProtoMessage() {}

func (x *Activated) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activated.ProtoReflect.Descriptor instead.
func (*Activated) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{6}
}

func (x *Activated) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Activated) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Activated) GetSak() uint32 {
	if x != nil {
		return x.Sak
	}
	return 0
}

func (x *Activated) GetAtqa() []byte {
	if x != nil {
		return x.Atqa
	}
	return nil
}

type Deactivated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid []byte `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Deactivated) Reset() {
	*x = Deactivated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deactivated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deactivated) ProtoMessage() {}

func (x *Deactivated) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deactivated.ProtoReflect.Descriptor instead.
func (*Deactivated) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{7}
}

func (x *Deactivated) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

type LcdDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line1      string `protobuf:"bytes,1,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2      string `protobuf:"bytes,2,opt,name=line2,proto3" json:"line2,omitempty"`
	DurationMs uint32 `protobuf:"varint,3,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	Backlight  bool   `protobuf:"varint,4,opt,name=backlight,proto3" json:"backlight,omitempty"`
}

func (x *LcdDisplay) Reset() {
	*x = LcdDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LcdDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LcdDisplay) ProtoMessage() {}

func (x *LcdDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LcdDisplay.ProtoReflect.Descriptor instead.
func (*LcdDisplay) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{8}
}

func (x *LcdDisplay) GetLine1() string {
	if x != nil {
		return x.Line1
	}
	return ""
}

func (x *LcdDisplay) GetLine2() string {
	if x != nil {
		return x.Line2
	}
	return ""
}

func (x *LcdDisplay) GetDurationMs() uint32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *LcdDisplay) GetBacklight() bool {
	if x != nil {
		return x.Backlight
	}
	return false
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartsAt        uint32 `protobuf:"varint,3,opt,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	EndsAt          uint32 `protobuf:"varint,4,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	RequiredOptions string `protobuf:"bytes,5,opt,name=required_options,json=requiredOptions,proto3" json:"required_options,omitempty"`
	StrikeOptions   string `protobuf:"bytes,6,opt,name=strike_options,json=strikeOptions,proto3" json:"strike_options,omitempty"`
	AllowedOptions  string `protobuf:"bytes,7,opt,name=allowed_options,json=allowedOptions,proto3" json:"allowed_options,omitempty"`
	Code            string `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	ScanLimit       uint32 `protobuf:"varint,9,opt,name=scan_limit,json=scanLimit,proto3" json:"scan_limit,omitempty"`
	MinLevel_1      uint32 `protobuf:"varint,10,opt,name=min_level_1,json=minLevel1,proto3" json:"min_level_1,omitempty"`
	MaxLevel_1      uint32 `protobuf:"varint,11,opt,name=max_level_1,json=maxLevel1,proto3" json:"max_level_1,omitempty"`
	LedOkMs         uint32 `protobuf:"varint,12,opt,name=led_ok_ms,json=ledOkMs,proto3" json:"led_ok_ms,omitempty"`
	LedFailMs       uint32 `protobuf:"varint,13,opt,name=led_fail_ms,json=ledFailMs,proto3" json:"led_fail_ms,omitempty"`
	Price           uint32 `protobuf:"varint,14,opt,name=price,proto3" json:"price,omitempty"`
	StarsAllowed    bool   `protobuf:"varint,15,opt,name=stars_allowed,json=starsAllowed,proto3" json:"stars_allowed,omitempty"`
	StarsPrice      uint32 `protobuf:"varint,16,opt,name=stars_price,json=starsPrice,proto3" json:"stars_price,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{9}
}

func (x *Checkpoint) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Checkpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Checkpoint) GetStartsAt() uint32 {
	if x != nil {
		return x.StartsAt
	}
	return 0
}

func (x *Checkpoint) GetEndsAt() uint32 {
	if x != nil {
		return x.EndsAt
	}
	return 0
}

func (x *Checkpoint) GetRequiredOptions() string {
	if x != nil {
		return x.RequiredOptions
	}
	return ""
}

func (x *Checkpoint) GetStrikeOptions() string {
	if x != nil {
		return x.StrikeOptions
	}
	return ""
}

func (x *Checkpoint) GetAllowedOptions() string {
	if x != nil {
		return x.AllowedOptions
	}
	return ""
}

func (x *Checkpoint) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Checkpoint) GetScanLimit() uint32 {
	if x != nil {
		return x.ScanLimit
	}
	return 0
}

func (x *Checkpoint) GetMinLevel_1() uint32 {
	if x != nil {
		return x.MinLevel_1
	}
	return 0
}

func (x *Checkpoint) GetMaxLevel_1() uint32 {
	if x != nil {
		return x.MaxLevel_1
	}
	return 0
}

func (x *Checkpoint) GetLedOkMs() uint32 {
	if x != nil {
		return x.LedOkMs
	}
	return 0
}

func (x *Checkpoint) GetLedFailMs() uint32 {
	if x != nil {
		return x.LedFailMs
	}
	return 0
}

func (x *Checkpoint) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Checkpoint) GetStarsAllowed() bool {
	if x != nil {
		return x.StarsAllowed
	}
	return false
}

func (x *Checkpoint) GetStarsPrice() uint32 {
	if x != nil {
		return x.StarsPrice
	}
	return 0
}

type CheckpointArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoints []*Checkpoint `protobuf:"bytes,1,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
}

func (x *CheckpointArray) Reset() {
	*x = CheckpointArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointArray) ProtoMessage() {}

func (x *CheckpointArray) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointArray.ProtoReflect.Descriptor instead.
func (*CheckpointArray) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{10}
}

func (x *CheckpointArray) GetCheckpoints() []*Checkpoint {
	if x != nil {
		return x.Checkpoints
	}
	return nil
}

type KeySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol            string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`                                                      // AES 128
	Number              uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`                                                         // KeyStore.Key = 1
	Position            uint32 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`                                                     // KeyStore.Key + Position Offset
	Version             uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                                                       // KeyStore.Version = 0 (shove into that Position Offset)
	Rawbytes            []byte `protobuf:"bytes,5,opt,name=rawbytes,proto3" json:"rawbytes,omitempty"`                                                      // Key Bytes in Binary
	Usage               string `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`                                                            // "PICCMaster"
	DiversifyBySwcmac   bool   `protobuf:"varint,10,opt,name=diversify_by_swcmac,json=diversifyBySwcmac,proto3" json:"diversify_by_swcmac,omitempty"`       // Enable Key Diversification by our own CMAC (more modern)
	DiversifyByKeystore bool   `protobuf:"varint,11,opt,name=diversify_by_keystore,json=diversifyByKeystore,proto3" json:"diversify_by_keystore,omitempty"` // Enable NXPReaderLib Key Diversification (does it the stupid old way)
	DiversifyBySamav1   bool   `protobuf:"varint,12,opt,name=diversify_by_samav1,json=diversifyBySamav1,proto3" json:"diversify_by_samav1,omitempty"`       // Enable Key Diversification by SAMAV1
	DiversifyBySamav2   bool   `protobuf:"varint,13,opt,name=diversify_by_samav2,json=diversifyBySamav2,proto3" json:"diversify_by_samav2,omitempty"`       // Enable Key Diversification by SAMAV2
	DiversifyBySamav3   bool   `protobuf:"varint,14,opt,name=diversify_by_samav3,json=diversifyBySamav3,proto3" json:"diversify_by_samav3,omitempty"`       // Enable Key Diversification by SAMAV3
}

func (x *KeySpec) Reset() {
	*x = KeySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySpec) ProtoMessage() {}

func (x *KeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySpec.ProtoReflect.Descriptor instead.
func (*KeySpec) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{11}
}

func (x *KeySpec) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *KeySpec) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *KeySpec) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *KeySpec) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *KeySpec) GetRawbytes() []byte {
	if x != nil {
		return x.Rawbytes
	}
	return nil
}

func (x *KeySpec) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *KeySpec) GetDiversifyBySwcmac() bool {
	if x != nil {
		return x.DiversifyBySwcmac
	}
	return false
}

func (x *KeySpec) GetDiversifyByKeystore() bool {
	if x != nil {
		return x.DiversifyByKeystore
	}
	return false
}

func (x *KeySpec) GetDiversifyBySamav1() bool {
	if x != nil {
		return x.DiversifyBySamav1
	}
	return false
}

func (x *KeySpec) GetDiversifyBySamav2() bool {
	if x != nil {
		return x.DiversifyBySamav2
	}
	return false
}

func (x *KeySpec) GetDiversifyBySamav3() bool {
	if x != nil {
		return x.DiversifyBySamav3
	}
	return false
}

type KeyRing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*KeySpec `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *KeyRing) Reset() {
	*x = KeyRing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clearly_v1_clearly_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRing) ProtoMessage() {}

func (x *KeyRing) ProtoReflect() protoreflect.Message {
	mi := &file_clearly_v1_clearly_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRing.ProtoReflect.Descriptor instead.
func (*KeyRing) Descriptor() ([]byte, []int) {
	return file_clearly_v1_clearly_proto_rawDescGZIP(), []int{12}
}

func (x *KeyRing) GetKeys() []*KeySpec {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_clearly_v1_clearly_proto protoreflect.FileDescriptor

var file_clearly_v1_clearly_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x59, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x33, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x34, 0x22, 0xa0, 0x0f, 0x0a, 0x05, 0x44, 0x66, 0x65, 0x76, 0x32, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x66, 0x65, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x66, 0x65, 0x76, 0x32, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x31, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x32, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x33, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x34, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x35, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x36, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x37, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x37, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x38, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x38, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x39, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x39, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x31, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x62, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x32, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x62, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x33, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x62, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x34, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x62, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x31, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x32, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x34, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x34, 0x22, 0xdb, 0x0a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x10, 0x45, 0x5a, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0xb0, 0xc7, 0x03, 0x12, 0x15, 0x0a, 0x0f, 0x45, 0x5a, 0x5f, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0xb2, 0xc5, 0x03, 0x12, 0x11, 0x0a, 0x0b,
	0x45, 0x5a, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x50, 0x50, 0x10, 0xb4, 0xc5, 0x03, 0x12,
	0x13, 0x0a, 0x0d, 0x45, 0x5a, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x45, 0x4e, 0x53, 0x55, 0x52, 0x45,
	0x10, 0xb5, 0xc5, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x32, 0x54, 0x44,
	0x45, 0x41, 0x10, 0xa1, 0xc4, 0x03, 0x12, 0x0e, 0x0a, 0x08, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x49,
	0x53, 0x4f, 0x10, 0xa2, 0xc4, 0x03, 0x12, 0x0e, 0x0a, 0x08, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x10, 0xa3, 0xc4, 0x03, 0x12, 0x14, 0x0a, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45,
	0x56, 0x32, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0xa4, 0xc4, 0x03, 0x12, 0x19, 0x0a, 0x13,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0xb1, 0xc5, 0x03, 0x12, 0x21, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x45, 0x56, 0x32, 0x10, 0xb3, 0xc5, 0x03, 0x12, 0x11, 0x0a, 0x0b, 0x47, 0x45,
	0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4d, 0x10, 0xb1, 0xc4, 0x03, 0x12, 0x11, 0x0a,
	0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xb2, 0xc4, 0x03,
	0x12, 0x16, 0x0a, 0x10, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb3, 0xc4, 0x03, 0x12, 0x11, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xb4, 0xc4, 0x03, 0x12, 0x0d, 0x0a, 0x07, 0x47,
	0x45, 0x54, 0x5f, 0x55, 0x49, 0x44, 0x10, 0xb5, 0xc4, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0xc1, 0xc4, 0x03, 0x12, 0x14, 0x0a, 0x0e,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x56, 0x32, 0x10, 0xc2,
	0xc4, 0x03, 0x12, 0x18, 0x0a, 0x12, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xc3, 0xc4, 0x03, 0x12, 0x16, 0x0a, 0x10,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0xc4, 0xc4, 0x03, 0x12, 0x12, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0xc5, 0xc4, 0x03, 0x12, 0x16, 0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0xc6, 0xc4, 0x03,
	0x12, 0x19, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0xc7, 0xc4, 0x03, 0x12, 0x15, 0x0a, 0x0f, 0x47,
	0x45, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xc8,
	0xc4, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0xd1, 0xc4, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0xd2, 0xc4, 0x03, 0x12, 0x1a, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0xd3,
	0xc4, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x10, 0xd4, 0xc4, 0x03, 0x12, 0x11, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x49, 0x44, 0x53, 0x10, 0xd5, 0xc4, 0x03, 0x12, 0x15, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x44, 0x46, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0xd6, 0xc4, 0x03, 0x12, 0x1e,
	0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xd7, 0xc4, 0x03, 0x12, 0x15,
	0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x44, 0x10, 0xe1, 0xc4, 0x03, 0x12, 0x18, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0xe2, 0xc4, 0x03, 0x12,
	0x17, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0xe3, 0xc4, 0x03, 0x12, 0x18, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0xe4,
	0xc4, 0x03, 0x12, 0x18, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x10, 0xe5, 0xc4, 0x03, 0x12, 0x18, 0x0a, 0x12,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x58, 0x4e, 0x4d,
	0x41, 0x43, 0x10, 0xe6, 0xc4, 0x03, 0x12, 0x11, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xe7, 0xc4, 0x03, 0x12, 0x12, 0x0a, 0x0c, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x10, 0xe8, 0xc4, 0x03, 0x12, 0x15, 0x0a,
	0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x4f, 0x49, 0x44, 0x53,
	0x10, 0xe9, 0xc4, 0x03, 0x12, 0x17, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0xea, 0xc4, 0x03, 0x12, 0x1a, 0x0a,
	0x14, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0xeb, 0xc4, 0x03, 0x12, 0x0f, 0x0a, 0x09, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xf1, 0xc4, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xf2, 0xc4, 0x03, 0x12, 0x14, 0x0a, 0x0e,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf3,
	0xc4, 0x03, 0x12, 0x11, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49,
	0x54, 0x10, 0xf4, 0xc4, 0x03, 0x12, 0x19, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0xf5, 0xc4, 0x03,
	0x12, 0x10, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0xf6,
	0xc4, 0x03, 0x12, 0x17, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x10, 0xf7, 0xc4, 0x03, 0x12, 0x17, 0x0a, 0x11, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x10, 0xf8, 0xc4, 0x03, 0x12, 0x18, 0x0a, 0x12, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0xf9, 0xc4, 0x03, 0x12, 0x1c,
	0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0xfa, 0xc4, 0x03, 0x12, 0x15, 0x0a, 0x0f,
	0x45, 0x5a, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x10,
	0xf7, 0xc6, 0x03, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x5a, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0xf8,
	0xc6, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x10, 0xf8, 0xc8, 0x03, 0x12, 0x10, 0x0a, 0x0a, 0x54, 0x58, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x81, 0xc5, 0x03, 0x12, 0x0f, 0x0a, 0x09, 0x54, 0x58,
	0x4e, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x82, 0xc5, 0x03, 0x12, 0x1a, 0x0a, 0x14, 0x54,
	0x58, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x83, 0xc5, 0x03, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x5a, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x10, 0xb3, 0xc7, 0x03, 0x12, 0x0e, 0x0a, 0x08, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x47,
	0x10, 0xc1, 0xc5, 0x03, 0x22, 0x40, 0x0a, 0x0c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01, 0x0a, 0x05, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x69, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x69, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x66, 0x56, 0x65, 0x72, 0x22, 0xf5, 0x01, 0x0a, 0x03, 0x47, 0x61,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x71, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x71, 0x38, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x71, 0x39, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x71,
	0x39, 0x22, 0x99, 0x02, 0x0a, 0x07, 0x57, 0x69, 0x66, 0x69, 0x73, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x31, 0x31, 0x62, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x31, 0x31, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x31, 0x31, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x31,
	0x31, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x31, 0x31, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x31, 0x31, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a,
	0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73,
	0x61, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x71, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x61, 0x74, 0x71, 0x61, 0x22, 0x1f, 0x0a, 0x0b, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x0a, 0x4c, 0x63, 0x64, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xec, 0x03, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x5f, 0x6f,
	0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x64, 0x4f,
	0x6b, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x4b, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x99, 0x03, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x77, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66,
	0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x77, 0x63, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x79, 0x42, 0x79, 0x53, 0x77,
	0x63, 0x6d, 0x61, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66,
	0x79, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x79, 0x42, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x61, 0x76, 0x31, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x79,
	0x42, 0x79, 0x53, 0x61, 0x6d, 0x61, 0x76, 0x31, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x61, 0x76, 0x32, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x79,
	0x42, 0x79, 0x53, 0x61, 0x6d, 0x61, 0x76, 0x32, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x61, 0x76, 0x33, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x79,
	0x42, 0x79, 0x53, 0x61, 0x6d, 0x61, 0x76, 0x33, 0x22, 0x32, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x52,
	0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x17, 0x5a, 0x15,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clearly_v1_clearly_proto_rawDescOnce sync.Once
	file_clearly_v1_clearly_proto_rawDescData = file_clearly_v1_clearly_proto_rawDesc
)

func file_clearly_v1_clearly_proto_rawDescGZIP() []byte {
	file_clearly_v1_clearly_proto_rawDescOnce.Do(func() {
		file_clearly_v1_clearly_proto_rawDescData = protoimpl.X.CompressGZIP(file_clearly_v1_clearly_proto_rawDescData)
	})
	return file_clearly_v1_clearly_proto_rawDescData
}

var file_clearly_v1_clearly_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_clearly_v1_clearly_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_clearly_v1_clearly_proto_goTypes = []interface{}{
	(Dfev2_Command)(0),      // 0: clearly.v1.Dfev2.Command
	(*Debug)(nil),           // 1: clearly.v1.Debug
	(*Dfev2)(nil),           // 2: clearly.v1.Dfev2
	(*SafetyRecord)(nil),    // 3: clearly.v1.SafetyRecord
	(*Ident)(nil),           // 4: clearly.v1.Ident
	(*Gas)(nil),             // 5: clearly.v1.Gas
	(*Wifista)(nil),         // 6: clearly.v1.Wifista
	(*Activated)(nil),       // 7: clearly.v1.Activated
	(*Deactivated)(nil),     // 8: clearly.v1.Deactivated
	(*LcdDisplay)(nil),      // 9: clearly.v1.LcdDisplay
	(*Checkpoint)(nil),      // 10: clearly.v1.Checkpoint
	(*CheckpointArray)(nil), // 11: clearly.v1.CheckpointArray
	(*KeySpec)(nil),         // 12: clearly.v1.KeySpec
	(*KeyRing)(nil),         // 13: clearly.v1.KeyRing
}
var file_clearly_v1_clearly_proto_depIdxs = []int32{
	0,  // 0: clearly.v1.Dfev2.command:type_name -> clearly.v1.Dfev2.Command
	2,  // 1: clearly.v1.Dfev2.commands:type_name -> clearly.v1.Dfev2
	10, // 2: clearly.v1.CheckpointArray.checkpoints:type_name -> clearly.v1.Checkpoint
	12, // 3: clearly.v1.KeyRing.keys:type_name -> clearly.v1.KeySpec
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_clearly_v1_clearly_proto_init() }
func file_clearly_v1_clearly_proto_init() {
	if File_clearly_v1_clearly_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clearly_v1_clearly_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dfev2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wifista); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deactivated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LcdDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clearly_v1_clearly_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clearly_v1_clearly_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clearly_v1_clearly_proto_goTypes,
		DependencyIndexes: file_clearly_v1_clearly_proto_depIdxs,
		EnumInfos:         file_clearly_v1_clearly_proto_enumTypes,
		MessageInfos:      file_clearly_v1_clearly_proto_msgTypes,
	}.Build()
	File_clearly_v1_clearly_proto = out.File
	file_clearly_v1_clearly_proto_rawDesc = nil
	file_clearly_v1_clearly_proto_goTypes = nil
	file_clearly_v1_clearly_proto_depIdxs = nil
}
