// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: dfruit/v1/dfruit.proto

package dfruit_v1

import (
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/x2ocoder/ultrafly_api/ffruit/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DfruitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ultrafly Integration
	MqttUri      string `protobuf:"bytes,5,opt,name=mqtt_uri,json=mqttUri,proto3" json:"mqtt_uri,omitempty"`
	MqttUsername string `protobuf:"bytes,6,opt,name=mqtt_username,json=mqttUsername,proto3" json:"mqtt_username,omitempty"`
	MqttPassword string `protobuf:"bytes,7,opt,name=mqtt_password,json=mqttPassword,proto3" json:"mqtt_password,omitempty"`
	MqttClientId string `protobuf:"bytes,8,opt,name=mqtt_client_id,json=mqttClientId,proto3" json:"mqtt_client_id,omitempty"`
	UksrState    string `protobuf:"bytes,9,opt,name=uksr_state,json=uksrState,proto3" json:"uksr_state,omitempty"`
	MineralPath  string `protobuf:"bytes,10,opt,name=mineral_path,json=mineralPath,proto3" json:"mineral_path,omitempty"` // License path
	WatchZone    string `protobuf:"bytes,11,opt,name=watch_zone,json=watchZone,proto3" json:"watch_zone,omitempty"`       // belt, shelf
	AttachRssi   int32  `protobuf:"varint,12,opt,name=attach_rssi,json=attachRssi,proto3" json:"attach_rssi,omitempty"`
	DetachRssi   int32  `protobuf:"varint,13,opt,name=detach_rssi,json=detachRssi,proto3" json:"detach_rssi,omitempty"`
	// Extra inventory rounds after Box trigger
	InventorySettlingRounds int32 `protobuf:"varint,15,opt,name=inventory_settling_rounds,json=inventorySettlingRounds,proto3" json:"inventory_settling_rounds,omitempty"` // typically 1 to be sure, but can reduce to 0 if single antenna
	// MySQL
	GormDbEngine string `protobuf:"bytes,80,opt,name=gorm_db_engine,json=gormDbEngine,proto3" json:"gorm_db_engine,omitempty"` // Example: "mysql"
	GormDbUrl    string `protobuf:"bytes,81,opt,name=gorm_db_url,json=gormDbUrl,proto3" json:"gorm_db_url,omitempty"`          // Example: "username:password@(hostname)/database?charset=utf8mb4&parseTime=True&loc=Local"
	// Debug
	DummyWaitMs int32 `protobuf:"varint,90,opt,name=dummy_wait_ms,json=dummyWaitMs,proto3" json:"dummy_wait_ms,omitempty"` // Example: 500, typically don't use
}

func (x *DfruitConfig) Reset() {
	*x = DfruitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitConfig) ProtoMessage() {}

func (x *DfruitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitConfig.ProtoReflect.Descriptor instead.
func (*DfruitConfig) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{0}
}

func (x *DfruitConfig) GetMqttUri() string {
	if x != nil {
		return x.MqttUri
	}
	return ""
}

func (x *DfruitConfig) GetMqttUsername() string {
	if x != nil {
		return x.MqttUsername
	}
	return ""
}

func (x *DfruitConfig) GetMqttPassword() string {
	if x != nil {
		return x.MqttPassword
	}
	return ""
}

func (x *DfruitConfig) GetMqttClientId() string {
	if x != nil {
		return x.MqttClientId
	}
	return ""
}

func (x *DfruitConfig) GetUksrState() string {
	if x != nil {
		return x.UksrState
	}
	return ""
}

func (x *DfruitConfig) GetMineralPath() string {
	if x != nil {
		return x.MineralPath
	}
	return ""
}

func (x *DfruitConfig) GetWatchZone() string {
	if x != nil {
		return x.WatchZone
	}
	return ""
}

func (x *DfruitConfig) GetAttachRssi() int32 {
	if x != nil {
		return x.AttachRssi
	}
	return 0
}

func (x *DfruitConfig) GetDetachRssi() int32 {
	if x != nil {
		return x.DetachRssi
	}
	return 0
}

func (x *DfruitConfig) GetInventorySettlingRounds() int32 {
	if x != nil {
		return x.InventorySettlingRounds
	}
	return 0
}

func (x *DfruitConfig) GetGormDbEngine() string {
	if x != nil {
		return x.GormDbEngine
	}
	return ""
}

func (x *DfruitConfig) GetGormDbUrl() string {
	if x != nil {
		return x.GormDbUrl
	}
	return ""
}

func (x *DfruitConfig) GetDummyWaitMs() int32 {
	if x != nil {
		return x.DummyWaitMs
	}
	return 0
}

type DfruitStateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	AntennaNo int32  `protobuf:"varint,2,opt,name=antenna_no,json=antennaNo,proto3" json:"antenna_no,omitempty"`
	State     string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"` // Restart, AwaitBox, ReadTag, SendWeight, AwaitWeight, LogResult, Error
}

func (x *DfruitStateMessage) Reset() {
	*x = DfruitStateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitStateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitStateMessage) ProtoMessage() {}

func (x *DfruitStateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitStateMessage.ProtoReflect.Descriptor instead.
func (*DfruitStateMessage) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{1}
}

func (x *DfruitStateMessage) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *DfruitStateMessage) GetAntennaNo() int32 {
	if x != nil {
		return x.AntennaNo
	}
	return 0
}

func (x *DfruitStateMessage) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type DfruitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`     // Inform UI about Error Problem
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Just annoucing state
}

func (x *DfruitStatus) Reset() {
	*x = DfruitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitStatus) ProtoMessage() {}

func (x *DfruitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitStatus.ProtoReflect.Descriptor instead.
func (*DfruitStatus) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{2}
}

func (x *DfruitStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DfruitStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Add application signature to EPC Bank
type DfruitSignEpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc          string `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"` // HexString (must decode if you want Binary)
	AppId        []byte `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Key          []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`                                       // Typically not provided because setup_fruit can determine based on AppId
	Tid          []byte `protobuf:"bytes,4,opt,name=tid,proto3" json:"tid,omitempty"`                                       // Used to generate new EPC
	SerialBytes  []byte `protobuf:"bytes,5,opt,name=serial_bytes,json=serialBytes,proto3" json:"serial_bytes,omitempty"`    // Alternative to TID.  If supplied will override TID
	CompanyBytes []byte `protobuf:"bytes,6,opt,name=company_bytes,json=companyBytes,proto3" json:"company_bytes,omitempty"` // Company Identiifer 2 bytes
	ProductBytes []byte `protobuf:"bytes,7,opt,name=product_bytes,json=productBytes,proto3" json:"product_bytes,omitempty"` // Product Identiifer 2 bytes
	Force        bool   `protobuf:"varint,20,opt,name=force,proto3" json:"force,omitempty"`                                 // sign even if seems signed
}

func (x *DfruitSignEpc) Reset() {
	*x = DfruitSignEpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitSignEpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitSignEpc) ProtoMessage() {}

func (x *DfruitSignEpc) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitSignEpc.ProtoReflect.Descriptor instead.
func (*DfruitSignEpc) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{3}
}

func (x *DfruitSignEpc) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *DfruitSignEpc) GetAppId() []byte {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *DfruitSignEpc) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DfruitSignEpc) GetTid() []byte {
	if x != nil {
		return x.Tid
	}
	return nil
}

func (x *DfruitSignEpc) GetSerialBytes() []byte {
	if x != nil {
		return x.SerialBytes
	}
	return nil
}

func (x *DfruitSignEpc) GetCompanyBytes() []byte {
	if x != nil {
		return x.CompanyBytes
	}
	return nil
}

func (x *DfruitSignEpc) GetProductBytes() []byte {
	if x != nil {
		return x.ProductBytes
	}
	return nil
}

func (x *DfruitSignEpc) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Add application signature to EPC Bank
type DfruitPrepareReservedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc   string `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"`      // HexString (must decode if you want Binary)
	Force bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"` // sign even if seems signed
}

func (x *DfruitPrepareReservedBlock) Reset() {
	*x = DfruitPrepareReservedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitPrepareReservedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitPrepareReservedBlock) ProtoMessage() {}

func (x *DfruitPrepareReservedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitPrepareReservedBlock.ProtoReflect.Descriptor instead.
func (*DfruitPrepareReservedBlock) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{4}
}

func (x *DfruitPrepareReservedBlock) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *DfruitPrepareReservedBlock) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Add signed tag to our database of recognized tags (useful for factory to detect strange tag insert)
type DfruitRegisterBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc   string `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"` // HexString (must decode if you want Binary)
	AppId []byte `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *DfruitRegisterBox) Reset() {
	*x = DfruitRegisterBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitRegisterBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitRegisterBox) ProtoMessage() {}

func (x *DfruitRegisterBox) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitRegisterBox.ProtoReflect.Descriptor instead.
func (*DfruitRegisterBox) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{5}
}

func (x *DfruitRegisterBox) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *DfruitRegisterBox) GetAppId() []byte {
	if x != nil {
		return x.AppId
	}
	return nil
}

// Fill User Bank with default info
type DfruitUserBankInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc   string `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"` // HexString (must decode if you want Binary)
	AppId []byte `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *DfruitUserBankInit) Reset() {
	*x = DfruitUserBankInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitUserBankInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitUserBankInit) ProtoMessage() {}

func (x *DfruitUserBankInit) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitUserBankInit.ProtoReflect.Descriptor instead.
func (*DfruitUserBankInit) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{6}
}

func (x *DfruitUserBankInit) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *DfruitUserBankInit) GetAppId() []byte {
	if x != nil {
		return x.AppId
	}
	return nil
}

// Fill User Bank with default info
type DfruitUserBankInitSpecialCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc     string                  `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"` // HexString (must decode if you want Binary)
	AppId   []byte                  `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Command v1.FfruitSpecialCommand `protobuf:"varint,3,opt,name=command,proto3,enum=ffruit.v1.FfruitSpecialCommand" json:"command,omitempty"`
}

func (x *DfruitUserBankInitSpecialCommand) Reset() {
	*x = DfruitUserBankInitSpecialCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitUserBankInitSpecialCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitUserBankInitSpecialCommand) ProtoMessage() {}

func (x *DfruitUserBankInitSpecialCommand) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitUserBankInitSpecialCommand.ProtoReflect.Descriptor instead.
func (*DfruitUserBankInitSpecialCommand) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{7}
}

func (x *DfruitUserBankInitSpecialCommand) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *DfruitUserBankInitSpecialCommand) GetAppId() []byte {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *DfruitUserBankInitSpecialCommand) GetCommand() v1.FfruitSpecialCommand {
	if x != nil {
		return x.Command
	}
	return v1.FfruitSpecialCommand_IGNORE_ME
}

type DfruitBarcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scanned   string `protobuf:"bytes,1,opt,name=scanned,proto3" json:"scanned,omitempty"`     // Whatever the QR Code Scanner types in
	Confirmed string `protobuf:"bytes,2,opt,name=confirmed,proto3" json:"confirmed,omitempty"` // The result of what Depot Fruit will allow
}

func (x *DfruitBarcode) Reset() {
	*x = DfruitBarcode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitBarcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitBarcode) ProtoMessage() {}

func (x *DfruitBarcode) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitBarcode.ProtoReflect.Descriptor instead.
func (*DfruitBarcode) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{8}
}

func (x *DfruitBarcode) GetScanned() string {
	if x != nil {
		return x.Scanned
	}
	return ""
}

func (x *DfruitBarcode) GetConfirmed() string {
	if x != nil {
		return x.Confirmed
	}
	return ""
}

type DfruitOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialEpcBank     string `protobuf:"bytes,1,opt,name=initial_epc_bank,json=initialEpcBank,proto3" json:"initial_epc_bank,omitempty"`             // What Dfruit initially saw
	InitialTidBank     string `protobuf:"bytes,2,opt,name=initial_tid_bank,json=initialTidBank,proto3" json:"initial_tid_bank,omitempty"`             // What Dfruit initially saw
	InitialUserBank    string `protobuf:"bytes,3,opt,name=initial_user_bank,json=initialUserBank,proto3" json:"initial_user_bank,omitempty"`          // What Dfruit initially saw
	BarcodeAsScanned   string `protobuf:"bytes,4,opt,name=barcode_as_scanned,json=barcodeAsScanned,proto3" json:"barcode_as_scanned,omitempty"`       // What we scanned in
	BarcodeAsConfirmed string `protobuf:"bytes,5,opt,name=barcode_as_confirmed,json=barcodeAsConfirmed,proto3" json:"barcode_as_confirmed,omitempty"` // What we will rename things to
	FinalEpc           string `protobuf:"bytes,10,opt,name=final_epc,json=finalEpc,proto3" json:"final_epc,omitempty"`                                // What we will rename things to
	FinalEpcFound      bool   `protobuf:"varint,11,opt,name=final_epc_found,json=finalEpcFound,proto3" json:"final_epc_found,omitempty"`              // true if we have located the renamed EPC
	TagLocked          bool   `protobuf:"varint,20,opt,name=tag_locked,json=tagLocked,proto3" json:"tag_locked,omitempty"`                            // true if we have locked the renamed EPC
}

func (x *DfruitOperation) Reset() {
	*x = DfruitOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfruit_v1_dfruit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DfruitOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DfruitOperation) ProtoMessage() {}

func (x *DfruitOperation) ProtoReflect() protoreflect.Message {
	mi := &file_dfruit_v1_dfruit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DfruitOperation.ProtoReflect.Descriptor instead.
func (*DfruitOperation) Descriptor() ([]byte, []int) {
	return file_dfruit_v1_dfruit_proto_rawDescGZIP(), []int{9}
}

func (x *DfruitOperation) GetInitialEpcBank() string {
	if x != nil {
		return x.InitialEpcBank
	}
	return ""
}

func (x *DfruitOperation) GetInitialTidBank() string {
	if x != nil {
		return x.InitialTidBank
	}
	return ""
}

func (x *DfruitOperation) GetInitialUserBank() string {
	if x != nil {
		return x.InitialUserBank
	}
	return ""
}

func (x *DfruitOperation) GetBarcodeAsScanned() string {
	if x != nil {
		return x.BarcodeAsScanned
	}
	return ""
}

func (x *DfruitOperation) GetBarcodeAsConfirmed() string {
	if x != nil {
		return x.BarcodeAsConfirmed
	}
	return ""
}

func (x *DfruitOperation) GetFinalEpc() string {
	if x != nil {
		return x.FinalEpc
	}
	return ""
}

func (x *DfruitOperation) GetFinalEpcFound() bool {
	if x != nil {
		return x.FinalEpcFound
	}
	return false
}

func (x *DfruitOperation) GetTagLocked() bool {
	if x != nil {
		return x.TagLocked
	}
	return false
}

var File_dfruit_v1_dfruit_proto protoreflect.FileDescriptor

var file_dfruit_v1_dfruit_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x66, 0x72, 0x75, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x66, 0x72, 0x75,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x66, 0x72, 0x75, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x16, 0x66, 0x66, 0x72, 0x75, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x66, 0x72, 0x75, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x03, 0x0a, 0x0c,
	0x44, 0x66, 0x72, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x71, 0x74, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x71, 0x74, 0x74, 0x55, 0x72, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x71, 0x74, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x71, 0x74, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6b, 0x73, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6b, 0x73,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x73, 0x73, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x73, 0x73, 0x69, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64,
	0x62, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x6f, 0x72, 0x6d, 0x44, 0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x6f, 0x72, 0x6d, 0x44, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x73,
	0x22, 0x5f, 0x0a, 0x12, 0x44, 0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x44, 0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x44, 0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x45, 0x70, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x1a, 0x44, 0x66, 0x72, 0x75, 0x69, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x70, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x11, 0x44, 0x66, 0x72,
	0x75, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x12, 0x44, 0x66, 0x72, 0x75, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x20, 0x44, 0x66, 0x72, 0x75, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x66, 0x66, 0x72, 0x75, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x66, 0x72, 0x75, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x47, 0x0a, 0x0d, 0x44, 0x66, 0x72, 0x75, 0x69, 0x74, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x44, 0x66, 0x72,
	0x75, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x70, 0x63, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x64, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x70, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x70, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x70, 0x63, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x61, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78,
	0x32, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x66, 0x6c, 0x79,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x66, 0x72, 0x75, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x64,
	0x66, 0x72, 0x75, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dfruit_v1_dfruit_proto_rawDescOnce sync.Once
	file_dfruit_v1_dfruit_proto_rawDescData = file_dfruit_v1_dfruit_proto_rawDesc
)

func file_dfruit_v1_dfruit_proto_rawDescGZIP() []byte {
	file_dfruit_v1_dfruit_proto_rawDescOnce.Do(func() {
		file_dfruit_v1_dfruit_proto_rawDescData = protoimpl.X.CompressGZIP(file_dfruit_v1_dfruit_proto_rawDescData)
	})
	return file_dfruit_v1_dfruit_proto_rawDescData
}

var file_dfruit_v1_dfruit_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dfruit_v1_dfruit_proto_goTypes = []interface{}{
	(*DfruitConfig)(nil),                     // 0: dfruit.v1.DfruitConfig
	(*DfruitStateMessage)(nil),               // 1: dfruit.v1.DfruitStateMessage
	(*DfruitStatus)(nil),                     // 2: dfruit.v1.DfruitStatus
	(*DfruitSignEpc)(nil),                    // 3: dfruit.v1.DfruitSignEpc
	(*DfruitPrepareReservedBlock)(nil),       // 4: dfruit.v1.DfruitPrepareReservedBlock
	(*DfruitRegisterBox)(nil),                // 5: dfruit.v1.DfruitRegisterBox
	(*DfruitUserBankInit)(nil),               // 6: dfruit.v1.DfruitUserBankInit
	(*DfruitUserBankInitSpecialCommand)(nil), // 7: dfruit.v1.DfruitUserBankInitSpecialCommand
	(*DfruitBarcode)(nil),                    // 8: dfruit.v1.DfruitBarcode
	(*DfruitOperation)(nil),                  // 9: dfruit.v1.DfruitOperation
	(v1.FfruitSpecialCommand)(0),             // 10: ffruit.v1.FfruitSpecialCommand
}
var file_dfruit_v1_dfruit_proto_depIdxs = []int32{
	10, // 0: dfruit.v1.DfruitUserBankInitSpecialCommand.command:type_name -> ffruit.v1.FfruitSpecialCommand
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_dfruit_v1_dfruit_proto_init() }
func file_dfruit_v1_dfruit_proto_init() {
	if File_dfruit_v1_dfruit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dfruit_v1_dfruit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitStateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitSignEpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitPrepareReservedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitRegisterBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitUserBankInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitUserBankInitSpecialCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitBarcode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfruit_v1_dfruit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DfruitOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dfruit_v1_dfruit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dfruit_v1_dfruit_proto_goTypes,
		DependencyIndexes: file_dfruit_v1_dfruit_proto_depIdxs,
		MessageInfos:      file_dfruit_v1_dfruit_proto_msgTypes,
	}.Build()
	File_dfruit_v1_dfruit_proto = out.File
	file_dfruit_v1_dfruit_proto_rawDesc = nil
	file_dfruit_v1_dfruit_proto_goTypes = nil
	file_dfruit_v1_dfruit_proto_depIdxs = nil
}
