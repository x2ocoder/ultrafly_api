// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: ufly/v1/ufly.proto

package ufly_v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GpioRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin          int32  `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`                                       // TODO: change to uint32
	Value        int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`                                   // TODO: change to uint32
	InitialState bool   `protobuf:"varint,3,opt,name=initial_state,json=initialState,proto3" json:"initial_state,omitempty"` // Alert that this is not a transition, but just the startup state
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                      // Alpha Name of GPIO
}

func (x *GpioRead) Reset() {
	*x = GpioRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpioRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpioRead) ProtoMessage() {}

func (x *GpioRead) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpioRead.ProtoReflect.Descriptor instead.
func (*GpioRead) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{0}
}

func (x *GpioRead) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *GpioRead) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GpioRead) GetInitialState() bool {
	if x != nil {
		return x.InitialState
	}
	return false
}

func (x *GpioRead) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GpioState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpioReads []*GpioRead `protobuf:"bytes,1,rep,name=gpio_reads,json=gpioReads,proto3" json:"gpio_reads,omitempty"`
}

func (x *GpioState) Reset() {
	*x = GpioState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpioState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpioState) ProtoMessage() {}

func (x *GpioState) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpioState.ProtoReflect.Descriptor instead.
func (*GpioState) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{1}
}

func (x *GpioState) GetGpioReads() []*GpioRead {
	if x != nil {
		return x.GpioReads
	}
	return nil
}

type GpioWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Pin       uint32 `protobuf:"varint,2,opt,name=pin,proto3" json:"pin,omitempty"`
	PinName   string `protobuf:"bytes,3,opt,name=pin_name,json=pinName,proto3" json:"pin_name,omitempty"`  // Allow request by pin name/function such as A/B/C/D or "Door", "Valve3"; Overrides Pin
	Value     uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`                    // 0 = Low, 1 = High ; If PulseMs is specified, then this will determine 0=Negative/1=Positive Logic
	PulseMs   uint32 `protobuf:"varint,5,opt,name=pulse_ms,json=pulseMs,proto3" json:"pulse_ms,omitempty"` // If > 0, then pulse from L->H then Wait PulseHighMs before dropping back H->L
}

func (x *GpioWriteRequest) Reset() {
	*x = GpioWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpioWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpioWriteRequest) ProtoMessage() {}

func (x *GpioWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpioWriteRequest.ProtoReflect.Descriptor instead.
func (*GpioWriteRequest) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{2}
}

func (x *GpioWriteRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GpioWriteRequest) GetPin() uint32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *GpioWriteRequest) GetPinName() string {
	if x != nil {
		return x.PinName
	}
	return ""
}

func (x *GpioWriteRequest) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GpioWriteRequest) GetPulseMs() uint32 {
	if x != nil {
		return x.PulseMs
	}
	return 0
}

type GpioWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Success   bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Pin       uint32 `protobuf:"varint,4,opt,name=pin,proto3" json:"pin,omitempty"`
	Value     uint32 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	PulseMs   uint32 `protobuf:"varint,6,opt,name=pulse_ms,json=pulseMs,proto3" json:"pulse_ms,omitempty"`
	PinName   string `protobuf:"bytes,7,opt,name=pin_name,json=pinName,proto3" json:"pin_name,omitempty"` // Allow request by pin name/function such as A/B/C/D or "Door", "Valve3"; Overrides Pin
}

func (x *GpioWriteResponse) Reset() {
	*x = GpioWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpioWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpioWriteResponse) ProtoMessage() {}

func (x *GpioWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpioWriteResponse.ProtoReflect.Descriptor instead.
func (*GpioWriteResponse) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{3}
}

func (x *GpioWriteResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GpioWriteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GpioWriteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GpioWriteResponse) GetPin() uint32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *GpioWriteResponse) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GpioWriteResponse) GetPulseMs() uint32 {
	if x != nil {
		return x.PulseMs
	}
	return 0
}

func (x *GpioWriteResponse) GetPinName() string {
	if x != nil {
		return x.PinName
	}
	return ""
}

type URadarStateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power     int32  `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	AntennaNo int32  `protobuf:"varint,2,opt,name=antenna_no,json=antennaNo,proto3" json:"antenna_no,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // General Message
}

func (x *URadarStateMessage) Reset() {
	*x = URadarStateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URadarStateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URadarStateMessage) ProtoMessage() {}

func (x *URadarStateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URadarStateMessage.ProtoReflect.Descriptor instead.
func (*URadarStateMessage) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{4}
}

func (x *URadarStateMessage) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *URadarStateMessage) GetAntennaNo() int32 {
	if x != nil {
		return x.AntennaNo
	}
	return 0
}

func (x *URadarStateMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//
type UTagMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//      string epc       = 1;
	Rssi  int32 `protobuf:"varint,2,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	//      int32 last_seen  = 4;
	AntennaNo int32  `protobuf:"varint,5,opt,name=antenna_no,json=antennaNo,proto3" json:"antenna_no,omitempty"`
	Zone      string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *UTagMessage) Reset() {
	*x = UTagMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTagMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTagMessage) ProtoMessage() {}

func (x *UTagMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTagMessage.ProtoReflect.Descriptor instead.
func (*UTagMessage) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{5}
}

func (x *UTagMessage) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *UTagMessage) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UTagMessage) GetAntennaNo() int32 {
	if x != nil {
		return x.AntennaNo
	}
	return 0
}

func (x *UTagMessage) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

//
// State is fairly simple:
//  New -- New Tag (Next Round: Transition to Existing)
//  Existing -- Known Tag (Next Round: If seen -> Existing; If not seen -> Fading)
//  Fading -- Known Tag can't see via UHF (Next Round: If seen -> Existing; If not seen -> Lost)
//  Lost -- Known Tag, Can't see for a long time (Removed from known tag list)
//
// Type has more detail:
//  State=New, Type=New -- New Tag Entirely
//  State=Existing, Type=ChangeZone (Antenna.Zone is not the same),
//  State=Existing, Type=ChangeAntenna (Antenna.Strongest is not the same),
//  State=Existing, Type=Motion (|RssiDelta| > OldRssi.10%)
//  State=Existing, Type=Shimmer (|RssiDelta| > 4)
//  State=Existing, Type=Static (|RssiDelta| <= 4)
//  State=Fading, Type=Fading -- Can't see tag for a short time
//  State=Lost, Type=Lost -- Can't see tag for a long time
//
// Type vs State
// Type = New, then State = New
// Type = Lost, then State = Lost (uradar.go when tag is lost)
//
// Program Logic
//   During Cycle URadarEvent -> URadar.Changes -> RunRadar -> CurrentURadarEventBuffer.Events.Store(epc, UradarEvent) -> URadarEventBufer.reportURadarEvents -> URadar.Rbell.NewURadarEvent -> MQTT/JSON->HTTP -> ufconnect -> <-rbell.NewURadarEvent -> ufly_v1.URadarEventMessage(recreate)->MQTT
//
// URadarEventMessage vs URadarEvent
//   URadarEvent has URadarEventMessage.UBlip*
//          Where UBlip.UTags[] (key = AntennaNo, value = UTag{Zone, AntennaNo, Rssi} )
type URadarEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epc          string         `protobuf:"bytes,1,opt,name=epc,proto3" json:"epc,omitempty"`                           // Consider calling this epc_hex because it's ascii hex (not binary epc)
	Type         string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                         // new_, Existing (rare), Moving, Fading, Moved
	OldState     string         `protobuf:"bytes,3,opt,name=old_state,json=oldState,proto3" json:"old_state,omitempty"` // new_, Existing, Moving, Fading
	NewState     string         `protobuf:"bytes,4,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"` // new_, Existing, Moving, Fading
	OldZone      string         `protobuf:"bytes,5,opt,name=old_zone,json=oldZone,proto3" json:"old_zone,omitempty"`
	NewZone      string         `protobuf:"bytes,6,opt,name=new_zone,json=newZone,proto3" json:"new_zone,omitempty"`
	OldRssi      int32          `protobuf:"varint,7,opt,name=old_rssi,json=oldRssi,proto3" json:"old_rssi,omitempty"`
	NewRssi      int32          `protobuf:"varint,8,opt,name=new_rssi,json=newRssi,proto3" json:"new_rssi,omitempty"`
	OldAntennaNo int32          `protobuf:"varint,9,opt,name=old_antenna_no,json=oldAntennaNo,proto3" json:"old_antenna_no,omitempty"`
	NewAntennaNo int32          `protobuf:"varint,10,opt,name=new_antenna_no,json=newAntennaNo,proto3" json:"new_antenna_no,omitempty"`
	Utags        []*UTagMessage `protobuf:"bytes,11,rep,name=utags,proto3" json:"utags,omitempty"`
}

func (x *URadarEventMessage) Reset() {
	*x = URadarEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URadarEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URadarEventMessage) ProtoMessage() {}

func (x *URadarEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URadarEventMessage.ProtoReflect.Descriptor instead.
func (*URadarEventMessage) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{6}
}

func (x *URadarEventMessage) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *URadarEventMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *URadarEventMessage) GetOldState() string {
	if x != nil {
		return x.OldState
	}
	return ""
}

func (x *URadarEventMessage) GetNewState() string {
	if x != nil {
		return x.NewState
	}
	return ""
}

func (x *URadarEventMessage) GetOldZone() string {
	if x != nil {
		return x.OldZone
	}
	return ""
}

func (x *URadarEventMessage) GetNewZone() string {
	if x != nil {
		return x.NewZone
	}
	return ""
}

func (x *URadarEventMessage) GetOldRssi() int32 {
	if x != nil {
		return x.OldRssi
	}
	return 0
}

func (x *URadarEventMessage) GetNewRssi() int32 {
	if x != nil {
		return x.NewRssi
	}
	return 0
}

func (x *URadarEventMessage) GetOldAntennaNo() int32 {
	if x != nil {
		return x.OldAntennaNo
	}
	return 0
}

func (x *URadarEventMessage) GetNewAntennaNo() int32 {
	if x != nil {
		return x.NewAntennaNo
	}
	return 0
}

func (x *URadarEventMessage) GetUtags() []*UTagMessage {
	if x != nil {
		return x.Utags
	}
	return nil
}

type UBlipReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Epc              string `protobuf:"bytes,2,opt,name=epc,proto3" json:"epc,omitempty"`
	Bank             int32  `protobuf:"varint,3,opt,name=bank,proto3" json:"bank,omitempty"`
	Offset           int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Words            int32  `protobuf:"varint,5,opt,name=words,proto3" json:"words,omitempty"`
	DisableEpcLookup bool   `protobuf:"varint,6,opt,name=disable_epc_lookup,json=disableEpcLookup,proto3" json:"disable_epc_lookup,omitempty"` // Specify if you know which antenna and don't need UBlip Lookup
	AntennaNo        int32  `protobuf:"varint,7,opt,name=antenna_no,json=antennaNo,proto3" json:"antenna_no,omitempty"`                        // Specify if you know which antenna
}

func (x *UBlipReadRequest) Reset() {
	*x = UBlipReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UBlipReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UBlipReadRequest) ProtoMessage() {}

func (x *UBlipReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UBlipReadRequest.ProtoReflect.Descriptor instead.
func (*UBlipReadRequest) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{7}
}

func (x *UBlipReadRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UBlipReadRequest) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *UBlipReadRequest) GetBank() int32 {
	if x != nil {
		return x.Bank
	}
	return 0
}

func (x *UBlipReadRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UBlipReadRequest) GetWords() int32 {
	if x != nil {
		return x.Words
	}
	return 0
}

func (x *UBlipReadRequest) GetDisableEpcLookup() bool {
	if x != nil {
		return x.DisableEpcLookup
	}
	return false
}

func (x *UBlipReadRequest) GetAntennaNo() int32 {
	if x != nil {
		return x.AntennaNo
	}
	return 0
}

type UBlipReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Success   bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Epc       string `protobuf:"bytes,4,opt,name=epc,proto3" json:"epc,omitempty"`
	Bank      int32  `protobuf:"varint,5,opt,name=bank,proto3" json:"bank,omitempty"`
	Data      []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UBlipReadResponse) Reset() {
	*x = UBlipReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UBlipReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UBlipReadResponse) ProtoMessage() {}

func (x *UBlipReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UBlipReadResponse.ProtoReflect.Descriptor instead.
func (*UBlipReadResponse) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{8}
}

func (x *UBlipReadResponse) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UBlipReadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UBlipReadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UBlipReadResponse) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *UBlipReadResponse) GetBank() int32 {
	if x != nil {
		return x.Bank
	}
	return 0
}

func (x *UBlipReadResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UBlipWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Epc            string `protobuf:"bytes,2,opt,name=epc,proto3" json:"epc,omitempty"`
	Bank           int32  `protobuf:"varint,3,opt,name=bank,proto3" json:"bank,omitempty"`
	Data           []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Offset         int32  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Words          int32  `protobuf:"varint,6,opt,name=words,proto3" json:"words,omitempty"`
	AccessPassword []byte `protobuf:"bytes,7,opt,name=access_password,json=accessPassword,proto3" json:"access_password,omitempty"`
}

func (x *UBlipWriteRequest) Reset() {
	*x = UBlipWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UBlipWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UBlipWriteRequest) ProtoMessage() {}

func (x *UBlipWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UBlipWriteRequest.ProtoReflect.Descriptor instead.
func (*UBlipWriteRequest) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{9}
}

func (x *UBlipWriteRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UBlipWriteRequest) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *UBlipWriteRequest) GetBank() int32 {
	if x != nil {
		return x.Bank
	}
	return 0
}

func (x *UBlipWriteRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UBlipWriteRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UBlipWriteRequest) GetWords() int32 {
	if x != nil {
		return x.Words
	}
	return 0
}

func (x *UBlipWriteRequest) GetAccessPassword() []byte {
	if x != nil {
		return x.AccessPassword
	}
	return nil
}

type UBlipWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Success   bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Epc       string `protobuf:"bytes,4,opt,name=epc,proto3" json:"epc,omitempty"`
}

func (x *UBlipWriteResponse) Reset() {
	*x = UBlipWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UBlipWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UBlipWriteResponse) ProtoMessage() {}

func (x *UBlipWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UBlipWriteResponse.ProtoReflect.Descriptor instead.
func (*UBlipWriteResponse) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{10}
}

func (x *UBlipWriteResponse) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UBlipWriteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UBlipWriteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UBlipWriteResponse) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

type UBlipLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Epc            string `protobuf:"bytes,2,opt,name=epc,proto3" json:"epc,omitempty"`
	Area           int32  `protobuf:"varint,3,opt,name=area,proto3" json:"area,omitempty"`
	Type           int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	AccessPassword []byte `protobuf:"bytes,7,opt,name=access_password,json=accessPassword,proto3" json:"access_password,omitempty"`
}

func (x *UBlipLockRequest) Reset() {
	*x = UBlipLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UBlipLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UBlipLockRequest) ProtoMessage() {}

func (x *UBlipLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UBlipLockRequest.ProtoReflect.Descriptor instead.
func (*UBlipLockRequest) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{11}
}

func (x *UBlipLockRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UBlipLockRequest) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

func (x *UBlipLockRequest) GetArea() int32 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *UBlipLockRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UBlipLockRequest) GetAccessPassword() []byte {
	if x != nil {
		return x.AccessPassword
	}
	return nil
}

type UBlipLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Success   bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Epc       string `protobuf:"bytes,4,opt,name=epc,proto3" json:"epc,omitempty"`
}

func (x *UBlipLockResponse) Reset() {
	*x = UBlipLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UBlipLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UBlipLockResponse) ProtoMessage() {}

func (x *UBlipLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UBlipLockResponse.ProtoReflect.Descriptor instead.
func (*UBlipLockResponse) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{12}
}

func (x *UBlipLockResponse) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UBlipLockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UBlipLockResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UBlipLockResponse) GetEpc() string {
	if x != nil {
		return x.Epc
	}
	return ""
}

type UModeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId            int32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InventoryEnable      bool  `protobuf:"varint,2,opt,name=inventory_enable,json=inventoryEnable,proto3" json:"inventory_enable,omitempty"`
	InventoryDisable     bool  `protobuf:"varint,3,opt,name=inventory_disable,json=inventoryDisable,proto3" json:"inventory_disable,omitempty"`
	Times                int32 `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`                                                               // in case only a limited number of inventory rounds
	AutoUserBank         bool  `protobuf:"varint,5,opt,name=auto_user_bank,json=autoUserBank,proto3" json:"auto_user_bank,omitempty"`                           // when you get a matching T tag, automatically fetch the user bank
	OnItemAbortInventory bool  `protobuf:"varint,6,opt,name=on_item_abort_inventory,json=onItemAbortInventory,proto3" json:"on_item_abort_inventory,omitempty"` // if you find a T tag within the minimum_rssi, don't run the other antennas to save tie
}

func (x *UModeSet) Reset() {
	*x = UModeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UModeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UModeSet) ProtoMessage() {}

func (x *UModeSet) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UModeSet.ProtoReflect.Descriptor instead.
func (*UModeSet) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{13}
}

func (x *UModeSet) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *UModeSet) GetInventoryEnable() bool {
	if x != nil {
		return x.InventoryEnable
	}
	return false
}

func (x *UModeSet) GetInventoryDisable() bool {
	if x != nil {
		return x.InventoryDisable
	}
	return false
}

func (x *UModeSet) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *UModeSet) GetAutoUserBank() bool {
	if x != nil {
		return x.AutoUserBank
	}
	return false
}

func (x *UModeSet) GetOnItemAbortInventory() bool {
	if x != nil {
		return x.OnItemAbortInventory
	}
	return false
}

// NOTE: Stolen from tfruit proto, but probabaly belongs here anyways
// CMAC Message Envelope
// Used for darn near everything possible between UHF <-> NFC (may be spied upon by web ui)
// Helps to prevent tampering of data
type UltraflySignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic []byte `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"` // Protobuf Type (since can't be detected from data)
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`   // Protobuf Wire Serialized Data
	Sig   []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`     // CMAC Signature = CMAC(secret, topic+data)
}

func (x *UltraflySignedMessage) Reset() {
	*x = UltraflySignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ufly_v1_ufly_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UltraflySignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UltraflySignedMessage) ProtoMessage() {}

func (x *UltraflySignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ufly_v1_ufly_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UltraflySignedMessage.ProtoReflect.Descriptor instead.
func (*UltraflySignedMessage) Descriptor() ([]byte, []int) {
	return file_ufly_v1_ufly_proto_rawDescGZIP(), []int{14}
}

func (x *UltraflySignedMessage) GetTopic() []byte {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *UltraflySignedMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UltraflySignedMessage) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

var File_ufly_v1_ufly_proto protoreflect.FileDescriptor

var file_ufly_v1_ufly_proto_rawDesc = []byte{
	0x0a, 0x12, 0x75, 0x66, 0x6c, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x66, 0x6c, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x66, 0x6c, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x6b, 0x0a,
	0x08, 0x47, 0x70, 0x69, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x47, 0x70,
	0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x67, 0x70, 0x69, 0x6f, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x66,
	0x6c, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x69, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x67, 0x70, 0x69, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x47, 0x70,
	0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x11,
	0x47, 0x70, 0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x63, 0x0a, 0x12, 0x55, 0x52, 0x61, 0x64, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x0b, 0x55, 0x54, 0x61, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x6e, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x12, 0x55, 0x52, 0x61, 0x64, 0x61, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x73, 0x73, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x52, 0x73, 0x73, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6f, 0x6c, 0x64, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x6e, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x75, 0x66, 0x6c, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x54, 0x61, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x74, 0x61, 0x67, 0x73, 0x22, 0xd2,
	0x01, 0x0a, 0x10, 0x55, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x70, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x70, 0x63, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x70, 0x63, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f,
	0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x4e, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x55, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x61,
	0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x55, 0x42, 0x6c, 0x69, 0x70,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x61, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x79, 0x0a, 0x12,
	0x55, 0x42, 0x6c, 0x69, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x55, 0x42, 0x6c, 0x69,
	0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x78,
	0x0a, 0x11, 0x55, 0x42, 0x6c, 0x69, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x70, 0x63, 0x22, 0xf4, 0x01, 0x0a, 0x08, 0x55, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x6e, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x53, 0x0a, 0x15, 0x55, 0x6c, 0x74, 0x72, 0x61, 0x66, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x69, 0x67, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x78, 0x32, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x75, 0x6c, 0x74, 0x72,
	0x61, 0x66, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x66, 0x6c, 0x79, 0x2f, 0x76, 0x31,
	0x3b, 0x75, 0x66, 0x6c, 0x79, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ufly_v1_ufly_proto_rawDescOnce sync.Once
	file_ufly_v1_ufly_proto_rawDescData = file_ufly_v1_ufly_proto_rawDesc
)

func file_ufly_v1_ufly_proto_rawDescGZIP() []byte {
	file_ufly_v1_ufly_proto_rawDescOnce.Do(func() {
		file_ufly_v1_ufly_proto_rawDescData = protoimpl.X.CompressGZIP(file_ufly_v1_ufly_proto_rawDescData)
	})
	return file_ufly_v1_ufly_proto_rawDescData
}

var file_ufly_v1_ufly_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_ufly_v1_ufly_proto_goTypes = []interface{}{
	(*GpioRead)(nil),              // 0: ufly.v1.GpioRead
	(*GpioState)(nil),             // 1: ufly.v1.GpioState
	(*GpioWriteRequest)(nil),      // 2: ufly.v1.GpioWriteRequest
	(*GpioWriteResponse)(nil),     // 3: ufly.v1.GpioWriteResponse
	(*URadarStateMessage)(nil),    // 4: ufly.v1.URadarStateMessage
	(*UTagMessage)(nil),           // 5: ufly.v1.UTagMessage
	(*URadarEventMessage)(nil),    // 6: ufly.v1.URadarEventMessage
	(*UBlipReadRequest)(nil),      // 7: ufly.v1.UBlipReadRequest
	(*UBlipReadResponse)(nil),     // 8: ufly.v1.UBlipReadResponse
	(*UBlipWriteRequest)(nil),     // 9: ufly.v1.UBlipWriteRequest
	(*UBlipWriteResponse)(nil),    // 10: ufly.v1.UBlipWriteResponse
	(*UBlipLockRequest)(nil),      // 11: ufly.v1.UBlipLockRequest
	(*UBlipLockResponse)(nil),     // 12: ufly.v1.UBlipLockResponse
	(*UModeSet)(nil),              // 13: ufly.v1.UModeSet
	(*UltraflySignedMessage)(nil), // 14: ufly.v1.UltraflySignedMessage
}
var file_ufly_v1_ufly_proto_depIdxs = []int32{
	0, // 0: ufly.v1.GpioState.gpio_reads:type_name -> ufly.v1.GpioRead
	5, // 1: ufly.v1.URadarEventMessage.utags:type_name -> ufly.v1.UTagMessage
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ufly_v1_ufly_proto_init() }
func file_ufly_v1_ufly_proto_init() {
	if File_ufly_v1_ufly_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ufly_v1_ufly_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpioRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpioState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpioWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpioWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URadarStateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTagMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URadarEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UBlipReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UBlipReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UBlipWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UBlipWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UBlipLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UBlipLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UModeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ufly_v1_ufly_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UltraflySignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ufly_v1_ufly_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ufly_v1_ufly_proto_goTypes,
		DependencyIndexes: file_ufly_v1_ufly_proto_depIdxs,
		MessageInfos:      file_ufly_v1_ufly_proto_msgTypes,
	}.Build()
	File_ufly_v1_ufly_proto = out.File
	file_ufly_v1_ufly_proto_rawDesc = nil
	file_ufly_v1_ufly_proto_goTypes = nil
	file_ufly_v1_ufly_proto_depIdxs = nil
}
