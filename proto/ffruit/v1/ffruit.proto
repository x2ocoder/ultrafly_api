syntax = "proto3";

import "dacs/v1/dacs.proto";
import "oneshelf/v1/oneshelf.proto";

package ultrafly_api.ffruit.v1;
option go_package = "github.com/x2ocoder/ultrafly_api/buf/internal/gen/proto/go/ffruit/v1;ffruit_v1";



message FfruitConfig {
  string gorm_db_engine = 1; // Example: "mysql"
  string gorm_db_url = 2; // Example: "username:password@(hostname)/database?charset=utf8mb4&parseTime=True&loc=Local"

  // DACS Integration
  string dacs_xmitter_tcp_endpoint = 3; // test: 127.0.0.1:9000
  string dacs_weight_tcp_endpoint = 4; // test: 127.0.0.1:2000 

  // Ultrafly Integration
  string mqtt_uri = 5;
  string mqtt_username = 6;
  string mqtt_password = 7;
  string mqtt_client_id = 8;

  string uksr_state = 9;
  string mineral_path = 10; // License path 

  string watch_zone = 11; // belt, shelf

  int32 attach_rssi = 12;
  int32 detach_rssi = 13;                                                                                           
                                                                                                                                 
  // Extra inventory rounds after Box trigger                                                                                    
  int32 inventory_settling_rounds = 15; // typically 1 to be sure, but can reduce to 0 if single antenna
                                                                                                                                                           
  // Which gpio in/out (ultrafly v0.6: Avoid A & B in case of Rpi Kernel update which reactivates i2c-0 on boot for pi hat scan                            
  string proceed_relay_letter = 20;         // Typically D (closest to Pi)                                                   
  bool   proceed_relay_negative_logic = 21; // Typically false since that activates relay to close which is what ishida wants
  uint32 proceed_relay_pulse_ms = 22;       // Miliseconds pulse duration                                                    

  string error_relay_letter = 30;            // Typically C (next closest to Pi)                                              
  bool   error_relay_negative_logic = 31;    // Typically false since that activates relay to close which is what ishida wants
  uint32 error_relay_pulse_ms = 32;          // Miliseconds pulse duration                                                    

  string tag_ok_relay_letter = 35;            // Typically C (next closest to Pi)                                              
  bool   tag_ok_relay_negative_logic = 36;    // Typically false since that activates relay to close which is what ishida wants
  uint32 tag_ok_relay_pulse_ms = 37;          // Miliseconds pulse duration                                                    

  string box_input_letter = 41;              // Typically H (closest to Pi)                                                   
  bool   box_input_negative_logic = 42;      // Typically false since that activates relay to close which is what ishida wants
  uint32 box_relay_pulse_ms = 43;            // Miliseconds pulse duration                                                    
                                                                                        
  bool enable_oled = 50;    // Do we expect oled on i2c                
  bool enable_lcd1602 = 51; // Do we expect 16x2 LCD?                  
  bool enable_hdmi = 52;    // Do we expect HDMI display to load JS UI?

  dacs.v1.DacsCmdP dacs_cmd_p_defaults = 60; // Template Object
  dacs.v1.DacsCmdP dacs_redo_preset_cmd_p_defaults = 61; // Template Object
  map<int32, dacs.v1.DacsCmdP> dacs_cmd_p_presets = 62; // For each Preset = int(####) have a DacsCmdP to apply as a preset; If not found, default back to dacs_cmd_p_defaults

  oneshelf.v1.OneshelfConfig oneshelf_config = 99; // dummy

  string box_log_sync_url = 100; // URL to send boxlog data to

  bool debug_dacs_cmd_at = 110; // while event loop is idle poll dacs @->9 response
}


enum FfruitSpecialCommand {  
  IGNORE_ME = 0x00; // Tell Ffruit Program: Do nothing
  REDO_PRESET = 0x01; // Tell Ffruit Program: Send this special basket to DACS and read new Preset ####
}




message FfruitStateMessage {
  int32 error = 1;
  int32 antenna_no = 2;
  string state = 3; // Restart, AwaitBox, ReadTag, SendWeight, AwaitWeight, LogResult, Error
}


message DacsSimEvent {
  bytes dacs_data = 1;
  int32 dacs_weight = 2;
}

message BoxSimEvent {
  int32 arrived = 1;
}

message FfruitStatus {
  string error = 1;   // Inform UI about Error Problem
  string message = 2; // Just annoucing state
}

// Add application signature to EPC Bank
message FfruitSignEpc {
  string epc = 1; // HexString (must decode if you want Binary)
  bytes app_id = 2;
  bytes key = 3; // Typically not provided because setup_fruit can determine based on AppId
}

// Add signed tag to our database of recognized tags (useful for factory to detect strange tag insert)
message FfruitRegisterBox {
  string epc = 1; // HexString (must decode if you want Binary)
  bytes app_id = 2;
}

// Fill User Bank with default info
message FfruitUserBankInit {
  string epc = 1; // HexString (must decode if you want Binary)
  bytes app_id = 2;
}
