// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: dacs/v1/dacs.proto

package dacs_v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DacsCmdP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetNumber          int32   `protobuf:"varint,1,opt,name=preset_number,json=presetNumber,proto3" json:"preset_number,omitempty"`                                 // format 4 digit: 0000 - 0200
	Capacity              int32   `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`                                                             // 0 Standard; 1 High Resolution
	WeightUnit            int32   `protobuf:"varint,3,opt,name=weight_unit,json=weightUnit,proto3" json:"weight_unit,omitempty"`                                       // 0 Gram; 1 Ounce
	WeightMode            int32   `protobuf:"varint,4,opt,name=weight_mode,json=weightMode,proto3" json:"weight_mode,omitempty"`                                       // 0 IFC - InFeed; 1 WTC - ; 2 IFC + WTC
	ReferenceWeight       float64 `protobuf:"fixed64,5,opt,name=reference_weight,json=referenceWeight,proto3" json:"reference_weight,omitempty"`                       // W8: The target 8 Characters 12345.78 : CRITICAL: Do not set to allow dynamic weight from UHF Tag
	UpperDeltaAmount      float64 `protobuf:"fixed64,6,opt,name=upper_delta_amount,json=upperDeltaAmount,proto3" json:"upper_delta_amount,omitempty"`                  // W8: Absolute allowable grams above ReferenceWeight, or multiplier against ReferenceWeigth if UpperDeltaMode is "%"
	LowerDeltaAmount      float64 `protobuf:"fixed64,7,opt,name=lower_delta_amount,json=lowerDeltaAmount,proto3" json:"lower_delta_amount,omitempty"`                  // W8: Absolute allowable grams above ReferenceWeight, or multiplier against ReferenceWeigth if LowerDeltaMode is "%"
	UpperDeltaMode        string  `protobuf:"bytes,8,opt,name=upper_delta_mode,json=upperDeltaMode,proto3" json:"upper_delta_mode,omitempty"`                          // Internal Config: blank if absolute, "%" if % of ReferenceWeight
	LowerDeltaMode        string  `protobuf:"bytes,9,opt,name=lower_delta_mode,json=lowerDeltaMode,proto3" json:"lower_delta_mode,omitempty"`                          // Internal Config: blank if absolute, "%" if % of ReferenceWeight
	ProductLengthMm       int32   `protobuf:"varint,10,opt,name=product_length_mm,json=productLengthMm,proto3" json:"product_length_mm,omitempty"`                     // 610 mm
	RejectStartDelayRight int32   `protobuf:"varint,11,opt,name=reject_start_delay_right,json=rejectStartDelayRight,proto3" json:"reject_start_delay_right,omitempty"` // ms = 0
	RejectOnTimeRight     int32   `protobuf:"varint,12,opt,name=reject_on_time_right,json=rejectOnTimeRight,proto3" json:"reject_on_time_right,omitempty"`             // ms = 0
	RejectStartDelayLeft  int32   `protobuf:"varint,13,opt,name=reject_start_delay_left,json=rejectStartDelayLeft,proto3" json:"reject_start_delay_left,omitempty"`    // ms = 0
	RejectOnTimeLeft      int32   `protobuf:"varint,14,opt,name=reject_on_time_left,json=rejectOnTimeLeft,proto3" json:"reject_on_time_left,omitempty"`                // ms = 0
	ProductName           string  `protobuf:"bytes,15,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                    // == ""
	ProductCode           string  `protobuf:"bytes,16,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`                                    // == ""
	OverWeightAccept      int32   `protobuf:"varint,17,opt,name=over_weight_accept,json=overWeightAccept,proto3" json:"over_weight_accept,omitempty"`                  // *0 Off; 1 On
	MetalDetection        int32   `protobuf:"varint,18,opt,name=metal_detection,json=metalDetection,proto3" json:"metal_detection,omitempty"`                          // 0 Off; *1 Metal Detect On; 2 Detect Lack of Metal
	TareWeight            float64 `protobuf:"fixed64,19,opt,name=tare_weight,json=tareWeight,proto3" json:"tare_weight,omitempty"`                                     // W8  12345.78 = 0.0
	NominalWeight         float64 `protobuf:"fixed64,20,opt,name=nominal_weight,json=nominalWeight,proto3" json:"nominal_weight,omitempty"`                            // W8  12345.78 = 0.0
	T1Weight              float64 `protobuf:"fixed64,21,opt,name=t1_weight,json=t1Weight,proto3" json:"t1_weight,omitempty"`                                           // W8  12345.78 = 0.0
	T2Weight              float64 `protobuf:"fixed64,22,opt,name=t2_weight,json=t2Weight,proto3" json:"t2_weight,omitempty"`                                           // W8  12345.78 = 0.0
	Ext1OutDelayTime      int32   `protobuf:"varint,23,opt,name=ext1_out_delay_time,json=ext1OutDelayTime,proto3" json:"ext1_out_delay_time,omitempty"`                // ms = 0
	Ext2OutDelayTime      int32   `protobuf:"varint,24,opt,name=ext2_out_delay_time,json=ext2OutDelayTime,proto3" json:"ext2_out_delay_time,omitempty"`                // ms = 0
	Ext3OutDelayTime      int32   `protobuf:"varint,25,opt,name=ext3_out_delay_time,json=ext3OutDelayTime,proto3" json:"ext3_out_delay_time,omitempty"`                // ms = 0
	Ext4OutDelayTime      int32   `protobuf:"varint,26,opt,name=ext4_out_delay_time,json=ext4OutDelayTime,proto3" json:"ext4_out_delay_time,omitempty"`                // ms = 0
	Ext5OutDelayTime      int32   `protobuf:"varint,27,opt,name=ext5_out_delay_time,json=ext5OutDelayTime,proto3" json:"ext5_out_delay_time,omitempty"`                // ms = 0
	Ext6OutDelayTime      int32   `protobuf:"varint,28,opt,name=ext6_out_delay_time,json=ext6OutDelayTime,proto3" json:"ext6_out_delay_time,omitempty"`                // ms = 0
	Ext1InputDelayTime    int32   `protobuf:"varint,29,opt,name=ext1_input_delay_time,json=ext1InputDelayTime,proto3" json:"ext1_input_delay_time,omitempty"`          // ms = 0
	Ext2InputDelayTime    int32   `protobuf:"varint,30,opt,name=ext2_input_delay_time,json=ext2InputDelayTime,proto3" json:"ext2_input_delay_time,omitempty"`          // ms = 0
	ContinuousNoGoodCount int32   `protobuf:"varint,31,opt,name=continuous_no_good_count,json=continuousNoGoodCount,proto3" json:"continuous_no_good_count,omitempty"` // = 0
	InfeedConveyorSpeed   int32   `protobuf:"varint,32,opt,name=infeed_conveyor_speed,json=infeedConveyorSpeed,proto3" json:"infeed_conveyor_speed,omitempty"`         // m/min = 23
	WeighConveyorSpeed    int32   `protobuf:"varint,33,opt,name=weigh_conveyor_speed,json=weighConveyorSpeed,proto3" json:"weigh_conveyor_speed,omitempty"`            // m/min = 23
	RejectConveyorSpeed   int32   `protobuf:"varint,34,opt,name=reject_conveyor_speed,json=rejectConveyorSpeed,proto3" json:"reject_conveyor_speed,omitempty"`         // m/min = 23
}

func (x *DacsCmdP) Reset() {
	*x = DacsCmdP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dacs_v1_dacs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DacsCmdP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DacsCmdP) ProtoMessage() {}

func (x *DacsCmdP) ProtoReflect() protoreflect.Message {
	mi := &file_dacs_v1_dacs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DacsCmdP.ProtoReflect.Descriptor instead.
func (*DacsCmdP) Descriptor() ([]byte, []int) {
	return file_dacs_v1_dacs_proto_rawDescGZIP(), []int{0}
}

func (x *DacsCmdP) GetPresetNumber() int32 {
	if x != nil {
		return x.PresetNumber
	}
	return 0
}

func (x *DacsCmdP) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DacsCmdP) GetWeightUnit() int32 {
	if x != nil {
		return x.WeightUnit
	}
	return 0
}

func (x *DacsCmdP) GetWeightMode() int32 {
	if x != nil {
		return x.WeightMode
	}
	return 0
}

func (x *DacsCmdP) GetReferenceWeight() float64 {
	if x != nil {
		return x.ReferenceWeight
	}
	return 0
}

func (x *DacsCmdP) GetUpperDeltaAmount() float64 {
	if x != nil {
		return x.UpperDeltaAmount
	}
	return 0
}

func (x *DacsCmdP) GetLowerDeltaAmount() float64 {
	if x != nil {
		return x.LowerDeltaAmount
	}
	return 0
}

func (x *DacsCmdP) GetUpperDeltaMode() string {
	if x != nil {
		return x.UpperDeltaMode
	}
	return ""
}

func (x *DacsCmdP) GetLowerDeltaMode() string {
	if x != nil {
		return x.LowerDeltaMode
	}
	return ""
}

func (x *DacsCmdP) GetProductLengthMm() int32 {
	if x != nil {
		return x.ProductLengthMm
	}
	return 0
}

func (x *DacsCmdP) GetRejectStartDelayRight() int32 {
	if x != nil {
		return x.RejectStartDelayRight
	}
	return 0
}

func (x *DacsCmdP) GetRejectOnTimeRight() int32 {
	if x != nil {
		return x.RejectOnTimeRight
	}
	return 0
}

func (x *DacsCmdP) GetRejectStartDelayLeft() int32 {
	if x != nil {
		return x.RejectStartDelayLeft
	}
	return 0
}

func (x *DacsCmdP) GetRejectOnTimeLeft() int32 {
	if x != nil {
		return x.RejectOnTimeLeft
	}
	return 0
}

func (x *DacsCmdP) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DacsCmdP) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *DacsCmdP) GetOverWeightAccept() int32 {
	if x != nil {
		return x.OverWeightAccept
	}
	return 0
}

func (x *DacsCmdP) GetMetalDetection() int32 {
	if x != nil {
		return x.MetalDetection
	}
	return 0
}

func (x *DacsCmdP) GetTareWeight() float64 {
	if x != nil {
		return x.TareWeight
	}
	return 0
}

func (x *DacsCmdP) GetNominalWeight() float64 {
	if x != nil {
		return x.NominalWeight
	}
	return 0
}

func (x *DacsCmdP) GetT1Weight() float64 {
	if x != nil {
		return x.T1Weight
	}
	return 0
}

func (x *DacsCmdP) GetT2Weight() float64 {
	if x != nil {
		return x.T2Weight
	}
	return 0
}

func (x *DacsCmdP) GetExt1OutDelayTime() int32 {
	if x != nil {
		return x.Ext1OutDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetExt2OutDelayTime() int32 {
	if x != nil {
		return x.Ext2OutDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetExt3OutDelayTime() int32 {
	if x != nil {
		return x.Ext3OutDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetExt4OutDelayTime() int32 {
	if x != nil {
		return x.Ext4OutDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetExt5OutDelayTime() int32 {
	if x != nil {
		return x.Ext5OutDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetExt6OutDelayTime() int32 {
	if x != nil {
		return x.Ext6OutDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetExt1InputDelayTime() int32 {
	if x != nil {
		return x.Ext1InputDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetExt2InputDelayTime() int32 {
	if x != nil {
		return x.Ext2InputDelayTime
	}
	return 0
}

func (x *DacsCmdP) GetContinuousNoGoodCount() int32 {
	if x != nil {
		return x.ContinuousNoGoodCount
	}
	return 0
}

func (x *DacsCmdP) GetInfeedConveyorSpeed() int32 {
	if x != nil {
		return x.InfeedConveyorSpeed
	}
	return 0
}

func (x *DacsCmdP) GetWeighConveyorSpeed() int32 {
	if x != nil {
		return x.WeighConveyorSpeed
	}
	return 0
}

func (x *DacsCmdP) GetRejectConveyorSpeed() int32 {
	if x != nil {
		return x.RejectConveyorSpeed
	}
	return 0
}

var File_dacs_v1_dacs_proto protoreflect.FileDescriptor

var file_dacs_v1_dacs_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x61, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x64, 0x61, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xd6, 0x0b,
	0x0a, 0x08, 0x44, 0x61, 0x63, 0x73, 0x43, 0x6d, 0x64, 0x50, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x70, 0x70, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x4d, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x65, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x31, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x31,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x32, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x32, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x65, 0x78, 0x74, 0x31, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x32, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x32, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x33, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x65, 0x78, 0x74, 0x33, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x34, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x35, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78,
	0x74, 0x35, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x65, 0x78, 0x74, 0x36, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x74,
	0x36, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x65, 0x78, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x78,
	0x74, 0x31, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x32, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x65, 0x78, 0x74, 0x32, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x4e, 0x6f, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x79,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x79, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f,
	0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x11, 0x5a, 0x0f, 0x64, 0x61, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x3b, 0x64, 0x61, 0x63, 0x73, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dacs_v1_dacs_proto_rawDescOnce sync.Once
	file_dacs_v1_dacs_proto_rawDescData = file_dacs_v1_dacs_proto_rawDesc
)

func file_dacs_v1_dacs_proto_rawDescGZIP() []byte {
	file_dacs_v1_dacs_proto_rawDescOnce.Do(func() {
		file_dacs_v1_dacs_proto_rawDescData = protoimpl.X.CompressGZIP(file_dacs_v1_dacs_proto_rawDescData)
	})
	return file_dacs_v1_dacs_proto_rawDescData
}

var file_dacs_v1_dacs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_dacs_v1_dacs_proto_goTypes = []interface{}{
	(*DacsCmdP)(nil), // 0: dacs.v1.DacsCmdP
}
var file_dacs_v1_dacs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dacs_v1_dacs_proto_init() }
func file_dacs_v1_dacs_proto_init() {
	if File_dacs_v1_dacs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dacs_v1_dacs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DacsCmdP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dacs_v1_dacs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dacs_v1_dacs_proto_goTypes,
		DependencyIndexes: file_dacs_v1_dacs_proto_depIdxs,
		MessageInfos:      file_dacs_v1_dacs_proto_msgTypes,
	}.Build()
	File_dacs_v1_dacs_proto = out.File
	file_dacs_v1_dacs_proto_rawDesc = nil
	file_dacs_v1_dacs_proto_goTypes = nil
	file_dacs_v1_dacs_proto_depIdxs = nil
}
